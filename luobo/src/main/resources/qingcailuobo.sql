

CREATE TABLE `blog` (
  `id` char(32) NOT NULL COMMENT '主键，UUID作为键值',
  `title` varchar(255) NOT NULL COMMENT '标题',
  `author` varchar(50) NOT NULL COMMENT '作者',
  `summary` text NOT NULL COMMENT '摘要',
  `content` text NOT NULL COMMENT 'markdown格式的内容，用于重新编辑',
  `commentNum` int(11) NOT NULL DEFAULT '0' COMMENT '评论数',
  `heartNum` int(11) NOT NULL DEFAULT '0' COMMENT '点赞数',
  `readNum` int(11) NOT NULL DEFAULT '0' COMMENT '阅读数',
  `publishTime` datetime NOT NULL COMMENT '文章创建时间',
  `url` varchar(100) NOT NULL COMMENT '文章相对URL',
  `signature` char(32) NOT NULL COMMENT '文章哈希签名，防止出现重复文章',
  `categoryID` char(32) NOT NULL COMMENT '文章类别ID',
  `lastUpdateTime` datetime NOT NULL COMMENT '文章上次修改时间',
  `path` varchar(100) NOT NULL COMMENT '静态化的文件磁盘路径',
  `coverURL` varchar(255) DEFAULT NULL COMMENT '封面图片',
  `type` int(11) NOT NULL DEFAULT '0' COMMENT '博文类型，0表示普通博文，1表示富博文(带封面图片)',
  `status` int(11) NOT NULL DEFAULT '0' COMMENT '博文状态，0显示，1不显示，2草稿',
  `statusName` varchar(20) DEFAULT NULL COMMENT '状态名称：显示，不显示，草稿',
  `html` text NOT NULL COMMENT 'html格式的博文，主要用于重新静态化',
  `tags` varchar(256) DEFAULT NULL COMMENT '博文标签',
  `shareNum` int(11) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `blog` WRITE;


INSERT INTO `blog` (`id`, `title`, `author`, `summary`, `content`, `commentNum`, `heartNum`, `readNum`, `publishTime`, `url`, `signature`, `categoryID`, `lastUpdateTime`, `path`, `coverURL`, `type`, `status`, `statusName`, `html`, `tags`, `shareNum`)
VALUES
	('00e05640cb9a4cef9ec0c355b4c4cd8c','第三届阿里中间件性能挑战赛 初赛总结','胡建洪','初赛题目是《基于Open-Messaging实现进程内消息引擎》，对应的赛题描述：支撑阿里双十一的万亿级消息中间件RocketMQ在2016年10月正式进入Apache基金会进行孵化。异步解耦，削峰填谷，让消息中间件在现代软件架构中拥有着举足轻重的地位。天下大势，分久必合，合久必分，软件领域也是如此。市场上消息中间件种类繁多，阿里消息团队在此当口，推出厂商无关的Open-Messaging规范，促进消息领域的进一步发展。本赛题要求参赛选手阅读Open-Messaging规范，了解Message，Topic，Queue，Producer，Consumer等概念，并基于相关语言的接口实现进程内消息引擎。','# 1.	初赛\n初赛题目：《基于Open-Messaging实现进程内消息引擎》\n## 1.1.	赛题背景分析及理解\n赛题描述：支撑阿里双十一的万亿级消息中间件RocketMQ在2016年10月正式进入Apache基金会进行孵化。异步解耦，削峰填谷，让消息中间件在现代软件架构中拥有着举足轻重的地位。天下大势，分久必合，合久必分，软件领域也是如此。市场上消息中间件种类繁多，阿里消息团队在此当口，推出厂商无关的Open-Messaging规范，促进消息领域的进一步发展。本赛题要求参赛选手阅读Open-Messaging规范，了解Message，Topic，Queue，Producer，Consumer等概念，并基于相关语言的接口实现进程内消息引擎。\n分析与理解：消息中间件分布式系统的消息传递和通信中具有举足轻重的作用，消息中间件的性能在一定程度上决定了整个系统的性能。消息中间件对于生产者而言，写入消息要快，且消息写入后不能丢失；对于消费者而言，消费顺序不能乱，消息到的消息要准确及时。一般而言，要做到高性能的分布式消息中间件，在架构上和实现上都要高屋建瓴，推出通用的规范和概念，便于沟通和交流，以及软件的发展和升级。目前，阿里具有很大的平台，拥有别人没有的数据和技术优势，但是也面临着别人没有的挑战，比如双十一亿万级消息挑战等。通过这次比赛，我们可以更进一步感受和了解阿里的技术以及面临的挑战，通过拓宽自己的眼界，提升自己的技术水平。\n## 1.2.	核心思路\n根据题目要求，我们需要实现指定接口，完成消息的生产、存储、消费等功能。其中消息的存储是关键，需要保证消息的正确性和顺序一致性，同时需要持久化到磁盘上，消息持久化的方式和性能影响着生产消息和消费消息的速度。下面是我们的核心思路的具体说明。\n### 1.2.1.	整体处理流程\n整体处理流程如图1所示，首先启动生产进程生产消息，并进行消息存储，由于消息生产和消息消费是不同进程，需要进行消息持久化，保存到磁盘上，待消息生产结束后，结束生产进程，启动消费进程进行消息消费，消费过程需要保证消费到的消息次序和生产时次序一致，且消息正确。\n\n![图1 整体流程图](http://static.huding.name/image/c3b6eb140aa8480fa2f2bfeadb67d336.png)\n### 1.2.2.	消息存储方案\n在比赛中，我们实现了多种消息存储方案，分别如下：\n方案1：这个消息存储方案为一个Topic或者Queue对应一个文件。每个生产者在写入消息到Topic或者Queue时，先获取Topic或者Queue的互斥锁，获取到锁后，然后再写入消息。每个消费者消费时可以同时打开同一个文件进行消费，互不干扰。\n优点：管理简单\n缺点：需要加锁以保证消息的正确写入，效率不高；\n方案2：这个消息存储方案为一个Topic或者Queue对应多个文件。对于一个Topic或者Queue我们以Topic或Queue的名称建立一个目录，每个线程如果要将消息写入到该Topic或者Queue中，则在目录下创建一个独立文件，该线程的要写入该Topic或者Queue的后续消息都将写入到该文件中。当需要消费一个Topic或者Queue中的消息时，消费者只需依次消费该Toipc或者Queue下对应的目录下的所有文件的消息即可。\n优点：无需加锁，写入效率较高。\n缺点：消息存储时文件数跟线程相关，耦合度相对较高。\n\n对比方案1和方案2，我们最后采用方案2实现消息存储，线上测试时效率也比方案1要高。\n### 1.2.3.	消息持久化\n消息由头部（headers)、属性（properties)、主体（body)三个部分组成，其中头部和属性为KeyValue结构，消息主体为byte[]数组。\n\n消息存储需要序列化，消息是一个对象，对象的序列化方案主要有JDK的Serializable ，将对象转换为JSON或者XML格式的字符串，自定义存储格式等。其中JDK的Serializable 在序列化时，需要额外写入对象的Class信息，效率不高，且浪费空间。JSON或者XML则需要将对象转换为字符串，多了一个转换过程，增加了CPU开销。我们根据实际情况，采用自定义存储格式进行消息序列化，具体如下：\n对于KeyValue结构的Headers或Properties，我们先写入KeyValue总数，然后对于每个KeyValue，先写入Key的字节数组长度，然后写入key的字节数组，再写入Value的字节数组长度，最后写入Value的字节数组。\n对于消息主体的byte[]，我们先写入byte[]的长度，然后写入byte[]。\n\n其中，一条消息序列化后的结构为：Header  + Properties +  body，示意图如图2所示：\n![图2 消息序列化结构图](http://static.huding.name/image/dce8cb228179413289fd08d0faad8784.png)\n\n### 1.2.4.	数据压缩方案\n由于消息数据量大，而IO速度比较慢，因此我们将数据进行压缩后，在进行IO操作，这样做可以减少IO的数据量而提高写入效率。当然这种方案是用CPU开销换IO开销的方案。\n对于数据压缩，无损压缩算法主要有Deflater，Snappy，LZ4，QuickLZ等。其中Deflater压缩速度比较慢。在线上测试时，我们使用了Deflater，Snappy，QucikLZ等3个压缩算法，压缩性能依次为：\nSnappy > QiuckLZ > Deflater\n在数据压缩时，如果每次只压缩一条消息，无疑效率是低下的，因此我们设置消息序列化缓存区，缓存区大小为32KB + 256B，每当缓存区满了，则调用压缩算法将缓存区数据压缩并写入文件。\n### 1.3.	关键代码\n消息写入关键代码：\n```\n    public class SnappyWriter implements IWriter {\n    	private RandomAccessFile file;\n    	public static final int DEFAULT_SIZE = IConstants.CMP_MS;\n    	private byte[] bytes = new byte[DEFAULT_SIZE + IConstants.MSG_ML];\n    	private int p;\n    	private byte[] cmp = new byte[DEFAULT_SIZE + IConstants.MSG_ML];\n    \n    	public SnappyWriter(String dir) throws IOException {\n    		file = new RandomAccessFile(dir, \"rw\");\n    	}\n    	private void put(byte a) {\n    		bytes[p++] = (byte) (a & 0xff);\n    	}\n    	private void put(byte[] bs) {\n    		int a = bs.length;\n    		if(a < Byte.MAX_VALUE){\n    			bytes[p++] = (byte) (a & 0xff);\n    		} else {\n    			bytes[p++] = (byte) ((a >> 8 & 0xff) | 0x80);\n    			bytes[p++] = (byte) (a & 0xff);\n    		}\n    		System.arraycopy(bs, 0, bytes, p, bs.length);\n    		p += bs.length;\n    	}\n    	public void write(DefaultBytesMessage message) throws IOException {\n    		DefaultKeyValue h = (DefaultKeyValue)message.headers();\n    		DefaultKeyValue pro = (DefaultKeyValue)message.properties();\n    		// 减少一个字节存储头部和属性的长度\n    		byte tsize = (byte) ((((byte)h.num) << 4 & 0xf0) | (pro.num & 0x0f));\n    		put(tsize);\n    		for (int i = 0; i < h.num; i++) {\n    			put(h.keys[i].getBytes());\n    			put(h.values[i]);\n    		}\n    		for (int i = 0; i < pro.num; i++) {\n    			put(pro.keys[i].getBytes());\n    			put(pro.values[i]);\n    		}\n    		byte[] body = ((DefaultBytesMessage) message).getBody();\n    		put(body);\n    		\n    		if (p >= DEFAULT_SIZE) {\n    			int clen = Snappy.compress(bytes, 0,p, cmp, 0);\n    			file.writeShort(clen);\n    			file.write(cmp, 0, clen);\n    			this.p = 0;\n    		}\n    	}\n    	public void close() throws IOException {\n    		if (this.p > 0) {\n    			int clen = Snappy.compress(bytes, 0,p, cmp, 0);\n    			file.writeShort(clen);\n    			file.write(cmp, 0, clen);\n    		}\n    		file.writeShort(0);\n    		file.close();\n    	}\n    }\n```\n\n消息读取关键代码：\n\n```\n    public class SnappyReader implements IReader {\n    	private int cnt = 0;\n    	private MappedByteBuffer[] mBuffers;\n    	\n    	public SnappyReader(String dir) throws IOException {\n    		File dirFile = new File(dir);\n    		if (!dirFile.exists()) {\n    			this.complete = true;\n    			return;\n    		}\n    		File[] files = dirFile.listFiles();\n    		if (files.length <= 0) {\n    			this.complete = true;\n    			return;\n    		}\n    		mBuffers = new MappedByteBuffer[files.length];\n    		for (int i = 0; i < files.length; i++) {\n    			@SuppressWarnings(\"resource\")\n    			FileChannel channel = new FileInputStream(files[i])\n    					.getChannel();\n    			mBuffers[i] = channel.map(MapMode.READ_ONLY, 0, channel.size());\n    		}\n    		mBuffer = mBuffers[cnt++];\n    	}\n        \n        public BytesMessage read() throws Exception {\n    		if (complete) {\n    			return null;\n    		}\n    		if(p < limit){\n    			return fromBuffer();\n    		}\n    		int len = 0;\n    		while ((len = getLen()) == 0) {\n    			if (cnt == mBuffers.length) {\n    				this.complete = true;\n    				return null;\n    			}\n    			mBuffer = mBuffers[cnt++];\n    		}\n    		mBuffer.get(cmp, 0, len);\n    		limit = Snappy.uncompress(cmp, 0, len, bytes, 0);\n    		p = 0;\n    		return fromBuffer();\n    	}\n        private int getLen(){\n        	byte b1 = mBuffer.get();\n        	byte b2 = mBuffer.get();\n        	return ((((b1 & 0xff) << 8) | (b2 & 0xff))) & 0x7fffffff;\n        }\n    	\n    	private byte[] cmp = new byte[IConstants.CMP_MS + IConstants.MSG_ML];\n    	private byte[] bytes = new byte[IConstants.CMP_MS + IConstants.MSG_ML];\n    	private int p;\n    	private int limit;\n    	\n    	private ByteBuffer mBuffer;\n    	private boolean complete = false;\n    	\n    	private QingBytesMessage msg = new QingBytesMessage();\n    	private QingKeyValue hds = new QingKeyValue(2);\n    	private QingKeyValue pros = new QingKeyValue(4);\n    	\n    	private static final String TOPIC = MessageHeader.TOPIC;\n    	private static final String QUEUE = MessageHeader.QUEUE;\n    	\n    	private BytesMessage fromBuffer() {\n    		byte tsize = getByte();\n    		int keySize = (tsize >> 4 & 0x0f);\n    		int pSize = (tsize & 0x0f);\n    		hds.clear();\n    		for (int i = 0; i < keySize; i++) {\n    			String key = getString();\n    			switch (key) {\n    			case \"T\":\n    				hds.put(TOPIC, getBytes());\n    				break;\n    			case \"Q\":\n    				hds.put(QUEUE, getBytes());\n    				break;\n    			default:\n    				hds.put(key, getBytes());\n    				break;\n    			}\n    		}\n    		msg.setHeaders(hds);\n    		if(pSize > 0){\n    			pros.clear();\n    			for (int i = 0; i < pSize; i++) {\n    				pros.put(getString(), getBytes());\n    			}\n    			msg.setProperties(pros);\n    		} else {\n    			msg.setProperties(null);\n    		}\n    		msg.setBody(getBytes());\n    		return msg;\n    	}\n    	public int getShort() {\n    		return (((bytes[p++] & 0xff) << 8) | ((bytes[p++] & 0xff)));\n    	}\n    \n    	public byte getByte() {\n    		return (byte) (bytes[p++] & 0xff);\n    	}\n    	public String getString() {\n    		int a = (bytes[p++] & 0xff);\n    		String s = new String(bytes, p, a);\n    		p += a;\n    		return s;\n    	}\n    	public byte[] getBytes() {\n    		int a = (((bytes[p++] & 0xff) << 8) | ((bytes[p++] & 0xff)));\n    		byte[] b = new byte[a];\n    		System.arraycopy(bytes, p, b, 0, a);\n    		p += a;\n    		return b;\n    	}\n    }\n```\n1.4.	总结\n尽量实现对象复用，避免频繁创建对象，避免频繁GC。\n能够避免加锁就避免，如果无法避免，则将加锁范围控制在最小范围内。\n减少中间数据拷贝过程，尽量直接将数据拷贝志最终目标处，能极大的提高效率。\n代码越优化越简单，往往简单的代码比复杂的代码可读性高，性能也相对来说比较高。\n\n代码已经开源在GitHub上了，需要的同学可以参考下：[初赛代码](https://github.com/hujianhong/open-messaging-contest.git \"初赛代码\")\n\n\n',1,140,89,'2017-07-21 17:51:58','/B20170721175158.html','93C299989787E9190F93DF9CB49A45B2','aab2e1cb0e4148c4b081df9940c2800a','2017-07-21 17:51:58','/wwwroot/html/qingcai-front/B20170721175158.html','http://static.huding.name/image/1af1febe1b6a4a2bade79747c1c20bac.jpg',1,0,'发表','<h1 id=\"h1-1-\"><a name=\"1.    初赛\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.    初赛</h1><p>初赛题目：《基于Open-Messaging实现进程内消息引擎》</p>\n<h2 id=\"h2-1-1-\"><a name=\"1.1.    赛题背景分析及理解\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.1.    赛题背景分析及理解</h2><p>赛题描述：支撑阿里双十一的万亿级消息中间件RocketMQ在2016年10月正式进入Apache基金会进行孵化。异步解耦，削峰填谷，让消息中间件在现代软件架构中拥有着举足轻重的地位。天下大势，分久必合，合久必分，软件领域也是如此。市场上消息中间件种类繁多，阿里消息团队在此当口，推出厂商无关的Open-Messaging规范，促进消息领域的进一步发展。本赛题要求参赛选手阅读Open-Messaging规范，了解Message，Topic，Queue，Producer，Consumer等概念，并基于相关语言的接口实现进程内消息引擎。<br>分析与理解：消息中间件分布式系统的消息传递和通信中具有举足轻重的作用，消息中间件的性能在一定程度上决定了整个系统的性能。消息中间件对于生产者而言，写入消息要快，且消息写入后不能丢失；对于消费者而言，消费顺序不能乱，消息到的消息要准确及时。一般而言，要做到高性能的分布式消息中间件，在架构上和实现上都要高屋建瓴，推出通用的规范和概念，便于沟通和交流，以及软件的发展和升级。目前，阿里具有很大的平台，拥有别人没有的数据和技术优势，但是也面临着别人没有的挑战，比如双十一亿万级消息挑战等。通过这次比赛，我们可以更进一步感受和了解阿里的技术以及面临的挑战，通过拓宽自己的眼界，提升自己的技术水平。\n<h2 id=\"h2-1-2-\"><a name=\"1.2.    核心思路\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.2.    核心思路</h2><p>根据题目要求，我们需要实现指定接口，完成消息的生产、存储、消费等功能。其中消息的存储是关键，需要保证消息的正确性和顺序一致性，同时需要持久化到磁盘上，消息持久化的方式和性能影响着生产消息和消费消息的速度。下面是我们的核心思路的具体说明。</p>\n<h3 id=\"h3-1-2-1-\"><a name=\"1.2.1.    整体处理流程\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.2.1.    整体处理流程</h3><p>整体处理流程如图1所示，首先启动生产进程生产消息，并进行消息存储，由于消息生产和消息消费是不同进程，需要进行消息持久化，保存到磁盘上，待消息生产结束后，结束生产进程，启动消费进程进行消息消费，消费过程需要保证消费到的消息次序和生产时次序一致，且消息正确。</p>\n<p><img src=\"http://static.huding.name/image/c3b6eb140aa8480fa2f2bfeadb67d336.png\" alt=\"图1 整体流程图\">\n<h3 id=\"h3-1-2-2-\"><a name=\"1.2.2.    消息存储方案\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.2.2.    消息存储方案</h3><p>在比赛中，我们实现了多种消息存储方案，分别如下：<br>方案1：这个消息存储方案为一个Topic或者Queue对应一个文件。每个生产者在写入消息到Topic或者Queue时，先获取Topic或者Queue的互斥锁，获取到锁后，然后再写入消息。每个消费者消费时可以同时打开同一个文件进行消费，互不干扰。<br>优点：管理简单<br>缺点：需要加锁以保证消息的正确写入，效率不高；<br>方案2：这个消息存储方案为一个Topic或者Queue对应多个文件。对于一个Topic或者Queue我们以Topic或Queue的名称建立一个目录，每个线程如果要将消息写入到该Topic或者Queue中，则在目录下创建一个独立文件，该线程的要写入该Topic或者Queue的后续消息都将写入到该文件中。当需要消费一个Topic或者Queue中的消息时，消费者只需依次消费该Toipc或者Queue下对应的目录下的所有文件的消息即可。<br>优点：无需加锁，写入效率较高。<br>缺点：消息存储时文件数跟线程相关，耦合度相对较高。\n<p>对比方案1和方案2，我们最后采用方案2实现消息存储，线上测试时效率也比方案1要高。</p>\n<h3 id=\"h3-1-2-3-\"><a name=\"1.2.3.    消息持久化\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.2.3.    消息持久化</h3><p>消息由头部（headers)、属性（properties)、主体（body)三个部分组成，其中头部和属性为KeyValue结构，消息主体为byte[]数组。</p>\n<p>消息存储需要序列化，消息是一个对象，对象的序列化方案主要有JDK的Serializable ，将对象转换为JSON或者XML格式的字符串，自定义存储格式等。其中JDK的Serializable 在序列化时，需要额外写入对象的Class信息，效率不高，且浪费空间。JSON或者XML则需要将对象转换为字符串，多了一个转换过程，增加了CPU开销。我们根据实际情况，采用自定义存储格式进行消息序列化，具体如下：<br>对于KeyValue结构的Headers或Properties，我们先写入KeyValue总数，然后对于每个KeyValue，先写入Key的字节数组长度，然后写入key的字节数组，再写入Value的字节数组长度，最后写入Value的字节数组。<br>对于消息主体的byte[]，我们先写入byte[]的长度，然后写入byte[]。\n<p>其中，一条消息序列化后的结构为：Header  + Properties +  body，示意图如图2所示：<br><img src=\"http://static.huding.name/image/dce8cb228179413289fd08d0faad8784.png\" alt=\"图2 消息序列化结构图\">\n<h3 id=\"h3-1-2-4-\"><a name=\"1.2.4.    数据压缩方案\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.2.4.    数据压缩方案</h3><p>由于消息数据量大，而IO速度比较慢，因此我们将数据进行压缩后，在进行IO操作，这样做可以减少IO的数据量而提高写入效率。当然这种方案是用CPU开销换IO开销的方案。<br>对于数据压缩，无损压缩算法主要有Deflater，Snappy，LZ4，QuickLZ等。其中Deflater压缩速度比较慢。在线上测试时，我们使用了Deflater，Snappy，QucikLZ等3个压缩算法，压缩性能依次为：<br>Snappy &gt; QiuckLZ &gt; Deflater<br>在数据压缩时，如果每次只压缩一条消息，无疑效率是低下的，因此我们设置消息序列化缓存区，缓存区大小为32KB + 256B，每当缓存区满了，则调用压缩算法将缓存区数据压缩并写入文件。\n<h3 id=\"h3-1-3-\"><a name=\"1.3.    关键代码\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.3.    关键代码</h3><p>消息写入关键代码：</p>\n<pre><code>    public class SnappyWriter implements IWriter {\n        private RandomAccessFile file;\n        public static final int DEFAULT_SIZE = IConstants.CMP_MS;\n        private byte[] bytes = new byte[DEFAULT_SIZE + IConstants.MSG_ML];\n        private int p;\n        private byte[] cmp = new byte[DEFAULT_SIZE + IConstants.MSG_ML];\n\n        public SnappyWriter(String dir) throws IOException {\n            file = new RandomAccessFile(dir, \"rw\");\n        }\n        private void put(byte a) {\n            bytes[p++] = (byte) (a &amp; 0xff);\n        }\n        private void put(byte[] bs) {\n            int a = bs.length;\n            if(a &lt; Byte.MAX_VALUE){\n                bytes[p++] = (byte) (a &amp; 0xff);\n            } else {\n                bytes[p++] = (byte) ((a &gt;&gt; 8 &amp; 0xff) | 0x80);\n                bytes[p++] = (byte) (a &amp; 0xff);\n            }\n            System.arraycopy(bs, 0, bytes, p, bs.length);\n            p += bs.length;\n        }\n        public void write(DefaultBytesMessage message) throws IOException {\n            DefaultKeyValue h = (DefaultKeyValue)message.headers();\n            DefaultKeyValue pro = (DefaultKeyValue)message.properties();\n            // 减少一个字节存储头部和属性的长度\n            byte tsize = (byte) ((((byte)h.num) &lt;&lt; 4 &amp; 0xf0) | (pro.num &amp; 0x0f));\n            put(tsize);\n            for (int i = 0; i &lt; h.num; i++) {\n                put(h.keys[i].getBytes());\n                put(h.values[i]);\n            }\n            for (int i = 0; i &lt; pro.num; i++) {\n                put(pro.keys[i].getBytes());\n                put(pro.values[i]);\n            }\n            byte[] body = ((DefaultBytesMessage) message).getBody();\n            put(body);\n\n            if (p &gt;= DEFAULT_SIZE) {\n                int clen = Snappy.compress(bytes, 0,p, cmp, 0);\n                file.writeShort(clen);\n                file.write(cmp, 0, clen);\n                this.p = 0;\n            }\n        }\n        public void close() throws IOException {\n            if (this.p &gt; 0) {\n                int clen = Snappy.compress(bytes, 0,p, cmp, 0);\n                file.writeShort(clen);\n                file.write(cmp, 0, clen);\n            }\n            file.writeShort(0);\n            file.close();\n        }\n    }\n</code></pre><p>消息读取关键代码：</p>\n<pre><code>    public class SnappyReader implements IReader {\n        private int cnt = 0;\n        private MappedByteBuffer[] mBuffers;\n\n        public SnappyReader(String dir) throws IOException {\n            File dirFile = new File(dir);\n            if (!dirFile.exists()) {\n                this.complete = true;\n                return;\n            }\n            File[] files = dirFile.listFiles();\n            if (files.length &lt;= 0) {\n                this.complete = true;\n                return;\n            }\n            mBuffers = new MappedByteBuffer[files.length];\n            for (int i = 0; i &lt; files.length; i++) {\n                @SuppressWarnings(\"resource\")\n                FileChannel channel = new FileInputStream(files[i])\n                        .getChannel();\n                mBuffers[i] = channel.map(MapMode.READ_ONLY, 0, channel.size());\n            }\n            mBuffer = mBuffers[cnt++];\n        }\n\n        public BytesMessage read() throws Exception {\n            if (complete) {\n                return null;\n            }\n            if(p &lt; limit){\n                return fromBuffer();\n            }\n            int len = 0;\n            while ((len = getLen()) == 0) {\n                if (cnt == mBuffers.length) {\n                    this.complete = true;\n                    return null;\n                }\n                mBuffer = mBuffers[cnt++];\n            }\n            mBuffer.get(cmp, 0, len);\n            limit = Snappy.uncompress(cmp, 0, len, bytes, 0);\n            p = 0;\n            return fromBuffer();\n        }\n        private int getLen(){\n            byte b1 = mBuffer.get();\n            byte b2 = mBuffer.get();\n            return ((((b1 &amp; 0xff) &lt;&lt; 8) | (b2 &amp; 0xff))) &amp; 0x7fffffff;\n        }\n\n        private byte[] cmp = new byte[IConstants.CMP_MS + IConstants.MSG_ML];\n        private byte[] bytes = new byte[IConstants.CMP_MS + IConstants.MSG_ML];\n        private int p;\n        private int limit;\n\n        private ByteBuffer mBuffer;\n        private boolean complete = false;\n\n        private QingBytesMessage msg = new QingBytesMessage();\n        private QingKeyValue hds = new QingKeyValue(2);\n        private QingKeyValue pros = new QingKeyValue(4);\n\n        private static final String TOPIC = MessageHeader.TOPIC;\n        private static final String QUEUE = MessageHeader.QUEUE;\n\n        private BytesMessage fromBuffer() {\n            byte tsize = getByte();\n            int keySize = (tsize &gt;&gt; 4 &amp; 0x0f);\n            int pSize = (tsize &amp; 0x0f);\n            hds.clear();\n            for (int i = 0; i &lt; keySize; i++) {\n                String key = getString();\n                switch (key) {\n                case \"T\":\n                    hds.put(TOPIC, getBytes());\n                    break;\n                case \"Q\":\n                    hds.put(QUEUE, getBytes());\n                    break;\n                default:\n                    hds.put(key, getBytes());\n                    break;\n                }\n            }\n            msg.setHeaders(hds);\n            if(pSize &gt; 0){\n                pros.clear();\n                for (int i = 0; i &lt; pSize; i++) {\n                    pros.put(getString(), getBytes());\n                }\n                msg.setProperties(pros);\n            } else {\n                msg.setProperties(null);\n            }\n            msg.setBody(getBytes());\n            return msg;\n        }\n        public int getShort() {\n            return (((bytes[p++] &amp; 0xff) &lt;&lt; 8) | ((bytes[p++] &amp; 0xff)));\n        }\n\n        public byte getByte() {\n            return (byte) (bytes[p++] &amp; 0xff);\n        }\n        public String getString() {\n            int a = (bytes[p++] &amp; 0xff);\n            String s = new String(bytes, p, a);\n            p += a;\n            return s;\n        }\n        public byte[] getBytes() {\n            int a = (((bytes[p++] &amp; 0xff) &lt;&lt; 8) | ((bytes[p++] &amp; 0xff)));\n            byte[] b = new byte[a];\n            System.arraycopy(bytes, p, b, 0, a);\n            p += a;\n            return b;\n        }\n    }\n</code></pre><p>1.4.    总结<br>尽量实现对象复用，避免频繁创建对象，避免频繁GC。<br>能够避免加锁就避免，如果无法避免，则将加锁范围控制在最小范围内。<br>减少中间数据拷贝过程，尽量直接将数据拷贝志最终目标处，能极大的提高效率。<br>代码越优化越简单，往往简单的代码比复杂的代码可读性高，性能也相对来说比较高。\n<p>代码已经开源在GitHub上了，需要的同学可以参考下：<a href=\"https://github.com/hujianhong/open-messaging-contest.git\" title=\"初赛代码\">初赛代码</a></p>\n','Java,比赛',0),
	('093dcae887cd4904b2d244fcdca5473a','关于青菜萝卜博客在本地运行的方法','胡建洪','青菜萝卜在本地开发环境运行的方法，如果不需要Nginx的同学，只需先导入数据库脚本，然后直接将项目导入Eclipse或者MyEclipse中，修改数据库配置和Html静态化根目录，就可直接运行项目进行访问测试了。接下来先介绍下数据库脚本的导入。','\n\n青菜萝卜在本地开发环境运行的方法，如果不需要Nginx的同学，只需先导入数据库脚本，然后直接将项目导入Eclipse或者MyEclipse中，修改数据库配置和Html静态化根目录，就可直接运行项目进行访问测试了。接下来先介绍下数据库脚本的导入。\n\n## 导入数据库脚本\n在GitHub克隆或者直接下载下来的文件夹的根目录中qingcailuobo.sql就是MySQL数据库脚本。PS：注意下自己的MySQL服务器是否支持utf8编码，如果不支持的话，直接用文本编辑器打开数据库脚本将所有的utf8替换称utf8即可。\n	\n将数据库脚本导入有命令行和数据库可视化工具，这里只介绍命令行的导入方式，依次执行如下命令：\n\n```\ncreate database qingcailuobo;\nuse qingcailuobo;\nsource XXXXX/qingcailuobo.sql;\n```\n其中，XXXXX表示数据库脚本的存放的父目录。如果控制台输出包含“query ok”等字符表示倒入数据库成功成功，可以进入下一步了，否则就要根据控制台提示进行检查了。\n\n\n## 导入项目\n\n我开发博客系统时使用的是HBuilder+Eclipse，其中Hbuilder负责开发前端，即qingcai-front和qingcai-back两个文件夹，Eclipse负责开发后端，即luobo文件夹。其实只需要Eclipse就可以搞定项目在本地开发环境运行了，因此这里只介绍使用Eclipse导入和运行项目，我的开发方式对于没有接触过Nginx的同学来来说，可能看起来比较麻烦，所以这部分在下一篇博文介绍。\n\n打开Eclipse按照普通Java项目的方式导入项目（如果不会请自行百度），然后将qingcai-front和qingcai-back复制到luobo这个项目的WebRoot下面即可，然后打开luobo项目的src\n目录下的config.properties,修改数据库配置和Html静态化根目录，其中静态化目录设置为qing-front，比如：\n\n```\nSTATICS_ROOT_PATH = /Users/jianhonghu/gitRepository/GitHub/blog/qingcai-front\n```\n\nPS:由于这种方式和我本地开发方式不一样，需要同学在做如下修改，才能保证项目不出错，具体如下：\n\n打开me.huding.luobo.back.StaticsUtils.java文件，将：\n\n```\n/**\n	 * 生成静态化的HTML的相对URL\n	 * @param value\n	 * @return\n	 */\n	public static String genHtmlURL(String value){\n		return Parameters.ARTICLES_PATH + \"/\" + value;\n	}\n```\n替换为：\n\n```\n/**\n	 * 生成静态化的HTML的相对URL\n	 * @param value\n	 * @return\n	 */\n	public static String genHtmlURL(String value){\n		return value;\n	}\n\n```\n\n同时将\n\n```\npublic static String genPath(String url){\n		return Parameters.STATICS_FINAL_PATH + url;\n}\n```\n\n替换为：\n\n```\npublic static String genPath(String url){\n		return Parameters.STATICS_FINAL_PATH + File.separator + url;\n}\n```\n\n### 运行项目\n\n直接运行me.huding.luobo.AppConfig.java文件里的main方法即可，然后在浏览器的地址栏输入：\n```\nhttp://localhost:8080/luobo/qingcai-front/index.html\n```\n就可以访问前台的博客系统了，在地址栏输入：\n```\nhttp://localhost:8080/luobo/qingcai-back/login.html\n```\n输入默认的账号和密码：admin,123456，即可访问博客的后台管理系统。\n\n\n\nPS：本文写的不是很好啊，不喜勿喷啊！',6,145,1251,'2017-02-21 20:43:19','/B20170221204319.html','6EC6DF51013153030E327FF8D6D66C0D','18f3adde58d0497393f35e653b95aff8','2017-02-21 20:43:19','/wwwroot/html/qingcai-front/B20170221204319.html',NULL,0,0,'发表','<p>青菜萝卜在本地开发环境运行的方法，如果不需要Nginx的同学，只需先导入数据库脚本，然后直接将项目导入Eclipse或者MyEclipse中，修改数据库配置和Html静态化根目录，就可直接运行项目进行访问测试了。接下来先介绍下数据库脚本的导入。</p>\n<h2 id=\"h2-u5BFCu5165u6570u636Eu5E93u811Au672C\"><a name=\"导入数据库脚本\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>导入数据库脚本</h2><p>在GitHub克隆或者直接下载下来的文件夹的根目录中qingcailuobo.sql就是MySQL数据库脚本。PS：注意下自己的MySQL服务器是否支持utf8编码，如果不支持的话，直接用文本编辑器打开数据库脚本将所有的utf8替换称utf8即可。</p>\n<p>将数据库脚本导入有命令行和数据库可视化工具，这里只介绍命令行的导入方式，依次执行如下命令：</p>\n<pre><code>create database qingcailuobo;\nuse qingcailuobo;\nsource XXXXX/qingcailuobo.sql;\n</code></pre><p>其中，XXXXX表示数据库脚本的存放的父目录。如果控制台输出包含“query ok”等字符表示倒入数据库成功成功，可以进入下一步了，否则就要根据控制台提示进行检查了。</p>\n<h2 id=\"h2-u5BFCu5165u9879u76EE\"><a name=\"导入项目\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>导入项目</h2><p>我开发博客系统时使用的是HBuilder+Eclipse，其中Hbuilder负责开发前端，即qingcai-front和qingcai-back两个文件夹，Eclipse负责开发后端，即luobo文件夹。其实只需要Eclipse就可以搞定项目在本地开发环境运行了，因此这里只介绍使用Eclipse导入和运行项目，我的开发方式对于没有接触过Nginx的同学来来说，可能看起来比较麻烦，所以这部分在下一篇博文介绍。</p>\n<p>打开Eclipse按照普通Java项目的方式导入项目（如果不会请自行百度），然后将qingcai-front和qingcai-back复制到luobo这个项目的WebRoot下面即可，然后打开luobo项目的src<br>目录下的config.properties,修改数据库配置和Html静态化根目录，其中静态化目录设置为qing-front，比如：\n<pre><code>STATICS_ROOT_PATH = /Users/jianhonghu/gitRepository/GitHub/blog/qingcai-front\n</code></pre><p>PS:由于这种方式和我本地开发方式不一样，需要同学在做如下修改，才能保证项目不出错，具体如下：</p>\n<p>打开me.huding.luobo.back.StaticsUtils.java文件，将：</p>\n<pre><code>/**\n     * 生成静态化的HTML的相对URL\n     * @param value\n     * @return\n     */\n    public static String genHtmlURL(String value){\n        return Parameters.ARTICLES_PATH + \"/\" + value;\n    }\n</code></pre><p>替换为：</p>\n<pre><code>/**\n     * 生成静态化的HTML的相对URL\n     * @param value\n     * @return\n     */\n    public static String genHtmlURL(String value){\n        return value;\n    }\n</code></pre><p>同时将</p>\n<pre><code>public static String genPath(String url){\n        return Parameters.STATICS_FINAL_PATH + url;\n}\n</code></pre><p>替换为：</p>\n<pre><code>public static String genPath(String url){\n        return Parameters.STATICS_FINAL_PATH + File.separator + url;\n}\n</code></pre><h3 id=\"h3-u8FD0u884Cu9879u76EE\"><a name=\"运行项目\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>运行项目</h3><p>直接运行me.huding.luobo.AppConfig.java文件里的main方法即可，然后在浏览器的地址栏输入：</p>\n<pre><code>http://localhost:8080/luobo/qingcai-front/index.html\n</code></pre><p>就可以访问前台的博客系统了，在地址栏输入：</p>\n<pre><code>http://localhost:8080/luobo/qingcai-back/login.html\n</code></pre><p>输入默认的账号和密码：admin,123456，即可访问博客的后台管理系统。</p>\n<p>PS：本文写的不是很好啊，不喜勿喷啊！</p>\n','博客,浏览器,Eclipse,本地运行',0),
	('25e6009dc84e483293e30f8578be6382','LevelDB简介','胡建洪','LevelDB是Google开源的持久化KV单机数据库，具有很高的随机写，顺序读／写性能，但是随机读的性能很一般。适用场景是查询较少，而写很多的场景。LevelDB应用了LSM（Log Structured Merge)策略，LSM_TREE 对索引变更进行延迟及批量处理，并通过一种类似于归并排序的方式高效的将更新迁移到磁盘，降低索引插入开销。','# LevelDB简介\n\nLevelDB是Google开源的持久化KV单机数据库，具有很高的随机写，顺序读／写性能，但是随机读的性能很一般。适用场景是查询较少，而写很多的场景。LevelDB应用了LSM（Log Structured Merge)策略，LSM_TREE 对索引变更进行延迟及批量处理，并通过一种类似于归并排序的方式高效的将更新迁移到磁盘，降低索引插入开销。\n\n根据[LevelDB官方网站](https://github.com/google/leveldb)的描述，LevelDB的特点和限制如下：\n\n特点：\n\n1. key和value都是任意长度的字节数组；\n2. 数据根据key有序存储；\n3. 调用者可以提供自定义比较功能来覆盖排序顺序；\n4. 基本操作是Put(key,value),Get(key),Delete(key);\n5. 多个更改操作可以作为一个原子操作进行；\n6. 用户可以创建一个瞬时快照，以获得一致的数据视图；\n7. 在数据上支持向前和向后迭代；\n8. 适用Snappy压缩库自动压缩数据；\n9. 外部活动（如文件系统操作等）通过虚拟接口进行中继，因此用户可以自定义与操作系统的交互。\n\n\n限制：\n\n1. 这不是SQL数据库。它没有关系数据模型，它不支持SQL查询，并且它不支持索引。\n2. 在同一时刻只能有一个进程（可能是多线程）访问一个特定的数据库；\n3. 在库中没有内置客户端-服务器支持。需要这种支持的应用程序将不得不将自己的服务器包装在库中。\n\n\n\n\n\n\n\n\n',0,0,12,'2017-09-05 22:20:19','/B20170905222019.html','22230A278ACA519F2A7721FFC1BB1090','4','2017-09-05 22:20:19','/wwwroot/html/qingcai-front/B20170905222019.html',NULL,0,0,'发表','<h1 id=\"h1-leveldb-\"><a name=\"LevelDB简介\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>LevelDB简介</h1><p>LevelDB是Google开源的持久化KV单机数据库，具有很高的随机写，顺序读／写性能，但是随机读的性能很一般。适用场景是查询较少，而写很多的场景。LevelDB应用了LSM（Log Structured Merge)策略，LSM_TREE 对索引变更进行延迟及批量处理，并通过一种类似于归并排序的方式高效的将更新迁移到磁盘，降低索引插入开销。</p>\n<p>根据<a href=\"https://github.com/google/leveldb\">LevelDB官方网站</a>的描述，LevelDB的特点和限制如下：</p>\n<p>特点：</p>\n<ol>\n<li>key和value都是任意长度的字节数组；</li><li>数据根据key有序存储；</li><li>调用者可以提供自定义比较功能来覆盖排序顺序；</li><li>基本操作是Put(key,value),Get(key),Delete(key);</li><li>多个更改操作可以作为一个原子操作进行；</li><li>用户可以创建一个瞬时快照，以获得一致的数据视图；</li><li>在数据上支持向前和向后迭代；</li><li>适用Snappy压缩库自动压缩数据；</li><li>外部活动（如文件系统操作等）通过虚拟接口进行中继，因此用户可以自定义与操作系统的交互。</li></ol>\n<p>限制：</p>\n<ol>\n<li>这不是SQL数据库。它没有关系数据模型，它不支持SQL查询，并且它不支持索引。</li><li>在同一时刻只能有一个进程（可能是多线程）访问一个特定的数据库；</li><li>在库中没有内置客户端-服务器支持。需要这种支持的应用程序将不得不将自己的服务器包装在库中。</li></ol>\n','LevelDB,数据库',0),
	('33a05aaedd7e4fd4ae47e25c7359b940','读《赢在中国，李开复生意经》的笔记','胡建洪','激情是活力的源泉，是生命价值的体现，更是自我发展，展现自我的催化剂。一个人的思想决定他的为人。一个人是在思想中成长起来的，他的性格是其思想的总和。','\n\n## 1.前言\n这两天开始整理放在角落里的各种资料，上面已经积了很厚的灰了，大多是本科阶段的资料，绝大多数是书本资料，少数是自己当年的日记和读书笔记。翻看当年的读书笔记（这里只能强调是当年的笔记，没有记录什么时候写的，我自己又忘了大概是什么读的这些书，不过有一点可以确定的是应该是大一或者大二读的，大三和大四估计那会儿早就没有了读书的习惯了，所以才会造成我现在是一个没有思想，没有内涵的人，只会写些简单的代码，除了代码之外，对于历史，哲学等一无所知，毫无生活情趣，可悲可悲！），发现以前还是蛮上进的，现在嘛，一言难尽啊，研究生两年多感觉蛮失败的，没啥特别的成就，挺堕落的，至少在思想方面没有什么进步，反而退步了！以前读《赢在中国，李开复生意经》的笔记，是写在笔记本上的，这次重新翻阅，觉得有必要重温一下，就抄录为电子版的了，算是洗个脑子吧，喝点鸡汤，补补自己生锈的脑子吧。虽然说是读书笔记，其实只是记录的是书中比较有意思的或者有道理的句子。下面就是这些句子的罗列。\n\n## 2.笔记\n\n1. 怎样成为21世纪的人才？首要条件是自信中不失谦虚，谦虚中不失自信。\n2. 来自外界的机遇可遇不可求，你要自己给自己机会。\n3. 自信是一个人立足社会必不可少的，但也要谦虚，不能自傲，正如空中的星星，对于尘埃来说它大如宇宙，但对于宇宙来说，它小如芥豆。\n4. 谦虚恰恰是一种能容忍他人的能力，是一种成功者的胸怀。\n5. 没有工作经验，但不能否定自己的能力，对于没有自信的求职者，企业不可能接受。\n6. 人不可以有傲气，但也不可以缺乏自信；人不可以不谦虚，但也要适可而止，千万不要谦虚过了头。谦虚与自信看你如何把握了，运用的好，会给人成熟，稳重，有魄力，能力强的感觉；而运用不好，则会给人以无能，虚伪，谄媚的印象了！\n7. 有容德乃大，无求品自高。\n8. 企业核心价值观，诚信位居第一。\n9. 会赚钱的人相信，诚则立家业，信则创未来，没有诚信就不会有坚固的事业基础。\n10. 诚信不仅仅是一种美德，一种看不见的精神品质，更是利害攸关的规则。\n11. 诚信不仅仅是企业核心竞争力的一部分，是一个公司长期发展的基石，是企业文化的一个重要体现，同时，也成为一个企业长期发展的战略的有机组成部分。\n12. 时间可以证明一切，我做事情一定要守诚信，光明磊落，我要摸着自己的良心去追求自己的理想。\n13. 做人要正直，做事要正派，堂堂正正，公正无私，才是立身之本，处世之道。\n14. 做人一定要走得直，行得正，做得端，一定要问问自己是否正直公道。一个做事光明磊落，生气蓬勃，令人愉悦的人，处处受人欢迎。\n15. 做对的事情，把事情做对。\n16. 战胜了自己就会战胜一切，一个登峰造极的勇者到了最后无人能及，却会难以逾越自己。\n17. 我们最不应该做出的牺牲就是因为别人的评价而改变自我。别人赞成你也罢，反对你也罢，却不应该成为你对事或做错事的理由。如果你发现了一个你明了的局势，其中各种关系，你都一清二楚，胸有成竹，那你就行动，不管这种行动是符合常规还是反常，也不管别人赞成还是反对。\n18. 如果你看到前方有阴影，别怕，那是因为你身后有阳光。\n19. 世事多艰，没有几件事情可以简单、顺利地办理。要成事就需要折中。那种满腔理想主义，坚持原则毫不妥协的人，是办不成事情的。\n20. 当一个人无法温饱的时候，确实很难思虑精神层面的事情。但是不缺温饱的任何人，都该有机会做一个高品德，有世界观，有社会责任感的人。\n21. 从事商业活动，尤其希望有大的发展，一定要有高瞻远瞩的眼光，不能只盯着眼前的蝇头小利。庸者赚今天，智者赚明天。\n22. 处理好近期与远期的关系关键在于公司要做好战略规划，做到未雨绸缪，走一步，看两步甚至三步。\n23. 对自己选择所从事的工作，充满激情和想象力，对于前进途中可能出现的各种艰难险阻无所畏惧。\n24. 人最宝贵的东西是生命，生命属于我们只有一次。人的一生应该这样度过，当他回首往事时，不因虚度年华而悔恨，也不因碌碌无为而羞耻。\n25. 坚持实践是种启发式的方法，可以帮助找到喜爱的工作，甄别出那些本以为会做好却不合适你的工作，最终选择真正喜欢的，就好像水在地球引力的作用下可以找到屋顶的漏洞一样。\n26. 艺术的本质是真实，尤其是心灵的真实。\n27. 一个人可以没有出路，但是不能没有欲望。\n28. 如果寻找兴趣和激情？1.把兴趣和才华分开；2.给自己最多的机会去接触更多的选择；3.从成功中得到自信快乐，从自信中得到快乐成功，从快乐中得到成功自信。\n29. 唯有接触你才能尝试，唯有尝试你才能找到你的最爱。\n30. 人生的前途绝不是在自己不感兴趣的事业上，因为你想做的事才是你真正的天赋所在，才是你人生的成功点，才是你生命的寄托和精神的家园。\n31. 成功与不成功，关键在于怎样做事，认真做好每一件小事情，才能认真做好每一件大事情，事业才能成功。\n32. 挫折不是惩罚，而是学习的机会。\n33. 用勇气改变可以改变的事情，用胸怀改变不能改变的事情。\n34. 想要改变自己，就得创造机会，挑战人生。\n35. 机遇是创造主体主动争取来的，主动创造出来的。\n36. 凡事都要做最坏的打算，然后往好的方向努力。人生漫漫，生命如车，你是车的司机，你决定你前进的道路，你决定自己前行的方向。\n37. 坚强的生活信念和立志成功的勇气。\n38. 火石不静摩擦，火花不会发出；同样，人不遇刺激，他的生命火焰不会燃烧！逆境可以说是对人最大的刺激，能锻造坚毅，磨练意志。\n39. 越是艰难，越要坚强，越要充满对成功的渴望。\n40. 从别人的人生中吸取经验来反射自己的人生，这样的人生才是真正懂生活真谛的人。\n41. 成功是优点的发挥，失败是缺点的积累。\n42. 帮助别人等于帮助自己，帮助别人成功，你也获得成功的收获。\n43. 思考比传道更重要，观点比解惑更重要。\n44. 当你忘记所学的一切的时候，剩下的就是学习能力。\n45. 很多时候，受挫的理想也是好理想。从挫折中总结经验教训，能够让职业理想更清晰，并且更容易实现。\n46. 有激情才有动力，有激情才有优秀的主张。\n47. 人生追逐的就是自己的理想，自己的兴趣，自己的快乐，过自己理想的生活。\n48. 激情是不断鞭策和激励我们向前奋进的动力，对工作充满激情，可以不畏惧现实中所遇到的重重困难和阻碍。\n49. 激情是活力的源泉，是生命价值的体现，更是自我发展，展现自我的催化剂。\n50. 我们应该学会发现并珍惜自己的才能，正确的选择人生，在社会寻找适合于自己的位置。\n51. 身体是智能的载体，是事业的本钱。\n52. 越是不被别人看好，越应该证明自己，越是有人怀疑和挑衅的时候，就越是能给你一种力量。\n53. 要记住，领导者制定“不可能”的目标，只能是一种激励手段，而非考核的标准。\n54. 永远也不要消极地认定什么事情是不可能的，首先你要认为你能行，再去尝试，最后你会发现你的确能行。\n55. 寻找创业伙伴，人比投资更重要。\n56. 在职场只有功劳，没有苦劳。领导要的就是结果，要的是达到目的。领导不看我们多努力，吃了多少苦，受了多少委屈，利用了多少个人资源，领导只看结果，只看业绩，只看贡献。\n57. 面对危机最需要的是沉着冷静的心理素质。\n58. 正视困难，正视快乐，正视你面领的一切，是你拥有的一大财富，是你无往而不胜，无胜而不收。\n59. 任何一种兴趣都是由于参与这种活动而使人体验到情绪上的满足，这种满足伴随着一定的情感过程，由此产生的内在性激励更持久，更经济，更有效。\n60. 理想是企业的灵魂，没有理想的企业是生存不下去的。\n61. 做管理工作最重要的是要有服务的意识。好的管理不在于驾驭别人，而在于有足够的管理智慧。\n62. 领导是做正确的事，管理是把是事情做正确。\n63. 正直心，人际沟通的技巧，自律与自省的态度，这些都是做好一个领导者的必备素质。\n64. 一个人的思想决定他的为人。一个人是在思想中成长起来的，他的性格是其思维的总和。',0,1,10,'2017-09-22 23:29:13','/B20170922232913.html','F1C44021B7B97CA9956743E4B174E475','37a822efa50140e88b78ae35e8e13b4f','2017-09-22 23:29:13','/wwwroot/html/qingcai-front/B20170922232913.html',NULL,0,0,'发表','<h2 id=\"h2-1-\"><a name=\"1.前言\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.前言</h2><p>这两天开始整理放在角落里的各种资料，上面已经积了很厚的灰了，大多是本科阶段的资料，绝大多数是书本资料，少数是自己当年的日记和读书笔记。翻看当年的读书笔记（这里只能强调是当年的笔记，没有记录什么时候写的，我自己又忘了大概是什么读的这些书，不过有一点可以确定的是应该是大一或者大二读的，大三和大四估计那会儿早就没有了读书的习惯了，所以才会造成我现在是一个没有思想，没有内涵的人，只会写些简单的代码，除了代码之外，对于历史，哲学等一无所知，毫无生活情趣，可悲可悲！），发现以前还是蛮上进的，现在嘛，一言难尽啊，研究生两年多感觉蛮失败的，没啥特别的成就，挺堕落的，至少在思想方面没有什么进步，反而退步了！以前读《赢在中国，李开复生意经》的笔记，是写在笔记本上的，这次重新翻阅，觉得有必要重温一下，就抄录为电子版的了，算是洗个脑子吧，喝点鸡汤，补补自己生锈的脑子吧。虽然说是读书笔记，其实只是记录的是书中比较有意思的或者有道理的句子。下面就是这些句子的罗列。</p>\n<h2 id=\"h2-2-\"><a name=\"2.笔记\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2.笔记</h2><ol>\n<li>怎样成为21世纪的人才？首要条件是自信中不失谦虚，谦虚中不失自信。</li><li>来自外界的机遇可遇不可求，你要自己给自己机会。</li><li>自信是一个人立足社会必不可少的，但也要谦虚，不能自傲，正如空中的星星，对于尘埃来说它大如宇宙，但对于宇宙来说，它小如芥豆。</li><li>谦虚恰恰是一种能容忍他人的能力，是一种成功者的胸怀。</li><li>没有工作经验，但不能否定自己的能力，对于没有自信的求职者，企业不可能接受。</li><li>人不可以有傲气，但也不可以缺乏自信；人不可以不谦虚，但也要适可而止，千万不要谦虚过了头。谦虚与自信看你如何把握了，运用的好，会给人成熟，稳重，有魄力，能力强的感觉；而运用不好，则会给人以无能，虚伪，谄媚的印象了！</li><li>有容德乃大，无求品自高。</li><li>企业核心价值观，诚信位居第一。</li><li>会赚钱的人相信，诚则立家业，信则创未来，没有诚信就不会有坚固的事业基础。</li><li>诚信不仅仅是一种美德，一种看不见的精神品质，更是利害攸关的规则。</li><li>诚信不仅仅是企业核心竞争力的一部分，是一个公司长期发展的基石，是企业文化的一个重要体现，同时，也成为一个企业长期发展的战略的有机组成部分。</li><li>时间可以证明一切，我做事情一定要守诚信，光明磊落，我要摸着自己的良心去追求自己的理想。</li><li>做人要正直，做事要正派，堂堂正正，公正无私，才是立身之本，处世之道。</li><li>做人一定要走得直，行得正，做得端，一定要问问自己是否正直公道。一个做事光明磊落，生气蓬勃，令人愉悦的人，处处受人欢迎。</li><li>做对的事情，把事情做对。</li><li>战胜了自己就会战胜一切，一个登峰造极的勇者到了最后无人能及，却会难以逾越自己。</li><li>我们最不应该做出的牺牲就是因为别人的评价而改变自我。别人赞成你也罢，反对你也罢，却不应该成为你对事或做错事的理由。如果你发现了一个你明了的局势，其中各种关系，你都一清二楚，胸有成竹，那你就行动，不管这种行动是符合常规还是反常，也不管别人赞成还是反对。</li><li>如果你看到前方有阴影，别怕，那是因为你身后有阳光。</li><li>世事多艰，没有几件事情可以简单、顺利地办理。要成事就需要折中。那种满腔理想主义，坚持原则毫不妥协的人，是办不成事情的。</li><li>当一个人无法温饱的时候，确实很难思虑精神层面的事情。但是不缺温饱的任何人，都该有机会做一个高品德，有世界观，有社会责任感的人。</li><li>从事商业活动，尤其希望有大的发展，一定要有高瞻远瞩的眼光，不能只盯着眼前的蝇头小利。庸者赚今天，智者赚明天。</li><li>处理好近期与远期的关系关键在于公司要做好战略规划，做到未雨绸缪，走一步，看两步甚至三步。</li><li>对自己选择所从事的工作，充满激情和想象力，对于前进途中可能出现的各种艰难险阻无所畏惧。</li><li>人最宝贵的东西是生命，生命属于我们只有一次。人的一生应该这样度过，当他回首往事时，不因虚度年华而悔恨，也不因碌碌无为而羞耻。</li><li>坚持实践是种启发式的方法，可以帮助找到喜爱的工作，甄别出那些本以为会做好却不合适你的工作，最终选择真正喜欢的，就好像水在地球引力的作用下可以找到屋顶的漏洞一样。</li><li>艺术的本质是真实，尤其是心灵的真实。</li><li>一个人可以没有出路，但是不能没有欲望。</li><li>如果寻找兴趣和激情？1.把兴趣和才华分开；2.给自己最多的机会去接触更多的选择；3.从成功中得到自信快乐，从自信中得到快乐成功，从快乐中得到成功自信。</li><li>唯有接触你才能尝试，唯有尝试你才能找到你的最爱。</li><li>人生的前途绝不是在自己不感兴趣的事业上，因为你想做的事才是你真正的天赋所在，才是你人生的成功点，才是你生命的寄托和精神的家园。</li><li>成功与不成功，关键在于怎样做事，认真做好每一件小事情，才能认真做好每一件大事情，事业才能成功。</li><li>挫折不是惩罚，而是学习的机会。</li><li>用勇气改变可以改变的事情，用胸怀改变不能改变的事情。</li><li>想要改变自己，就得创造机会，挑战人生。</li><li>机遇是创造主体主动争取来的，主动创造出来的。</li><li>凡事都要做最坏的打算，然后往好的方向努力。人生漫漫，生命如车，你是车的司机，你决定你前进的道路，你决定自己前行的方向。</li><li>坚强的生活信念和立志成功的勇气。</li><li>火石不静摩擦，火花不会发出；同样，人不遇刺激，他的生命火焰不会燃烧！逆境可以说是对人最大的刺激，能锻造坚毅，磨练意志。</li><li>越是艰难，越要坚强，越要充满对成功的渴望。</li><li>从别人的人生中吸取经验来反射自己的人生，这样的人生才是真正懂生活真谛的人。</li><li>成功是优点的发挥，失败是缺点的积累。</li><li>帮助别人等于帮助自己，帮助别人成功，你也获得成功的收获。</li><li>思考比传道更重要，观点比解惑更重要。</li><li>当你忘记所学的一切的时候，剩下的就是学习能力。</li><li>很多时候，受挫的理想也是好理想。从挫折中总结经验教训，能够让职业理想更清晰，并且更容易实现。</li><li>有激情才有动力，有激情才有优秀的主张。</li><li>人生追逐的就是自己的理想，自己的兴趣，自己的快乐，过自己理想的生活。</li><li>激情是不断鞭策和激励我们向前奋进的动力，对工作充满激情，可以不畏惧现实中所遇到的重重困难和阻碍。</li><li>激情是活力的源泉，是生命价值的体现，更是自我发展，展现自我的催化剂。</li><li>我们应该学会发现并珍惜自己的才能，正确的选择人生，在社会寻找适合于自己的位置。</li><li>身体是智能的载体，是事业的本钱。</li><li>越是不被别人看好，越应该证明自己，越是有人怀疑和挑衅的时候，就越是能给你一种力量。</li><li>要记住，领导者制定“不可能”的目标，只能是一种激励手段，而非考核的标准。</li><li>永远也不要消极地认定什么事情是不可能的，首先你要认为你能行，再去尝试，最后你会发现你的确能行。</li><li>寻找创业伙伴，人比投资更重要。</li><li>在职场只有功劳，没有苦劳。领导要的就是结果，要的是达到目的。领导不看我们多努力，吃了多少苦，受了多少委屈，利用了多少个人资源，领导只看结果，只看业绩，只看贡献。</li><li>面对危机最需要的是沉着冷静的心理素质。</li><li>正视困难，正视快乐，正视你面领的一切，是你拥有的一大财富，是你无往而不胜，无胜而不收。</li><li>任何一种兴趣都是由于参与这种活动而使人体验到情绪上的满足，这种满足伴随着一定的情感过程，由此产生的内在性激励更持久，更经济，更有效。</li><li>理想是企业的灵魂，没有理想的企业是生存不下去的。</li><li>做管理工作最重要的是要有服务的意识。好的管理不在于驾驭别人，而在于有足够的管理智慧。</li><li>领导是做正确的事，管理是把是事情做正确。</li><li>正直心，人际沟通的技巧，自律与自省的态度，这些都是做好一个领导者的必备素质。</li><li>一个人的思想决定他的为人。一个人是在思想中成长起来的，他的性格是其思维的总和。</li></ol>\n','理想,激情,思考',0),
	('359a42eec11c4fee9351a2891bf2afa9','MySQL数据库表分区实践','胡建洪','最近在做新闻评论数据的网络爬虫，需要将爬去到的评论数据存储在MySQL数据库中，提供评论的查询和展示功能。后来随着数据量的上升，MySQL查询性能急剧下降，有时一个查询要等几分种才有结果，无奈之下只好尝试下数据库分区。MySQL数据库表分区实践表明分区查询时间平均比未分区查询快上3~4倍。','最近在做新闻评论数据的网络爬虫，需要将爬去到的评论数据存储在MySQL数据库中，提供评论的查询和展示功能。后来随着数据量的上升，MySQL查询性能急剧下降，有时一个查询要等几分种才有结果，无奈之下只好尝试下数据库分区。\n\n开始评论表的结构如下:\n```\nCREATE TABLE `comment` (\n  `appID` int(11) NOT NULL,\n  `commentID` varchar(50) NOT NULL,\n  `uname` varchar(100) DEFAULT NULL,\n  `content` text,\n  `cdate` datetime DEFAULT NULL,\n  `ucity` varchar(50) DEFAULT NULL,\n  `upnum` int(11) DEFAULT NULL,\n  `downnum` int(11) DEFAULT NULL,\n  `newsID` varchar(50) DEFAULT NULL,\n  `isDeleted` tinyint(1) DEFAULT \'0\',\n  PRIMARY KEY (`commentID`,`appID`),\n  KEY `abc` (`cdate`) USING BTREE,\n  KEY `bcd` (`commentID`) USING BTREE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n```\n  开始以为这样搞，就万事大吉，后来随着数据的增多，达到5千万级别，发现查询越来越慢，因为评论的查询大部分查询的是评论的内容content,使用like \'%expression%\'做的，当然也可以使用lucene或者solr来创建倒排索引进行查询，本文目标不在此。经过调研发现，评论表的数据具有很高的时效性，也可以对评论表按时间进行分区，来加快查询速度。\n\n  创建分区的步骤如下：\n\n1.增加时间cdate为主键\n\nSQL语句如下：\n```\nALTER TABLE `comment`\nMODIFY COLUMN `cdate`  datetime NOT NULL AFTER `content`,\nDROP PRIMARY KEY,\nADD PRIMARY KEY (`commentID`, `appID`, `cdate`);\n```\n\n2.执行分区SQL语句，这里直接创建两年内的分区。自动维护比较麻烦，需要创建存储过程和事件调度器（可以简单理解为时间触发器，按时间周期触发某种操作，这里特指，执行存储过程创建新的分区操作），其中存储过程比较难写，时间计算逻辑复杂。\n\n分区SQL语句：\n```\nalter table comment_1 PARTITION BY RANGE(TO_DAYS (cdate))\n(\nPARTITION p20150115 VALUES LESS THAN (TO_DAYS(\'2015-01-15\')),\nPARTITION p20150131 VALUES LESS THAN (TO_DAYS(\'2015-01-31\')),\nPARTITION p20150215 VALUES LESS THAN (TO_DAYS(\'2015-02-15\')),\nPARTITION p20150228 VALUES LESS THAN (TO_DAYS(\'2015-02-28\')),\nPARTITION p20150315 VALUES LESS THAN (TO_DAYS(\'2015-03-15\')),\nPARTITION p20150331 VALUES LESS THAN (TO_DAYS(\'2015-03-31\')),\nPARTITION p20150415 VALUES LESS THAN (TO_DAYS(\'2015-04-15\')),\nPARTITION p20150430 VALUES LESS THAN (TO_DAYS(\'2015-04-30\')),\nPARTITION p20150515 VALUES LESS THAN (TO_DAYS(\'2015-05-15\')),\nPARTITION p20150531 VALUES LESS THAN (TO_DAYS(\'2015-05-31\')),\nPARTITION p20150615 VALUES LESS THAN (TO_DAYS(\'2015-06-15\')),\nPARTITION p20150630 VALUES LESS THAN (TO_DAYS(\'2015-06-30\')),\nPARTITION p20150715 VALUES LESS THAN (TO_DAYS(\'2015-07-15\')),\nPARTITION p20150731 VALUES LESS THAN (TO_DAYS(\'2015-07-31\')),\nPARTITION p20150815 VALUES LESS THAN (TO_DAYS(\'2015-08-15\')),\nPARTITION p20150831 VALUES LESS THAN (TO_DAYS(\'2015-08-31\')),\nPARTITION p20150915 VALUES LESS THAN (TO_DAYS(\'2015-09-15\')),\nPARTITION p20150930 VALUES LESS THAN (TO_DAYS(\'2015-09-30\')),\nPARTITION p20151015 VALUES LESS THAN (TO_DAYS(\'2015-10-15\')),\nPARTITION p20151031 VALUES LESS THAN (TO_DAYS(\'2015-10-31\')),\nPARTITION p20151115 VALUES LESS THAN (TO_DAYS(\'2015-11-15\')),\nPARTITION p20151130 VALUES LESS THAN (TO_DAYS(\'2015-11-30\')),\nPARTITION p20151215 VALUES LESS THAN (TO_DAYS(\'2015-12-15\')),\nPARTITION p20151231 VALUES LESS THAN (TO_DAYS(\'2015-12-31\')),\nPARTITION p20160115 VALUES LESS THAN (TO_DAYS(\'2016-01-15\')),\nPARTITION p20160131 VALUES LESS THAN (TO_DAYS(\'2016-01-31\')),\nPARTITION p20160215 VALUES LESS THAN (TO_DAYS(\'2016-02-15\')),\nPARTITION p20160228 VALUES LESS THAN (TO_DAYS(\'2016-02-28\')),\nPARTITION p20160315 VALUES LESS THAN (TO_DAYS(\'2016-03-15\')),\nPARTITION p20160331 VALUES LESS THAN (TO_DAYS(\'2016-03-31\')),\nPARTITION p20160415 VALUES LESS THAN (TO_DAYS(\'2016-04-15\')),\nPARTITION p20160430 VALUES LESS THAN (TO_DAYS(\'2016-04-30\')),\nPARTITION p20160515 VALUES LESS THAN (TO_DAYS(\'2016-05-15\')),\nPARTITION p20160531 VALUES LESS THAN (TO_DAYS(\'2016-05-31\')),\nPARTITION p20160615 VALUES LESS THAN (TO_DAYS(\'2016-06-15\')),\nPARTITION p20160630 VALUES LESS THAN (TO_DAYS(\'2016-06-30\')),\nPARTITION p20160715 VALUES LESS THAN (TO_DAYS(\'2016-07-15\')),\nPARTITION p20160731 VALUES LESS THAN (TO_DAYS(\'2016-07-31\')),\nPARTITION p20160815 VALUES LESS THAN (TO_DAYS(\'2016-08-15\')),\nPARTITION p20160831 VALUES LESS THAN (TO_DAYS(\'2016-08-31\')),\nPARTITION p20160915 VALUES LESS THAN (TO_DAYS(\'2016-09-15\')),\nPARTITION p20160930 VALUES LESS THAN (TO_DAYS(\'2016-09-30\')),\nPARTITION p20161015 VALUES LESS THAN (TO_DAYS(\'2016-10-15\')),\nPARTITION p20161031 VALUES LESS THAN (TO_DAYS(\'2016-10-31\')),\nPARTITION p20161115 VALUES LESS THAN (TO_DAYS(\'2016-11-15\')),\nPARTITION p20161130 VALUES LESS THAN (TO_DAYS(\'2016-11-30\')),\nPARTITION p20161215 VALUES LESS THAN (TO_DAYS(\'2016-12-15\')),\nPARTITION p20161231 VALUES LESS THAN (TO_DAYS(\'2016-12-31\'))\n);\n```\n创建分区耗时：\n![](http://static.huding.name/image/9379b786cac84dae844608c3578f65fb.png)\n在122万数据集上新建分区耗时接近36分钟（ps:本地磁盘为机械硬盘，性能较差，曾一度认为分区失败，不过最后还是创建分区成功）\n\n查看分区结果：\n\n查看方式：执行SQL语句：\n```\n  select\n  partition_name part,  \n  partition_expression expr,  \n  partition_description descr,  \n  table_rows  \n  from information_schema.partitions  where \n  table_schema = schema()  \n  and table_name=\'comment\';\n```\n程序查询验证：\n\n 执行SQL语句：\n```\nselect * from comment where content like \'%南京%\' and cdate > \'2015-11-01 00:00:00\'\n```\n查询结果：\n![](http://static.huding.name/image/c4cb24223a85485a8b6303337226d738.png)\n折线图如下\n![](http://static.huding.name/image/727e38aeb4a84ce0bf2da123c51234c6.png)\n\n### 结论\n\n1.分区查询时间平均比未分区查询快上3~4倍。\n\n2.对已有大量数据的数据表添加分区比较耗时。',2,49,239,'2017-02-20 21:30:57','/B20170220213057.html','5F6FD64F2E95F103B7928C9A68205770','330f029b812441db9bffa936f702071f','2017-02-20 21:30:57','/wwwroot/html/qingcai-front/B20170220213057.html','http://static.huding.name/image/727e38aeb4a84ce0bf2da123c51234c6.png',1,0,'发表','<p>最近在做新闻评论数据的网络爬虫，需要将爬去到的评论数据存储在MySQL数据库中，提供评论的查询和展示功能。后来随着数据量的上升，MySQL查询性能急剧下降，有时一个查询要等几分种才有结果，无奈之下只好尝试下数据库分区。</p>\n<p>开始评论表的结构如下:</p>\n<pre><code>CREATE TABLE `comment` (\n  `appID` int(11) NOT NULL,\n  `commentID` varchar(50) NOT NULL,\n  `uname` varchar(100) DEFAULT NULL,\n  `content` text,\n  `cdate` datetime DEFAULT NULL,\n  `ucity` varchar(50) DEFAULT NULL,\n  `upnum` int(11) DEFAULT NULL,\n  `downnum` int(11) DEFAULT NULL,\n  `newsID` varchar(50) DEFAULT NULL,\n  `isDeleted` tinyint(1) DEFAULT \'0\',\n  PRIMARY KEY (`commentID`,`appID`),\n  KEY `abc` (`cdate`) USING BTREE,\n  KEY `bcd` (`commentID`) USING BTREE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n</code></pre><p>  开始以为这样搞，就万事大吉，后来随着数据的增多，达到5千万级别，发现查询越来越慢，因为评论的查询大部分查询的是评论的内容content,使用like ‘%expression%’做的，当然也可以使用lucene或者solr来创建倒排索引进行查询，本文目标不在此。经过调研发现，评论表的数据具有很高的时效性，也可以对评论表按时间进行分区，来加快查询速度。</p>\n<p>  创建分区的步骤如下：</p>\n<p>1.增加时间cdate为主键</p>\n<p>SQL语句如下：</p>\n<pre><code>ALTER TABLE `comment`\nMODIFY COLUMN `cdate`  datetime NOT NULL AFTER `content`,\nDROP PRIMARY KEY,\nADD PRIMARY KEY (`commentID`, `appID`, `cdate`);\n</code></pre><p>2.执行分区SQL语句，这里直接创建两年内的分区。自动维护比较麻烦，需要创建存储过程和事件调度器（可以简单理解为时间触发器，按时间周期触发某种操作，这里特指，执行存储过程创建新的分区操作），其中存储过程比较难写，时间计算逻辑复杂。</p>\n<p>分区SQL语句：</p>\n<pre><code>alter table comment_1 PARTITION BY RANGE(TO_DAYS (cdate))\n(\nPARTITION p20150115 VALUES LESS THAN (TO_DAYS(\'2015-01-15\')),\nPARTITION p20150131 VALUES LESS THAN (TO_DAYS(\'2015-01-31\')),\nPARTITION p20150215 VALUES LESS THAN (TO_DAYS(\'2015-02-15\')),\nPARTITION p20150228 VALUES LESS THAN (TO_DAYS(\'2015-02-28\')),\nPARTITION p20150315 VALUES LESS THAN (TO_DAYS(\'2015-03-15\')),\nPARTITION p20150331 VALUES LESS THAN (TO_DAYS(\'2015-03-31\')),\nPARTITION p20150415 VALUES LESS THAN (TO_DAYS(\'2015-04-15\')),\nPARTITION p20150430 VALUES LESS THAN (TO_DAYS(\'2015-04-30\')),\nPARTITION p20150515 VALUES LESS THAN (TO_DAYS(\'2015-05-15\')),\nPARTITION p20150531 VALUES LESS THAN (TO_DAYS(\'2015-05-31\')),\nPARTITION p20150615 VALUES LESS THAN (TO_DAYS(\'2015-06-15\')),\nPARTITION p20150630 VALUES LESS THAN (TO_DAYS(\'2015-06-30\')),\nPARTITION p20150715 VALUES LESS THAN (TO_DAYS(\'2015-07-15\')),\nPARTITION p20150731 VALUES LESS THAN (TO_DAYS(\'2015-07-31\')),\nPARTITION p20150815 VALUES LESS THAN (TO_DAYS(\'2015-08-15\')),\nPARTITION p20150831 VALUES LESS THAN (TO_DAYS(\'2015-08-31\')),\nPARTITION p20150915 VALUES LESS THAN (TO_DAYS(\'2015-09-15\')),\nPARTITION p20150930 VALUES LESS THAN (TO_DAYS(\'2015-09-30\')),\nPARTITION p20151015 VALUES LESS THAN (TO_DAYS(\'2015-10-15\')),\nPARTITION p20151031 VALUES LESS THAN (TO_DAYS(\'2015-10-31\')),\nPARTITION p20151115 VALUES LESS THAN (TO_DAYS(\'2015-11-15\')),\nPARTITION p20151130 VALUES LESS THAN (TO_DAYS(\'2015-11-30\')),\nPARTITION p20151215 VALUES LESS THAN (TO_DAYS(\'2015-12-15\')),\nPARTITION p20151231 VALUES LESS THAN (TO_DAYS(\'2015-12-31\')),\nPARTITION p20160115 VALUES LESS THAN (TO_DAYS(\'2016-01-15\')),\nPARTITION p20160131 VALUES LESS THAN (TO_DAYS(\'2016-01-31\')),\nPARTITION p20160215 VALUES LESS THAN (TO_DAYS(\'2016-02-15\')),\nPARTITION p20160228 VALUES LESS THAN (TO_DAYS(\'2016-02-28\')),\nPARTITION p20160315 VALUES LESS THAN (TO_DAYS(\'2016-03-15\')),\nPARTITION p20160331 VALUES LESS THAN (TO_DAYS(\'2016-03-31\')),\nPARTITION p20160415 VALUES LESS THAN (TO_DAYS(\'2016-04-15\')),\nPARTITION p20160430 VALUES LESS THAN (TO_DAYS(\'2016-04-30\')),\nPARTITION p20160515 VALUES LESS THAN (TO_DAYS(\'2016-05-15\')),\nPARTITION p20160531 VALUES LESS THAN (TO_DAYS(\'2016-05-31\')),\nPARTITION p20160615 VALUES LESS THAN (TO_DAYS(\'2016-06-15\')),\nPARTITION p20160630 VALUES LESS THAN (TO_DAYS(\'2016-06-30\')),\nPARTITION p20160715 VALUES LESS THAN (TO_DAYS(\'2016-07-15\')),\nPARTITION p20160731 VALUES LESS THAN (TO_DAYS(\'2016-07-31\')),\nPARTITION p20160815 VALUES LESS THAN (TO_DAYS(\'2016-08-15\')),\nPARTITION p20160831 VALUES LESS THAN (TO_DAYS(\'2016-08-31\')),\nPARTITION p20160915 VALUES LESS THAN (TO_DAYS(\'2016-09-15\')),\nPARTITION p20160930 VALUES LESS THAN (TO_DAYS(\'2016-09-30\')),\nPARTITION p20161015 VALUES LESS THAN (TO_DAYS(\'2016-10-15\')),\nPARTITION p20161031 VALUES LESS THAN (TO_DAYS(\'2016-10-31\')),\nPARTITION p20161115 VALUES LESS THAN (TO_DAYS(\'2016-11-15\')),\nPARTITION p20161130 VALUES LESS THAN (TO_DAYS(\'2016-11-30\')),\nPARTITION p20161215 VALUES LESS THAN (TO_DAYS(\'2016-12-15\')),\nPARTITION p20161231 VALUES LESS THAN (TO_DAYS(\'2016-12-31\'))\n);\n</code></pre><p>创建分区耗时：<br><img src=\"http://static.huding.name/image/9379b786cac84dae844608c3578f65fb.png\" alt=\"\"><br>在122万数据集上新建分区耗时接近36分钟（ps:本地磁盘为机械硬盘，性能较差，曾一度认为分区失败，不过最后还是创建分区成功）\n<p>查看分区结果：</p>\n<p>查看方式：执行SQL语句：</p>\n<pre><code>  select\n  partition_name part,  \n  partition_expression expr,  \n  partition_description descr,  \n  table_rows  \n  from information_schema.partitions  where \n  table_schema = schema()  \n  and table_name=\'comment\';\n</code></pre><p>程序查询验证：</p>\n<p> 执行SQL语句：</p>\n<pre><code>select * from comment where content like \'%南京%\' and cdate &gt; \'2015-11-01 00:00:00\'\n</code></pre><p>查询结果：<br><img src=\"http://static.huding.name/image/c4cb24223a85485a8b6303337226d738.png\" alt=\"\"><br>折线图如下<br><img src=\"http://static.huding.name/image/727e38aeb4a84ce0bf2da123c51234c6.png\" alt=\"\">\n<h3 id=\"h3-u7ED3u8BBA\"><a name=\"结论\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>结论</h3><p>1.分区查询时间平均比未分区查询快上3~4倍。</p>\n<p>2.对已有大量数据的数据表添加分区比较耗时。</p>\n','MySQL,分区,SQL,查询',0),
	('3ba1267bf2c245bf88c3fc66b2e09013','数据结构之二叉树学习笔记','胡建洪','树(Tree)是n(n>=0)个结点的有限集合T，它或者为空，或者满足以下条件：（1）有且只有一个特定的称为根（root）的节点。（2）其余结点分为m(m>=0)个互不相交的子集T<sub>1</sub>，T<sub>2</sub>，……，T<sub>m</sub>，其中每个子集又是一个数，称其为根的子树。','\n树的定义：\n> 树(Tree)是n(n>=0)个结点的有限集合T，它或者为空，或者满足以下条件：\n\n> （1）有且只有一个特定的称为根（root）的节点。\n\n> （2）其余结点分为m(m>=0)个互不相交的子集T<sub>1</sub>，T<sub>2</sub>，……，T<sub>m</sub>，其中每个子集又是一个数，称其为根的子树。\n\n树的度：\n>一个结点的子树个数称为该结点的度（degree）。一颗树的度是指改树中结点的最大度数。度为k的树也称为k叉树，它的每个结点最多有k个子树。\n\n树的高度：\n> 结点的层数（level）是从根开始算起的，根为第1层，其他结点的层数为其双亲结点的层数加1。树中结点的最大层数，称为树的高度（height）或者深度（depth）。\n\n森林：\n>森林（forest）是m（m>=0)颗互不相交的树的集合。\n\n二叉树：\n\n>二叉树（Binary Tree）是n（n>=0)个结点的集合，它或者为空（n=0),或者由一个根结点及两颗互不相交、分别称作该根的左子树和右子树的二叉树组成。\n\n二叉树的性质：\n> 性质1：二叉树第i层上的结点树最多为2<sup>i-1</sup>(i>=1)。\n\n> 性质2：深度为k的二叉树至多有2<sup>k</sup>-1个结点（k>=1)。如果深度为k的二叉树有2<sup>k</sup>-1个结点，则称此二叉树为满二叉树（Full Binary Tree）。若一颗二叉树至多只有最下面两层上的结点的度可以小于2，并且最下层上的结点都集中在该层最左边的若干位置上，则称此二叉树为完全二叉树（Complete Binary Tree）。它相当于在满二叉树的最底层，从右向左连续去掉若干个结点后得到的二叉树。\n\n>性质3:二叉树中，度为0的结点数n<sub>0</sub>和度为2的结点数n<sub>2</sub>满足n<sub>0</sub>=n<sub>2</sub>+1。\n>\n>性质4:具有n个结点的完全二叉树的深度为floor(log<sub>2</sub>n)+1或者ceiling(log<sub>2</sub>(n+1))。\n\n>性质5:在完全二叉树的层序编号中，对任一编号为i的结点x（1<=i<=n)，有：\n\n>	(1）若i>1则x的双亲编号为floor(i/2);若i=1，则x是根，无双亲；\n\n>	(2）若2i>n，则x无左孩子，否则其左孩子的编号为2i。完全二叉树没有左孩子必定也无右孩子，即为叶子，故编号为i>floor(n/2)的结点必定是叶子；\n\n>	(3)如2i+1>n，则x无右孩子，否则其右孩子编号为2i+1；\n\n二叉树的存储：二叉树通常有两类存储结构，即顺序存储结构和链式存储结构。其中常用的为链式存储结构，通常有关二叉树的算法也是基于链式存储结构的。二叉树链式存储的基本思想是，每个结点除了存放本身的数据外，还要根据需要设置指向双亲和左右孩子的指针，即通过指针来反映逻辑关系。二叉链表使用Java语言定义的形式为：\n\n```\npublic class Node {\n	DataType data;\n	Node left;\n	Node right;\n}\n```\n带双亲指针的形式为：\n\n```\npublic class Node {\n	DataType data;\n	Node left;\n	Node right;\n	Node parent;\n}\n```\n\n\n# 二叉树的遍历\n二叉树的遍历是指沿某条搜索路径周游二叉树，对每个结点访问一次且仅访问一次。\n## 递归遍历\n递归遍历有三种：前序遍历，中序遍历，后序遍历。相应的代码为：\n\n```\nvoid preorder(Node node){ //前序\n	if(node == null){\n		return;\n	}\n	System.out.println(node.data);\n	preorder(node.left);\n	preorder(node.right);\n}\nvoid ineorder(Node node){//中序\n	if(node == null){\n		return;\n	}\n	inorder(node.left);\n	System.out.println(node.data);\n	inorder(node.right);\n}\nvoid postorder(Node node){//后序\n	if(node == null){\n		return;\n	}\n	postorder(node.left);\n	postorder(node.right);\n	System.out.println(node.data);\n}\n```\n中序遍历具有的下列特点：\n>1.中序序列的第一个结点是二叉树最左下的结点。\n\n>2.中序序列的最后一个结点是二叉树最右下的结点。\n\n## 层序遍历\n层序遍历就是逐层地对结点进行访问，也可以将所有结点都访问到。借助队列可实现层序遍历，遍历算法为：每访问一个结点，就将它的孩子指针入队，下一个要访问的结点是队头；整个过程不断进行，直到队列为空。相应的Java代码为：\n\n```\nvoid levelorder(Node node){\n	if(node == null){\n		return;\n	}\n	Queue queue = new LinkedList<Node>();\n	queue.push(node);\n	while(!queue.isEmpty()){\n		Node t = queue.pop();\n		System.out.println(node.data);\n		if(node.left != null){\n			queue.push(node.left);\n		}\n		if(node.right != null){\n			queue.push(node.right);\n		}\n	}\n```\n\n## 二叉树的生成\n这里二叉树的生成是指基于二叉树遍历序列生成相应的二叉树。\n### 1.层序遍历序列\n按完全二叉树的层次顺序，依次输入结点信息来建立二叉链表。这是因为完全二叉树的层序遍历序列中，结点间的序号关系可反映父子间的逻辑关系。对一般的二叉树，要补充若干个虚结点使其成为完全二叉树后，再按层次顺序输入，例如序例：A@B@@@C，其中@表示虚结点。\n\n算法的基本思想是：依次输入结点信息，若输入的结点不是虚结点，则建立一个新结点；若新结点不是虚结点，则建立一个新结点；若新结点是第一个结点，则令其为根结点；否则作为孩子结点链接到它的双亲结点。如此重复，直到序列结束。\n\n双亲与孩子的链接方法为：如当前输入的结点编号是偶数，则该结点作为左孩子与其双亲链接；否则作为右孩子与双亲链接；若双亲结点或孩子结点为虚结点，则无需链接。\n\n具体算法为：\n\n```\nNode levelCreate(String string){\n   int len = string.length();\n	Node[] queue = new Node[len+1];\n	Node root,s;\n	int front = 0,rear = 0;\n	for(int i = 0;i < len;i ++){\n	    char ch = string.charAt(i);\n	    if(ch != \'@\'){\n	       s = new Node();\n	       s.data = ch;\n	       s.left = s.right = null;\n	    } else {\n	    	s = null;\n	    }\n	    rear ++;\n	    queue[rear] = s;\n	    if(rear == 1){\n	    	root = s;\n	    	front = 1;\n	    } else {\n	    	if(s != null && queue[front] != null){\n	    		if(rear % 2 == 0){\n	    			queue[front].left = s;\n	    		} else {\n	    			queue[front].right = s;\n	    		}\n	    	}\n	    	if(rear % 2 == 1){\n	    		front ++;\n	    	}\n	    }\n	}\n	return root;\n}   \n	    	\n```\n### 2.先根、中跟或后跟遍历序列\n\n先根遍历序列，具体算法如下：\n\n```\nNode preCreate(){\n	Node t;\n	char ch = read();\n	if(ch == \'@\') return null;\n	t = new Node();\n	t.data = ch;\n	t.left = preCreate();\n	t.right = preCreate();\n	return t;\n}\n	\n```\n后序只需将序例反过来执行如下算法：\n\n```\nNode postCreate(){\n	Node t;\n	char ch = read();\n	if(ch == \'@\') return null;\n	t = new Node();\n	t.data = ch;\n	t.right = postCreate();\n	t.left = postCreate();\n	return t;\n}\n	\n```\n<em>中序遍历序列，因为不能确定谁是根，二叉树不唯一，无法生成二叉树</em>\n\n### 3.双遍历序列\n\n遍历序列的特点有：\n\n* 对于前序序列，序列的第一个结点就是整个二叉树的根；\n* 对于后序序列，序列的最后一个结点就是整个二叉树的根；\n* 对于中序序例，以根为界，序列的前一部分为根的左子树，后一部分为根的右子树。\n\n若给定了前序序列和中序序列，反复利用上面的（1）和（3），就可获得完整的逻辑信息，即由前序序列找到根，由中序序列得到左右子树；再对每个子树由前序序列找到子树的根，由中序序列得到子树的左右子树，……，以此类推，每次得到一个结点（子树的根），从而逐渐分离出树的全部信息。相应的递归算法为：\n\n```\nNode create(char[] pre,int ps,int pe,char[] in,int is,int ie){\n	if(ps > pe){\n		return null;\n	}\n	Node t = new Node();\n	t.data = pre[ps];\n	int i = is;\n	while(in[i] != pre[ps]) i ++;\n	t.left = create(pre,ps + 1,ps + (i - is),in,is,i - 1);\n	t.right = create(pre,ps+(i-is)+1,pe,in,i+1,ie);\n	return t;\n}\n```\n\n一般地，由中序与前序，中序与后序，中序与层序等都能唯一确定二叉树。而由前序和后序不能确定左右子树，一般就不能唯一确定二叉树。\n\n\n<em>参考资料：数据结构教程与题解</em>\n\n\n\n',4,35,155,'2017-02-18 21:26:44','/B20170218212644.html','1A44D96FEE5675E4EE00B3A99B412019','8c1d8fe2a03d4a0688072f95fd6d8f68','2017-02-18 21:26:44','/wwwroot/html/qingcai-front/B20170218212644.html','http://static.huding.name/image/44442acf7a2249c588651cc3338e3379.png',1,0,'发表','<p>树的定义：</p>\n<blockquote>\n<p>树(Tree)是n(n&gt;=0)个结点的有限集合T，它或者为空，或者满足以下条件：</p>\n<p>（1）有且只有一个特定的称为根（root）的节点。</p>\n<p>（2）其余结点分为m(m&gt;=0)个互不相交的子集T<sub>1</sub>，T<sub>2</sub>，……，T<sub>m</sub>，其中每个子集又是一个数，称其为根的子树。</p>\n</blockquote>\n<p>树的度：</p>\n<blockquote>\n<p>一个结点的子树个数称为该结点的度（degree）。一颗树的度是指改树中结点的最大度数。度为k的树也称为k叉树，它的每个结点最多有k个子树。</p>\n</blockquote>\n<p>树的高度：</p>\n<blockquote>\n<p>结点的层数（level）是从根开始算起的，根为第1层，其他结点的层数为其双亲结点的层数加1。树中结点的最大层数，称为树的高度（height）或者深度（depth）。</p>\n</blockquote>\n<p>森林：</p>\n<blockquote>\n<p>森林（forest）是m（m&gt;=0)颗互不相交的树的集合。</p>\n</blockquote>\n<p>二叉树：</p>\n<blockquote>\n<p>二叉树（Binary Tree）是n（n&gt;=0)个结点的集合，它或者为空（n=0),或者由一个根结点及两颗互不相交、分别称作该根的左子树和右子树的二叉树组成。</p>\n</blockquote>\n<p>二叉树的性质：</p>\n<blockquote>\n<p>性质1：二叉树第i层上的结点树最多为2<sup>i-1</sup>(i&gt;=1)。</p>\n<p>性质2：深度为k的二叉树至多有2<sup>k</sup>-1个结点（k&gt;=1)。如果深度为k的二叉树有2<sup>k</sup>-1个结点，则称此二叉树为满二叉树（Full Binary Tree）。若一颗二叉树至多只有最下面两层上的结点的度可以小于2，并且最下层上的结点都集中在该层最左边的若干位置上，则称此二叉树为完全二叉树（Complete Binary Tree）。它相当于在满二叉树的最底层，从右向左连续去掉若干个结点后得到的二叉树。</p>\n<p>性质3:二叉树中，度为0的结点数n<sub>0</sub>和度为2的结点数n<sub>2</sub>满足n<sub>0</sub>=n<sub>2</sub>+1。</p>\n<p>性质4:具有n个结点的完全二叉树的深度为floor(log<sub>2</sub>n)+1或者ceiling(log<sub>2</sub>(n+1))。</p>\n<p>性质5:在完全二叉树的层序编号中，对任一编号为i的结点x（1&lt;=i&lt;=n)，有：</p>\n<p>   (1）若i&gt;1则x的双亲编号为floor(i/2);若i=1，则x是根，无双亲；</p>\n<p>   (2）若2i&gt;n，则x无左孩子，否则其左孩子的编号为2i。完全二叉树没有左孩子必定也无右孩子，即为叶子，故编号为i&gt;floor(n/2)的结点必定是叶子；</p>\n<p>   (3)如2i+1&gt;n，则x无右孩子，否则其右孩子编号为2i+1；</p>\n</blockquote>\n<p>二叉树的存储：二叉树通常有两类存储结构，即顺序存储结构和链式存储结构。其中常用的为链式存储结构，通常有关二叉树的算法也是基于链式存储结构的。二叉树链式存储的基本思想是，每个结点除了存放本身的数据外，还要根据需要设置指向双亲和左右孩子的指针，即通过指针来反映逻辑关系。二叉链表使用Java语言定义的形式为：</p>\n<pre><code>public class Node {\n    DataType data;\n    Node left;\n    Node right;\n}\n</code></pre><p>带双亲指针的形式为：</p>\n<pre><code>public class Node {\n    DataType data;\n    Node left;\n    Node right;\n    Node parent;\n}\n</code></pre><h1 id=\"h1-u4E8Cu53C9u6811u7684u904Du5386\"><a name=\"二叉树的遍历\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>二叉树的遍历</h1><p>二叉树的遍历是指沿某条搜索路径周游二叉树，对每个结点访问一次且仅访问一次。</p>\n<h2 id=\"h2-u9012u5F52u904Du5386\"><a name=\"递归遍历\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>递归遍历</h2><p>递归遍历有三种：前序遍历，中序遍历，后序遍历。相应的代码为：</p>\n<pre><code>void preorder(Node node){ //前序\n    if(node == null){\n        return;\n    }\n    System.out.println(node.data);\n    preorder(node.left);\n    preorder(node.right);\n}\nvoid ineorder(Node node){//中序\n    if(node == null){\n        return;\n    }\n    inorder(node.left);\n    System.out.println(node.data);\n    inorder(node.right);\n}\nvoid postorder(Node node){//后序\n    if(node == null){\n        return;\n    }\n    postorder(node.left);\n    postorder(node.right);\n    System.out.println(node.data);\n}\n</code></pre><p>中序遍历具有的下列特点：</p>\n<blockquote>\n<p>1.中序序列的第一个结点是二叉树最左下的结点。</p>\n<p>2.中序序列的最后一个结点是二叉树最右下的结点。</p>\n</blockquote>\n<h2 id=\"h2-u5C42u5E8Fu904Du5386\"><a name=\"层序遍历\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>层序遍历</h2><p>层序遍历就是逐层地对结点进行访问，也可以将所有结点都访问到。借助队列可实现层序遍历，遍历算法为：每访问一个结点，就将它的孩子指针入队，下一个要访问的结点是队头；整个过程不断进行，直到队列为空。相应的Java代码为：</p>\n<pre><code>void levelorder(Node node){\n    if(node == null){\n        return;\n    }\n    Queue queue = new LinkedList&lt;Node&gt;();\n    queue.push(node);\n    while(!queue.isEmpty()){\n        Node t = queue.pop();\n        System.out.println(node.data);\n        if(node.left != null){\n            queue.push(node.left);\n        }\n        if(node.right != null){\n            queue.push(node.right);\n        }\n    }\n</code></pre><h2 id=\"h2-u4E8Cu53C9u6811u7684u751Fu6210\"><a name=\"二叉树的生成\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>二叉树的生成</h2><p>这里二叉树的生成是指基于二叉树遍历序列生成相应的二叉树。</p>\n<h3 id=\"h3-1-\"><a name=\"1.层序遍历序列\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.层序遍历序列</h3><p>按完全二叉树的层次顺序，依次输入结点信息来建立二叉链表。这是因为完全二叉树的层序遍历序列中，结点间的序号关系可反映父子间的逻辑关系。对一般的二叉树，要补充若干个虚结点使其成为完全二叉树后，再按层次顺序输入，例如序例：A<a href=\"https://github.com/B\" title=\"@B\" class=\"at-link\">@B</a>@@<a href=\"https://github.com/C\" title=\"@C\" class=\"at-link\">@C</a>，其中@表示虚结点。</p>\n<p>算法的基本思想是：依次输入结点信息，若输入的结点不是虚结点，则建立一个新结点；若新结点不是虚结点，则建立一个新结点；若新结点是第一个结点，则令其为根结点；否则作为孩子结点链接到它的双亲结点。如此重复，直到序列结束。</p>\n<p>双亲与孩子的链接方法为：如当前输入的结点编号是偶数，则该结点作为左孩子与其双亲链接；否则作为右孩子与双亲链接；若双亲结点或孩子结点为虚结点，则无需链接。</p>\n<p>具体算法为：</p>\n<pre><code>Node levelCreate(String string){\n   int len = string.length();\n    Node[] queue = new Node[len+1];\n    Node root,s;\n    int front = 0,rear = 0;\n    for(int i = 0;i &lt; len;i ++){\n        char ch = string.charAt(i);\n        if(ch != \'@\'){\n           s = new Node();\n           s.data = ch;\n           s.left = s.right = null;\n        } else {\n            s = null;\n        }\n        rear ++;\n        queue[rear] = s;\n        if(rear == 1){\n            root = s;\n            front = 1;\n        } else {\n            if(s != null &amp;&amp; queue[front] != null){\n                if(rear % 2 == 0){\n                    queue[front].left = s;\n                } else {\n                    queue[front].right = s;\n                }\n            }\n            if(rear % 2 == 1){\n                front ++;\n            }\n        }\n    }\n    return root;\n}\n</code></pre><h3 id=\"h3-2-\"><a name=\"2.先根、中跟或后跟遍历序列\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2.先根、中跟或后跟遍历序列</h3><p>先根遍历序列，具体算法如下：</p>\n<pre><code>Node preCreate(){\n    Node t;\n    char ch = read();\n    if(ch == \'@\') return null;\n    t = new Node();\n    t.data = ch;\n    t.left = preCreate();\n    t.right = preCreate();\n    return t;\n}\n</code></pre><p>后序只需将序例反过来执行如下算法：</p>\n<pre><code>Node postCreate(){\n    Node t;\n    char ch = read();\n    if(ch == \'@\') return null;\n    t = new Node();\n    t.data = ch;\n    t.right = postCreate();\n    t.left = postCreate();\n    return t;\n}\n</code></pre><p><em>中序遍历序列，因为不能确定谁是根，二叉树不唯一，无法生成二叉树</em></p>\n<h3 id=\"h3-3-\"><a name=\"3.双遍历序列\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>3.双遍历序列</h3><p>遍历序列的特点有：</p>\n<ul>\n<li>对于前序序列，序列的第一个结点就是整个二叉树的根；</li><li>对于后序序列，序列的最后一个结点就是整个二叉树的根；</li><li>对于中序序例，以根为界，序列的前一部分为根的左子树，后一部分为根的右子树。</li></ul>\n<p>若给定了前序序列和中序序列，反复利用上面的（1）和（3），就可获得完整的逻辑信息，即由前序序列找到根，由中序序列得到左右子树；再对每个子树由前序序列找到子树的根，由中序序列得到子树的左右子树，……，以此类推，每次得到一个结点（子树的根），从而逐渐分离出树的全部信息。相应的递归算法为：</p>\n<pre><code>Node create(char[] pre,int ps,int pe,char[] in,int is,int ie){\n    if(ps &gt; pe){\n        return null;\n    }\n    Node t = new Node();\n    t.data = pre[ps];\n    int i = is;\n    while(in[i] != pre[ps]) i ++;\n    t.left = create(pre,ps + 1,ps + (i - is),in,is,i - 1);\n    t.right = create(pre,ps+(i-is)+1,pe,in,i+1,ie);\n    return t;\n}\n</code></pre><p>一般地，由中序与前序，中序与后序，中序与层序等都能唯一确定二叉树。而由前序和后序不能确定左右子树，一般就不能唯一确定二叉树。</p>\n<p><em>参考资料：数据结构教程与题解</em></p>\n','二叉树,树高,前序,中序,后序',0),
	('3ddd409dfc9344449dac3717ecc75f72','Java线程学习笔记','胡建洪','在操作系统中，每个独立运行的程序就是一个进程，当一个程序进入内存运行时，即变成一个进程。线程是进程的组成部分，一个线程必须在一个进程之内，而一个进程可以拥有多个线程，一个进程中至少有一个线程。线程是最小的处理单位，线程可以拥有自己的堆栈，计数器和局部变量，但不能拥有系统资源，多个线程共享其所在进程的系统资源。','## 线程概述\n\n> 在操作系统中，每个独立运行的程序就是一个进程，当一个程序进入内存运行时，即变成一个进程。\n\n线程是进程的组成部分，一个线程必须在一个进程之内，而一个进程可以拥有多个线程，一个进程中至少有一个线程。线程是最小的处理单位，线程可以拥有自己的堆栈，计数器和局部变量，但不能拥有系统资源，多个线程共享其所在进程的系统资源。\n\nJava线程模型提供线程所必需的功能指出，基本的Java线程模型有Thread类、Runnable接口、Callable接口和Future接口等，这些线程模型都是面向对象的。\n\n## 创建线程\n\n基于Java线程模型，创建线程的方式有三种：\n\n1. 继承Thead类，重写Thread类中的run（）方法，直接创建线程；\n2. 实现runnable接口，再通过Thread 类和Runnbale的实现类间接创建一个线程；\n3. 使用Callbable和Future接口间接创建线程。\n\n前面两种较为常见，也比较简单，第三种的创建方式的样例如下：\n\n```\npackage me.huding.study.thread;\n\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.FutureTask;\n\npublic class CallableTask implements Callable<Integer> {\n\n	@Override\n	public Integer call() throws Exception {\n		int i = 0;\n		for(;i < 100;i ++){\n			System.out.println(Thread.currentThread().getName() + \" \" + i);\n		}\n		return i;\n	}\n	\n	\n	\n	public static void main(String[] args){\n		FutureTask<Integer> task = new FutureTask<>(new CallableTask());\n		\n		new Thread(task).start();\n		\n		try {\n			task.get();\n		} catch (InterruptedException | ExecutionException e) {\n			e.printStackTrace();\n		}\n		for(int i = 1000;i < 1020;i ++){\n			System.out.println(Thread.currentThread().getName() + \" \" + i);\n		}\n	}\n\n}\n```\n\n\n## 线程生命周期\n\n线程具有生命周期，当线程被创建并启动后，不会立即进入执行状态，也不会一直处于执行状态。在线程的生命周期中，线程要经过5种状态，新建（New）、就绪（Runnable）、运行（Running）、阻塞（Blocked）和死亡（Dead）。线程状态的转换如下图所示：\n\n![](http://static.huding.name/image/6fe86ca330fd4a40ad0df2eb0df24be9.jpg)\n\n\n## 线程优先级\n每个线程执行时都具有一定的优先级，线程的优先级代表该线程的重要程度，当有多个线程同时处于可执行状态并等待获得CPU处理器时，系统将根据各个线程的优先级来调度各线程，优先级高的线程获得CPU时间的机会多，而优先级低的线程则获得较少的执行机会。\n\n每个线程都有默认的优先级，其优先级都与创建该线程的父线程的优先级相同。在默认情况下，主线程具有普通优先级，由主线程创建的子线程也具有普通优先级。\n\nThread类提供三个静态常量来标识线程的优先级：\n\n1. MAX_PRIORITY——最高优先级，其值为10；\n2. NORM_PRIORITY——普通优先级，其值为5；\n3. MIN_PRIORITY——最低优先级，其值为1；\n\nThread类提供了setPriority（）方法来对线程的优先级进行设置，而getPriority（）方法可以获取线程的优先级。setPriority（）方法的参数时一个整数（范围是1～10），也可以使用Thread类提供的三个优先级静态变量。\n\n\n\n## 线程同步\nJava使用监控器（也称对象锁）实现同步，每个对象都有一个监视器，使用监控器可以保证一次只允许一个线程执行对象的同步语句。线程通常采用三种方式：同步代码块、同步方法、同步锁。\n\n同步代码块：\n\n使用同步代码块实现同步功能，只需将对实例的访问语句放入一个同步块中，其语法格式为：\n\n```\nsynchronized(object){\n	//需要同步的代码块\n}\n```\n其中：\n\n1. synchronizeds是同步关键字；\n2. object 是同步监视器，线程开始执行同步代码块之前，必须先获得对同步监视器的锁定。\n\n同步方法：\n\n```\n[访问修饰符] synchronized 返回类型 方法名([参数列表]) {\n	// 方法体\n}\n```\n\nsynchronized 关键字修饰的实例方法无需显式地指定同步监视器，同步方法的同步监视器是this，即该方法所属的对象。\n一旦一个线程进入一个实例的任何同步方法，其他线程将不能进入该实例的任何同步方法，但该实例的非同步方法仍然能够被调用。\n\nsynchronized 锁定是对象，而不是方法或代码块；synchronized也可以修饰类，当用synchronized修饰类时，表示这个类的所有方法都是synchronized的。\n\n同步锁Lock是一种更强大的线程同步机制，通过显式定义同步锁对象来实现线程同步。同步锁提供了，比同步块、同步方法更加广泛的锁定操作，实现更灵活。\n\nLock是控制多个线程对共享资源进行访问的工具，能够对共享资源进行独占访问。每次只能有一个线程对Lock对象加锁，线程访问共享资源之前需要先获得Lock对象。某些锁可能允许对共享资源并发访问，如ReadWriterLock（读写锁）。Lock和ReadWriterLock是Java 5 提供的关于锁的两个根接口，并为Lock提供了ReentrantLock实现类，为ReadWriterLock实现了ReentrantReadWriterLock实现类。\n\nReentrantLock类是常用的可重入同步锁，该类对象可以显式地加锁、释放锁。通常使用ReentrantLock的步骤如下：\n\n1.定义一个ReentrantLock锁对象，该对象是final常量。\n```\nprivate final ReentrantLock lock = new ReentrantLock();\n```\n2.在需要保证线程安全的代码之前增加“加锁”操作。\n\n```\nlock.lock();\n```\n3.在执行完线程安全的代码后“释放锁”。\n```\nlock.unlock();\n```\n\nFor example:\n\n```\nclass Demo {\n	private final ReentrantLock lock = new ReentrantLock();\n	\n	public void run {\n		lock.lock();\n		\n		try {\n		\n		\n		\n		} finally {\n		  lock.unlock();\n		}\n   }\n}\n```\n\n\n\n## 线程通信\n\n线程通信可以使用Object类中定义的wait(),notify()和notifyAll()方法，使线程之间互相进行事件通知。执行这些方法时，必须拥有相关对象的锁。\n\n* wait（）方法：让当前线程等待，并释放对象锁，直到其他线程调用该监视器的notify（）或者notifyAll（）来唤醒该线程。wait（）方法也可以带一个参数，用于指明等待的时间，使用此种方式不需要noitify()或者notifyAll()的唤醒。wait方法只能在同步方法中调用。\n* notify（）方法：唤醒在此同步监视器上等待的单个线程，解除该线程的阻塞状态。\n* notifyAll（）方法：唤醒在此同步方法上等待的所有线程，唤醒次序完全由系统来控制。\n\nnotify和notifyAll方法只能在同步方法或同步块中使用。wait方法区别sleep方法之处：wait方法调用时会释放对象锁，而sleep不会。\n\n\nFor example:\n\n```\npackage me.huding.study.thread;\n\npublic class Product {\n\n	int n;\n	// 为true时表示有值可取，false表示需要放入新值\n	boolean valueSet = false;\n	// 生产方法\n	public synchronized void put(int n){\n		if(valueSet){\n			try {\n				wait();\n			} catch (InterruptedException e) {\n				// TODO Auto-generated catch block\n				e.printStackTrace();\n			}\n		}\n		this.n = n;\n		valueSet = true;\n		System.out.println(Thread.currentThread().getName() +\"-生产：\" + n);\n		notify();\n	}\n\n	// 消费方法\n	public synchronized void get(){\n		if(!valueSet){\n			try {\n				wait();\n			} catch (InterruptedException e) {\n				// TODO Auto-generated catch block\n				e.printStackTrace();\n			}\n		}\n		valueSet = false;\n		System.out.println(Thread.currentThread().getName() +\"-消费：\" + n);\n		notify();\n	}\n\n}\n\n\npackage me.huding.study.thread;\n\npublic class Producer implements Runnable {\n	Product product;\n	public Producer(Product product) {\n		this.product = product;\n	}\n	@Override\n	public void run() {\n		for(int i = 0;i < 10;i ++){\n			product.put(i);\n		}\n	}\n\n}\n\npackage me.huding.study.thread;\n\npublic class Consumer implements Runnable {\n    Product product;\n	public Consumer(Product product) {\n		super();\n		this.product = product;\n	}\n	@Override\n	public void run() {\n		for(int i = 0;i < 10;i ++)\n			product.get();\n\n	}\n\n}\n\npackage me.huding.study.thread;\n\npublic class WaitNotifyDemo {\n\n	public static void main(String[] args) {\n		Product product = new Product();\n		\n		Producer  producer = new Producer(product);\n		\n		Consumer consumer = new Consumer(product);\n		\n		new Thread(producer,\"Producer\").start();\n		\n		new Thread(consumer,\"Consumer\").start();\n\n	}\n\n}\n```',1,100,149,'2017-02-20 21:02:27','/B20170220210227.html','0D329D07A0A485527C20CD7C224F1ED3','aab2e1cb0e4148c4b081df9940c2800a','2017-02-20 21:02:27','/wwwroot/html/qingcai-front/B20170220210227.html','http://static.huding.name/image/681d49345a704825b09c9591ae1d3f8c.jpg',1,0,'发表','<h2 id=\"h2-u7EBFu7A0Bu6982u8FF0\"><a name=\"线程概述\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>线程概述</h2><blockquote>\n<p>在操作系统中，每个独立运行的程序就是一个进程，当一个程序进入内存运行时，即变成一个进程。</p>\n</blockquote>\n<p>线程是进程的组成部分，一个线程必须在一个进程之内，而一个进程可以拥有多个线程，一个进程中至少有一个线程。线程是最小的处理单位，线程可以拥有自己的堆栈，计数器和局部变量，但不能拥有系统资源，多个线程共享其所在进程的系统资源。</p>\n<p>Java线程模型提供线程所必需的功能指出，基本的Java线程模型有Thread类、Runnable接口、Callable接口和Future接口等，这些线程模型都是面向对象的。</p>\n<h2 id=\"h2-u521Bu5EFAu7EBFu7A0B\"><a name=\"创建线程\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>创建线程</h2><p>基于Java线程模型，创建线程的方式有三种：</p>\n<ol>\n<li>继承Thead类，重写Thread类中的run（）方法，直接创建线程；</li><li>实现runnable接口，再通过Thread 类和Runnbale的实现类间接创建一个线程；</li><li>使用Callbable和Future接口间接创建线程。</li></ol>\n<p>前面两种较为常见，也比较简单，第三种的创建方式的样例如下：</p>\n<pre><code>package me.huding.study.thread;\n\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.FutureTask;\n\npublic class CallableTask implements Callable&lt;Integer&gt; {\n\n    @Override\n    public Integer call() throws Exception {\n        int i = 0;\n        for(;i &lt; 100;i ++){\n            System.out.println(Thread.currentThread().getName() + \" \" + i);\n        }\n        return i;\n    }\n\n\n\n    public static void main(String[] args){\n        FutureTask&lt;Integer&gt; task = new FutureTask&lt;&gt;(new CallableTask());\n\n        new Thread(task).start();\n\n        try {\n            task.get();\n        } catch (InterruptedException | ExecutionException e) {\n            e.printStackTrace();\n        }\n        for(int i = 1000;i &lt; 1020;i ++){\n            System.out.println(Thread.currentThread().getName() + \" \" + i);\n        }\n    }\n\n}\n</code></pre><h2 id=\"h2-u7EBFu7A0Bu751Fu547Du5468u671F\"><a name=\"线程生命周期\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>线程生命周期</h2><p>线程具有生命周期，当线程被创建并启动后，不会立即进入执行状态，也不会一直处于执行状态。在线程的生命周期中，线程要经过5种状态，新建（New）、就绪（Runnable）、运行（Running）、阻塞（Blocked）和死亡（Dead）。线程状态的转换如下图所示：</p>\n<p><img src=\"http://static.huding.name/image/6fe86ca330fd4a40ad0df2eb0df24be9.jpg\" alt=\"\">\n<h2 id=\"h2-u7EBFu7A0Bu4F18u5148u7EA7\"><a name=\"线程优先级\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>线程优先级</h2><p>每个线程执行时都具有一定的优先级，线程的优先级代表该线程的重要程度，当有多个线程同时处于可执行状态并等待获得CPU处理器时，系统将根据各个线程的优先级来调度各线程，优先级高的线程获得CPU时间的机会多，而优先级低的线程则获得较少的执行机会。</p>\n<p>每个线程都有默认的优先级，其优先级都与创建该线程的父线程的优先级相同。在默认情况下，主线程具有普通优先级，由主线程创建的子线程也具有普通优先级。</p>\n<p>Thread类提供三个静态常量来标识线程的优先级：</p>\n<ol>\n<li>MAX_PRIORITY——最高优先级，其值为10；</li><li>NORM_PRIORITY——普通优先级，其值为5；</li><li>MIN_PRIORITY——最低优先级，其值为1；</li></ol>\n<p>Thread类提供了setPriority（）方法来对线程的优先级进行设置，而getPriority（）方法可以获取线程的优先级。setPriority（）方法的参数时一个整数（范围是1～10），也可以使用Thread类提供的三个优先级静态变量。</p>\n<h2 id=\"h2-u7EBFu7A0Bu540Cu6B65\"><a name=\"线程同步\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>线程同步</h2><p>Java使用监控器（也称对象锁）实现同步，每个对象都有一个监视器，使用监控器可以保证一次只允许一个线程执行对象的同步语句。线程通常采用三种方式：同步代码块、同步方法、同步锁。</p>\n<p>同步代码块：</p>\n<p>使用同步代码块实现同步功能，只需将对实例的访问语句放入一个同步块中，其语法格式为：</p>\n<pre><code>synchronized(object){\n    //需要同步的代码块\n}\n</code></pre><p>其中：</p>\n<ol>\n<li>synchronizeds是同步关键字；</li><li>object 是同步监视器，线程开始执行同步代码块之前，必须先获得对同步监视器的锁定。</li></ol>\n<p>同步方法：</p>\n<pre><code>[访问修饰符] synchronized 返回类型 方法名([参数列表]) {\n    // 方法体\n}\n</code></pre><p>synchronized 关键字修饰的实例方法无需显式地指定同步监视器，同步方法的同步监视器是this，即该方法所属的对象。<br>一旦一个线程进入一个实例的任何同步方法，其他线程将不能进入该实例的任何同步方法，但该实例的非同步方法仍然能够被调用。\n<p>synchronized 锁定是对象，而不是方法或代码块；synchronized也可以修饰类，当用synchronized修饰类时，表示这个类的所有方法都是synchronized的。</p>\n<p>同步锁Lock是一种更强大的线程同步机制，通过显式定义同步锁对象来实现线程同步。同步锁提供了，比同步块、同步方法更加广泛的锁定操作，实现更灵活。</p>\n<p>Lock是控制多个线程对共享资源进行访问的工具，能够对共享资源进行独占访问。每次只能有一个线程对Lock对象加锁，线程访问共享资源之前需要先获得Lock对象。某些锁可能允许对共享资源并发访问，如ReadWriterLock（读写锁）。Lock和ReadWriterLock是Java 5 提供的关于锁的两个根接口，并为Lock提供了ReentrantLock实现类，为ReadWriterLock实现了ReentrantReadWriterLock实现类。</p>\n<p>ReentrantLock类是常用的可重入同步锁，该类对象可以显式地加锁、释放锁。通常使用ReentrantLock的步骤如下：</p>\n<p>1.定义一个ReentrantLock锁对象，该对象是final常量。</p>\n<pre><code>private final ReentrantLock lock = new ReentrantLock();\n</code></pre><p>2.在需要保证线程安全的代码之前增加“加锁”操作。</p>\n<pre><code>lock.lock();\n</code></pre><p>3.在执行完线程安全的代码后“释放锁”。</p>\n<pre><code>lock.unlock();\n</code></pre><p>For example:</p>\n<pre><code>class Demo {\n    private final ReentrantLock lock = new ReentrantLock();\n\n    public void run {\n        lock.lock();\n\n        try {\n\n\n\n        } finally {\n          lock.unlock();\n        }\n   }\n}\n</code></pre><h2 id=\"h2-u7EBFu7A0Bu901Au4FE1\"><a name=\"线程通信\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>线程通信</h2><p>线程通信可以使用Object类中定义的wait(),notify()和notifyAll()方法，使线程之间互相进行事件通知。执行这些方法时，必须拥有相关对象的锁。</p>\n<ul>\n<li>wait（）方法：让当前线程等待，并释放对象锁，直到其他线程调用该监视器的notify（）或者notifyAll（）来唤醒该线程。wait（）方法也可以带一个参数，用于指明等待的时间，使用此种方式不需要noitify()或者notifyAll()的唤醒。wait方法只能在同步方法中调用。</li><li>notify（）方法：唤醒在此同步监视器上等待的单个线程，解除该线程的阻塞状态。</li><li>notifyAll（）方法：唤醒在此同步方法上等待的所有线程，唤醒次序完全由系统来控制。</li></ul>\n<p>notify和notifyAll方法只能在同步方法或同步块中使用。wait方法区别sleep方法之处：wait方法调用时会释放对象锁，而sleep不会。</p>\n<p>For example:</p>\n<pre><code>package me.huding.study.thread;\n\npublic class Product {\n\n    int n;\n    // 为true时表示有值可取，false表示需要放入新值\n    boolean valueSet = false;\n    // 生产方法\n    public synchronized void put(int n){\n        if(valueSet){\n            try {\n                wait();\n            } catch (InterruptedException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n        }\n        this.n = n;\n        valueSet = true;\n        System.out.println(Thread.currentThread().getName() +\"-生产：\" + n);\n        notify();\n    }\n\n    // 消费方法\n    public synchronized void get(){\n        if(!valueSet){\n            try {\n                wait();\n            } catch (InterruptedException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n        }\n        valueSet = false;\n        System.out.println(Thread.currentThread().getName() +\"-消费：\" + n);\n        notify();\n    }\n\n}\n\n\npackage me.huding.study.thread;\n\npublic class Producer implements Runnable {\n    Product product;\n    public Producer(Product product) {\n        this.product = product;\n    }\n    @Override\n    public void run() {\n        for(int i = 0;i &lt; 10;i ++){\n            product.put(i);\n        }\n    }\n\n}\n\npackage me.huding.study.thread;\n\npublic class Consumer implements Runnable {\n    Product product;\n    public Consumer(Product product) {\n        super();\n        this.product = product;\n    }\n    @Override\n    public void run() {\n        for(int i = 0;i &lt; 10;i ++)\n            product.get();\n\n    }\n\n}\n\npackage me.huding.study.thread;\n\npublic class WaitNotifyDemo {\n\n    public static void main(String[] args) {\n        Product product = new Product();\n\n        Producer  producer = new Producer(product);\n\n        Consumer consumer = new Consumer(product);\n\n        new Thread(producer,\"Producer\").start();\n\n        new Thread(consumer,\"Consumer\").start();\n\n    }\n\n}\n</code></pre>','Java,线程,同步,进程',0),
	('495fa978801d418a9b6ed475c989eaa1','2014年12月CCF真题4 最优灌溉','胡建洪','雷雷承包了很多片麦田，为了灌溉这些麦田，雷雷在第一个麦田挖了一口很深的水井，所有的麦田都从这口井来引水灌溉。','问题描述\n\n　　雷雷承包了很多片麦田，为了灌溉这些麦田，雷雷在第一个麦田挖了一口很深的水井，所有的麦田都从这口井来引水灌溉。\n　　为了灌溉，雷雷需要建立一些水渠，以连接水井和麦田，雷雷也可以利用部分麦田作为“中转站”，利用水渠连接不同的麦田，这样只要一片麦田能被灌溉，则与其连接的麦田也能被灌溉。\n　　现在雷雷知道哪些麦田之间可以建设水渠和建设每个水渠所需要的费用（注意不是所有麦田之间都可以建立水渠）。请问灌溉所有麦田最少需要多少费用来修建水渠。\n\n输入格式\n\n　　输入的第一行包含两个正整数n, m，分别表示麦田的片数和雷雷可以建立的水渠的数量。麦田使用1, 2, 3, ……依次标号。\n　　接下来m行，每行包含三个整数ai, bi, ci，表示第ai片麦田与第bi片麦田之间可以建立一条水渠，所需要的费用为ci。\n\n输出格式\n\n　　输出一行，包含一个整数，表示灌溉所有麦田所需要的最小费用。\n\n样例输入\n\n4 4\n1 2 1\n2 3 4\n2 4 2\n3 4 3\n\n样例输出\n\n6\n\n样例说明\n\n　　建立以下三条水渠：麦田1与麦田2、麦田2与麦田4、麦田4与麦田3。\n\n评测用例规模与约定\n\n　　前20%的评测用例满足：n≤5。\n　　前40%的评测用例满足：n≤20。\n　　前60%的评测用例满足：n≤100。\n　　所有评测用例都满足：1≤n≤1000，1≤m≤100,000，1≤ci≤10,000。\n\n   生成最小树的问题，采用并查集的方式，在CCF练习系统中运行超时，得分70，代码如下：\n   \n\n    import java.util.Arrays;\n    import java.util.Scanner;\n    \n    public class Main {\n    	\n    	public static class Edge implements Comparable<Edge> {\n    \n    		public int a,b;\n    		public int cost;\n    		@Override\n    		public int compareTo(Edge o) {\n    			if(cost > o.cost){\n    				return 1;\n    			} \n    			else if (cost == o.cost){\n    				return 0;\n    			}\n    			return -1;\n    		}\n    	}\n    	\n    	public static final int N = 1001;\n    	\n    	static int [] tree = new int[N];\n    	\n    	static {\n    		for (int i = 0; i < N; i ++){\n    			tree[i] = -1;\n    		}\n    	}\n    	\n    	static int findRoot(int x){\n    		if(tree[x] == -1) return x;\n    		else {\n    			int temp = findRoot(tree[x]);\n    			tree[x] = temp;\n    			return temp;\n    		}\n    	}\n    \n    	public static void main(String[] args) {\n    		Scanner scanner = new Scanner(System.in);\n    		int n = scanner.nextInt();\n    		int m = scanner.nextInt();\n    		Edge [] edges = new Edge[m];\n    		for(int i =0 ;i <m; i ++){\n    			Edge edge = new Edge();\n    			edge.a = scanner.nextInt();\n    			edge.b = scanner.nextInt();\n    			edge.cost = scanner.nextInt();\n    			edges[i] = edge;\n    		}\n    		Arrays.sort(edges);\n    		int ans = 0;\n    		for(int i = 0;i < m;i ++){\n    			int a = findRoot(edges[i].a);\n    			int b = findRoot(edges[i].b);\n    			if(a != b){\n    				tree[a] = b;\n    				ans += edges[i].cost;\n    			}\n    		}\n    		System.out.println(ans);\n    	}\n    }\n    \n',2,1,75,'2017-02-07 23:40:10','/b20170207234010.html','1D8C2867E283EE43415BAEBD69A52992','0deaf97437264ce69eac4f70cf8cb8f1','2017-02-07 23:40:10','/wwwroot/html/qingcai-front/b20170207234010.html',NULL,0,0,'发表','<p>问题描述</p>\n<p>　　雷雷承包了很多片麦田，为了灌溉这些麦田，雷雷在第一个麦田挖了一口很深的水井，所有的麦田都从这口井来引水灌溉。<br>　　为了灌溉，雷雷需要建立一些水渠，以连接水井和麦田，雷雷也可以利用部分麦田作为“中转站”，利用水渠连接不同的麦田，这样只要一片麦田能被灌溉，则与其连接的麦田也能被灌溉。<br>　　现在雷雷知道哪些麦田之间可以建设水渠和建设每个水渠所需要的费用（注意不是所有麦田之间都可以建立水渠）。请问灌溉所有麦田最少需要多少费用来修建水渠。\n<p>输入格式</p>\n<p>　　输入的第一行包含两个正整数n, m，分别表示麦田的片数和雷雷可以建立的水渠的数量。麦田使用1, 2, 3, ……依次标号。<br>　　接下来m行，每行包含三个整数ai, bi, ci，表示第ai片麦田与第bi片麦田之间可以建立一条水渠，所需要的费用为ci。\n<p>输出格式</p>\n<p>　　输出一行，包含一个整数，表示灌溉所有麦田所需要的最小费用。</p>\n<p>样例输入</p>\n<p>4 4<br>1 2 1<br>2 3 4<br>2 4 2<br>3 4 3\n<p>样例输出</p>\n<p>6</p>\n<p>样例说明</p>\n<p>　　建立以下三条水渠：麦田1与麦田2、麦田2与麦田4、麦田4与麦田3。</p>\n<p>评测用例规模与约定</p>\n<p>　　前20%的评测用例满足：n≤5。<br>　　前40%的评测用例满足：n≤20。<br>　　前60%的评测用例满足：n≤100。<br>　　所有评测用例都满足：1≤n≤1000，1≤m≤100,000，1≤ci≤10,000。\n<p>   生成最小树的问题，采用并查集的方式，在CCF练习系统中运行超时，得分70，代码如下：</p>\n<pre><code>import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static class Edge implements Comparable&lt;Edge&gt; {\n\n        public int a,b;\n        public int cost;\n        @Override\n        public int compareTo(Edge o) {\n            if(cost &gt; o.cost){\n                return 1;\n            } \n            else if (cost == o.cost){\n                return 0;\n            }\n            return -1;\n        }\n    }\n\n    public static final int N = 1001;\n\n    static int [] tree = new int[N];\n\n    static {\n        for (int i = 0; i &lt; N; i ++){\n            tree[i] = -1;\n        }\n    }\n\n    static int findRoot(int x){\n        if(tree[x] == -1) return x;\n        else {\n            int temp = findRoot(tree[x]);\n            tree[x] = temp;\n            return temp;\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        int m = scanner.nextInt();\n        Edge [] edges = new Edge[m];\n        for(int i =0 ;i &lt;m; i ++){\n            Edge edge = new Edge();\n            edge.a = scanner.nextInt();\n            edge.b = scanner.nextInt();\n            edge.cost = scanner.nextInt();\n            edges[i] = edge;\n        }\n        Arrays.sort(edges);\n        int ans = 0;\n        for(int i = 0;i &lt; m;i ++){\n            int a = findRoot(edges[i].a);\n            int b = findRoot(edges[i].b);\n            if(a != b){\n                tree[a] = b;\n                ans += edges[i].cost;\n            }\n        }\n        System.out.println(ans);\n    }\n}\n</code></pre>','并查集,最小生成树',NULL),
	('54a2a725cc2c4860808a66d7082e52c4','仰望星空，脚踏实地','胡建洪','很久很久没有写类似杂谈方面的文章了，细细想来可能是自己专业的原因吧，学的是计算机专业，多年来主要和代码打交道，整个人也开始变得代码化，写到这里自己就开始嘲笑自己了，明明是自己偷懒不作为，硬要找个冠冕堂皇的理由来掩饰自己的懒惰。算了，先不在这个上面纠结了，还是对2017年自己的所见所闻以及所作所为进行反思以及总结吧。','\n很久很久没有写类似杂谈方面的文章了，细细想来可能是自己专业的原因吧，学的是计算机专业，多年来主要和代码打交道，整个人也开始变得代码化，写到这里自己就开始嘲笑自己了，明明是自己偷懒不作为，硬要找个冠冕堂皇的理由来掩饰自己的懒惰。算了，先不在这个上面纠结了，还是对2017年自己的所见所闻以及所作所为进行反思以及总结吧。\n\n2017年对于我来说注定是不那么顺利的一年，之前也有想过2017年如何的不顺利，如何的不得意，但是现实比我想象中要来得更加残酷。今年对我来说主要就两件大事，分别是找工作和顺利毕业。\n\n## 1.找工作\n\n找工作分为两个阶段，春招和秋招。其中春招是找实习工作，秋招是找正式工作。\n\n### 1.1 春招\n今年过完年，在家里待了一周左右，也就2017年2月10号左右就回到了学校，开始看书和刷题，不断的投递简历。我的目标是在春招时拿到一家公司的实习offer，然后去实习，希望通过实习转正拿到秋招的正式offer。然而理想是丰满的，现实是骨感的。我比较倾向去国内的互联网公司实习，投递了美团、阿里、网易、今日头条、CVTE、携程、腾讯、滴滴、京东等.除了简历挂的公司，其他公司基本做了笔试，可能春招笔试难度小点吧，做的笔试基本都过了，大部分都得到了面试机会，除了京东、腾讯、美团。美团和京东都是是内推挂了（美团是简历挂，京东是一面挂），后面笔试挂了没有面试机会。腾讯内推简历没过，转笔试了，然后实验室网络太差了，笔试时登陆不进去笔试系统遂放弃笔试。一些公司的笔试和面试情况具体如下：\n\n公司 | 内推|笔试|面试|offer\n-----|-----|-----|----|----\n阿里巴巴|菜鸟二面挂|通过|通过|实习offer\n美团|简历挂|未通过|未通过|无\n网易|无|通过|二面挂|无\n今日头条|无|通过|一面挂|无\n京东|一面挂|未通过|无|无\nCVTE|无|通过|二面挂|无\n携程|无|通过|二面挂|无\n腾讯|简历挂|未做|无|无\n滴滴|无|简历挂|无|无\n招银信用卡中心|无|通过|未去现场面试|无\n招银网络科技|无|通过|通过|预录用offer\n……|……|……|……|……\n\n\n好吧，还有其他一些公司的情况，都是很心酸的，或简历未过，或笔试未过，或面试未过。在春招快结束时拿到了阿里巴巴的实习offer,但是老师不让出去实习，无奈之下只好放弃实习机会；招银网络科技拿到了预录用offer，但是终究不是正式offer（邮件中说，大概在11月份左右的时候发放正式录用offer）。\n\n春招就这样灰溜溜的结束了，没有任何成就感，有的只是不断到来的打击。在春招的面试过程中，学到了很多东西，知道了很多套路，以及面试常考知识点，但是奈何自己实力不够，平时懒惰成性，没有沉淀和总结，理论知识储备不足，还有就是基本知识都只停留在表面，没有深度，导致面试时无限的尴尬。总结出来的经验教训是要静下心来看书，夯实基础。PS:和我一块找工作的女票，情况都差不多，都是投了很多家公司，最后没有收到什么offer，不过还好女票最后拿到招银信用卡中心的offer，然后顺利去实习了。\n\n\n### 1.2 秋招\n\n如果给春招和秋招划个时间线，我认为2017年6月底春招就结束了，7月初秋招就开始了。可能按照理想的状态来说，在7月份就应该好好看书投递简历和找工作，以及花点时间整理下资料，搞搞小论文方面的事情。然而，事实上我有开始松懈了。好吧，我说实话春招结束后我还是没有认真看过几本书，依然在混日子过，依然在等死！\n\n\n#### 1.2.1 阿里比赛小插曲\n\n大概在2017年4月20几号的时候，看到阿里天池平台上发布了第三届阿里中间件性能挑战赛的消息，第一时间就报名参加了。因为在2016年参加过第二届阿里中间件比赛，但是成绩惨不忍睹，当时心里不服气和不服输（明明是自己的能力不够而已），当时就下定决心来年再参加一次，所以这次看到消息就立马报名了。大概在4月底，我在周末断断续续花了两天时间完成初赛的简单版本，由于初赛证实开赛要等到5月20号左右，接下来的时间我就没有在捣鼓这个比赛了，转而将时间花在小论文撰写上了，终于黄天不负有心人，在5月8号左右完成第一篇小论文，虽然很水很水，但还是投递了，大概过了一周左右的时间就修回了，还是蛮快的，我按照修回意见再次修改后，没想到这次就直接录用了，虽然很水，但是还是蛮高兴的。\n\n本科同学（现在在浙江大学读硕士研究生）在参加完华为的软件精英挑战赛后，也看到了第三届中间件性能挑战赛的消息了，也想参加（PS：去年我们一块组队参加第二届中间件比赛的，结果大家都郁闷了好久）。这次大家开始都很淡定和轻松，预计没有多少时间投入到这个比赛中，所以这次我们又组队参赛了，同时又拉了一个浙大的学弟进来。刚开始确实没怎么投入，但是随着比赛的推进，投入的时间越来越多了，以至于后面废寝忘食的搞，没日没夜的搞。哎，一眼难尽啊，能力不够，只能希望勤能补拙了，好在后面有所进展，成绩还可以，顺利进入复赛了。因为没日没夜的搞，整个人在初赛结束后突然就崩溃了，然后就开始休息几天。后面又投入到紧张的复赛中了，由于大佬太多，我这个渣渣一直看着排名不断往下掉，却无能无力改变这一切，曾经一度我和队友都要放弃了，后来还是坚持接着捣鼓几下，抛弃一切繁杂的过程，抛弃第三库支持，回到最原生的代码实现上面来，意外发现成绩上去了，后来一直坚持捣鼓，成绩终于闯进前20了，然而还是高兴不起来，因为只有闯进TOP10才有机会去现场答辩。印象中比较深刻的就是2017年6月28日晚上和29号凌晨，那天我和队友再次熬夜捣鼓了下比赛，通过各种技巧和手段终于闯进了TOP10，拿到了现场答辩的入场券，虽然很水但是我还是蛮高兴的。\n\n2017年7月14日乘坐高铁到达杭州，开始杭州之旅。从15号到17号，一直都在阿里游玩，感受阿里的企业文化和团队的工作氛围。哎，说实话，在没有来到阿里之前，一直觉得阿里很神秘，来到阿里之后，发现阿里也不是那么神秘了，反而很平凡，但是这里的大佬实在太多了，以至于自己产生一个假象，阿里也不过如此嘛，哈哈，纯属于自己的臆想。实际上阿里就是一堆平凡的人在一起做不平凡的事情，所以才不平凡。好吧，废话少说，现场答辩的结果就是我们队拿到了优胜奖，虽然没有机会拿丰厚的奖金，但是还是非常高兴。18号和队友在浙江大学玉泉校区和西湖转了转，然后就往杭州东站赶，乘高铁回学校继续找工作，就这样结束杭州之旅了。\n\n<strong>每次参加阿里中间件比赛都能收获不少经验和教训，这次的收获主要在IO和并发编程等方面，接触到平时无法接触的锻炼机会，对业务层下面的中间件的理解和认识也更加深刻，同时也让我更加坚定学习底层基本知识的决心。哎，不说了，说太多了以后打脸越严重，按照我女票对我评价就是说的很美好，实际行动却不咋滴，哎，一把心酸泪啊！</strong>\n\n#### 1.2.2 秋招投递情况\n\n阿里中间件比赛结束后回到学校后就开始认真看书和总结了，陆陆续续看了以下几本书：1.Java特种兵上；2.Java并发编程的艺术;3.编程珠玑；4.计算机网络；5.数据结构；6.计算机操作系统；7.Reids设计与实现；……  这些书籍之前简单看过一遍，但是没什么感觉，参加完中间件比赛后在回过头看，发现这些东西的掌握程度基本可以确定自己的编程水平的高低。现在想起来还是懊悔不已。\n\n截止目前（2017年9月11号），秋招就投了几家公司，分别是阿里，华为，网易，携程，腾讯，百度，京东，中兴等。有些公司已经走完面试流程，有些公司还未开始就结束了。\n\n<strong>阿里</strong>：之前拿到了阿里的实习offer，由于各种原因无法去实习，感到非常遗憾，但是保留了直通车的资格，加上5-6月份参加中间件比赛的原因，我申请调部门到中间件，然后还成功了。后面顺利的面试了技术终面和HR面，现在还是面试中，没有消息，自己也没什么把握，只能继续等待。\n\n<strong>华为</strong>：华为我3月份投递是南研所这边的FX计划这批，貌似做了两次笔试和一次行为测评，后来在6月10号在南研所现场参加了面试，面试不太理想，面试总共两面，一面技术面，一面综合面试，面完感觉自己和华为也没啥关系了，不过后来知道通过了面试，并在8月份通过揭秘X Summer夏令营的时间和地点，在8月26日-29号参加了华为南研所的XSummer夏令营，4天3夜印象非常深刻，一起做陶艺，感受和学习工匠精神，同时在15层楼的天台上进行的奇葩说和座谈会也是非常有意思的，总算缓解和释放了下找工作以来的压力，放飞自我吧。非常感谢华为，这次的标题就是华为夏令营的主题“仰望星空，脚踏实地”。\n\n<strong>网易</strong>：8月内推笔试过了，现场面试二面挂，简历没做好，能力不够，加上面试官估计赶时间（全程一脸不屑），全程尬聊。前两天的笔试编程题一道都不会做，毫无疑问直接挂掉。从此和网易彻底没有无缘了，byebye。\n\n携程：8月内推时行为测评直接挂了，从此携程一生黑，没有在投递校招了。\n\n<strong>另外，腾讯还没有笔试，京东和中兴上周笔试完还没有结果（希望不大，编程题一道都不会），百度没有消息，估计直接简历挂吧！</strong>\n\n\n秋招目前就只投了这些公司，虽然都没有什么结果，但是最近需要花点心思在学业问题上面了，需要写论文了。我的内心还是希望阿里、华为、招银网络科技这些走完面试流程的公司最后能给我发一个offer，这样我就不用在找工作这件事情上纠结和挣扎了，加油加油！\n\nPS：进入9月份后，我发现我的理解能力越来越差，老是被女票调侃为智障，同时也不找工作，只知道等结果，跟等死差不多。的确，我也发现这样不好，需要重新振作起来，找点事情做，继续提升自己。希望自己接下来能够合理安排时间完成自己想做的事情吧！同时希望女票也能早点找到工作，这样就不用那么大压力了！\n\n\n## 2.顺利毕业\n\n对于我来说，搞学术实在太难了，能力明显不足，撰写大小论文的只是达到毕业要求，能够顺利毕业罢了，仅此而已！大概在5月份的时候，在导师的严格要求下，勉强发表了一篇水文，但是这篇水文和毕业论文的研究课题关系不是很大，需要再写一篇文章发表出去，才能完成毕业要求的第一关，但是目前也没有什么思路去研究，只能每天看点资料，苦苦探究和做实验。上周老师找我们要毕业的学生开了个会，要求我们几个好好计划下时间，毕业大论文在2017年12月25号就要提交了，让我们安排一下时间，提交一个时间表以及论文大纲，什么时候完成什么任务等等。老师都开始强调毕业的重要性了，看来我也要开始重视毕业的事情了，加油加油！\n\n\n## 3.总结和展望\n\n金秋9月应该是个收获的月份，现在心里只想收获一个offer。进入2017年来，做的事情都比较零零碎碎，总的来说也就求职和毕业两件大事，目前这两件事情都还没有什么眉目。虽然有点心酸，但还是收获不少经验教训，比如不论做任何事情都需要提前做好准备，还有就是要专注和坚持的做一件事情，即使这件事情很小，等等。希望2017年剩下的几个月能够顺顺利利、平平安安的度过，顺利的完成毕业论文和求职。\n\n',0,0,15,'2017-09-11 14:55:50','/B20170911145550.html','83EB3CD9C8EC9FDB4ECF779615F3DD4E','37a822efa50140e88b78ae35e8e13b4f','2017-09-11 14:55:50','/wwwroot/html/qingcai-front/B20170911145550.html','http://static.huding.name/image/b4c66a2a71db43dea399d3ed330f90e4.jpg',1,0,'发表','<p>很久很久没有写类似杂谈方面的文章了，细细想来可能是自己专业的原因吧，学的是计算机专业，多年来主要和代码打交道，整个人也开始变得代码化，写到这里自己就开始嘲笑自己了，明明是自己偷懒不作为，硬要找个冠冕堂皇的理由来掩饰自己的懒惰。算了，先不在这个上面纠结了，还是对2017年自己的所见所闻以及所作所为进行反思以及总结吧。</p>\n<p>2017年对于我来说注定是不那么顺利的一年，之前也有想过2017年如何的不顺利，如何的不得意，但是现实比我想象中要来得更加残酷。今年对我来说主要就两件大事，分别是找工作和顺利毕业。</p>\n<h2 id=\"h2-1-\"><a name=\"1.找工作\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.找工作</h2><p>找工作分为两个阶段，春招和秋招。其中春招是找实习工作，秋招是找正式工作。</p>\n<h3 id=\"h3-1-1-\"><a name=\"1.1 春招\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.1 春招</h3><p>今年过完年，在家里待了一周左右，也就2017年2月10号左右就回到了学校，开始看书和刷题，不断的投递简历。我的目标是在春招时拿到一家公司的实习offer，然后去实习，希望通过实习转正拿到秋招的正式offer。然而理想是丰满的，现实是骨感的。我比较倾向去国内的互联网公司实习，投递了美团、阿里、网易、今日头条、CVTE、携程、腾讯、滴滴、京东等.除了简历挂的公司，其他公司基本做了笔试，可能春招笔试难度小点吧，做的笔试基本都过了，大部分都得到了面试机会，除了京东、腾讯、美团。美团和京东都是是内推挂了（美团是简历挂，京东是一面挂），后面笔试挂了没有面试机会。腾讯内推简历没过，转笔试了，然后实验室网络太差了，笔试时登陆不进去笔试系统遂放弃笔试。一些公司的笔试和面试情况具体如下：</p>\n<table>\n<thead>\n<tr>\n<th>公司</th>\n<th>内推</th>\n<th>笔试</th>\n<th>面试</th>\n<th>offer</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>阿里巴巴</td>\n<td>菜鸟二面挂</td>\n<td>通过</td>\n<td>通过</td>\n<td>实习offer</td>\n</tr>\n<tr>\n<td>美团</td>\n<td>简历挂</td>\n<td>未通过</td>\n<td>未通过</td>\n<td>无</td>\n</tr>\n<tr>\n<td>网易</td>\n<td>无</td>\n<td>通过</td>\n<td>二面挂</td>\n<td>无</td>\n</tr>\n<tr>\n<td>今日头条</td>\n<td>无</td>\n<td>通过</td>\n<td>一面挂</td>\n<td>无</td>\n</tr>\n<tr>\n<td>京东</td>\n<td>一面挂</td>\n<td>未通过</td>\n<td>无</td>\n<td>无</td>\n</tr>\n<tr>\n<td>CVTE</td>\n<td>无</td>\n<td>通过</td>\n<td>二面挂</td>\n<td>无</td>\n</tr>\n<tr>\n<td>携程</td>\n<td>无</td>\n<td>通过</td>\n<td>二面挂</td>\n<td>无</td>\n</tr>\n<tr>\n<td>腾讯</td>\n<td>简历挂</td>\n<td>未做</td>\n<td>无</td>\n<td>无</td>\n</tr>\n<tr>\n<td>滴滴</td>\n<td>无</td>\n<td>简历挂</td>\n<td>无</td>\n<td>无</td>\n</tr>\n<tr>\n<td>招银信用卡中心</td>\n<td>无</td>\n<td>通过</td>\n<td>未去现场面试</td>\n<td>无</td>\n</tr>\n<tr>\n<td>招银网络科技</td>\n<td>无</td>\n<td>通过</td>\n<td>通过</td>\n<td>预录用offer</td>\n</tr>\n<tr>\n<td>……</td>\n<td>……</td>\n<td>……</td>\n<td>……</td>\n<td>……</td>\n</tr>\n</tbody>\n</table>\n<p>好吧，还有其他一些公司的情况，都是很心酸的，或简历未过，或笔试未过，或面试未过。在春招快结束时拿到了阿里巴巴的实习offer,但是老师不让出去实习，无奈之下只好放弃实习机会；招银网络科技拿到了预录用offer，但是终究不是正式offer（邮件中说，大概在11月份左右的时候发放正式录用offer）。</p>\n<p>春招就这样灰溜溜的结束了，没有任何成就感，有的只是不断到来的打击。在春招的面试过程中，学到了很多东西，知道了很多套路，以及面试常考知识点，但是奈何自己实力不够，平时懒惰成性，没有沉淀和总结，理论知识储备不足，还有就是基本知识都只停留在表面，没有深度，导致面试时无限的尴尬。总结出来的经验教训是要静下心来看书，夯实基础。PS:和我一块找工作的女票，情况都差不多，都是投了很多家公司，最后没有收到什么offer，不过还好女票最后拿到招银信用卡中心的offer，然后顺利去实习了。</p>\n<h3 id=\"h3-1-2-\"><a name=\"1.2 秋招\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.2 秋招</h3><p>如果给春招和秋招划个时间线，我认为2017年6月底春招就结束了，7月初秋招就开始了。可能按照理想的状态来说，在7月份就应该好好看书投递简历和找工作，以及花点时间整理下资料，搞搞小论文方面的事情。然而，事实上我有开始松懈了。好吧，我说实话春招结束后我还是没有认真看过几本书，依然在混日子过，依然在等死！</p>\n<h4 id=\"h4-1-2-1-\"><a name=\"1.2.1 阿里比赛小插曲\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.2.1 阿里比赛小插曲</h4><p>大概在2017年4月20几号的时候，看到阿里天池平台上发布了第三届阿里中间件性能挑战赛的消息，第一时间就报名参加了。因为在2016年参加过第二届阿里中间件比赛，但是成绩惨不忍睹，当时心里不服气和不服输（明明是自己的能力不够而已），当时就下定决心来年再参加一次，所以这次看到消息就立马报名了。大概在4月底，我在周末断断续续花了两天时间完成初赛的简单版本，由于初赛证实开赛要等到5月20号左右，接下来的时间我就没有在捣鼓这个比赛了，转而将时间花在小论文撰写上了，终于黄天不负有心人，在5月8号左右完成第一篇小论文，虽然很水很水，但还是投递了，大概过了一周左右的时间就修回了，还是蛮快的，我按照修回意见再次修改后，没想到这次就直接录用了，虽然很水，但是还是蛮高兴的。</p>\n<p>本科同学（现在在浙江大学读硕士研究生）在参加完华为的软件精英挑战赛后，也看到了第三届中间件性能挑战赛的消息了，也想参加（PS：去年我们一块组队参加第二届中间件比赛的，结果大家都郁闷了好久）。这次大家开始都很淡定和轻松，预计没有多少时间投入到这个比赛中，所以这次我们又组队参赛了，同时又拉了一个浙大的学弟进来。刚开始确实没怎么投入，但是随着比赛的推进，投入的时间越来越多了，以至于后面废寝忘食的搞，没日没夜的搞。哎，一眼难尽啊，能力不够，只能希望勤能补拙了，好在后面有所进展，成绩还可以，顺利进入复赛了。因为没日没夜的搞，整个人在初赛结束后突然就崩溃了，然后就开始休息几天。后面又投入到紧张的复赛中了，由于大佬太多，我这个渣渣一直看着排名不断往下掉，却无能无力改变这一切，曾经一度我和队友都要放弃了，后来还是坚持接着捣鼓几下，抛弃一切繁杂的过程，抛弃第三库支持，回到最原生的代码实现上面来，意外发现成绩上去了，后来一直坚持捣鼓，成绩终于闯进前20了，然而还是高兴不起来，因为只有闯进TOP10才有机会去现场答辩。印象中比较深刻的就是2017年6月28日晚上和29号凌晨，那天我和队友再次熬夜捣鼓了下比赛，通过各种技巧和手段终于闯进了TOP10，拿到了现场答辩的入场券，虽然很水但是我还是蛮高兴的。</p>\n<p>2017年7月14日乘坐高铁到达杭州，开始杭州之旅。从15号到17号，一直都在阿里游玩，感受阿里的企业文化和团队的工作氛围。哎，说实话，在没有来到阿里之前，一直觉得阿里很神秘，来到阿里之后，发现阿里也不是那么神秘了，反而很平凡，但是这里的大佬实在太多了，以至于自己产生一个假象，阿里也不过如此嘛，哈哈，纯属于自己的臆想。实际上阿里就是一堆平凡的人在一起做不平凡的事情，所以才不平凡。好吧，废话少说，现场答辩的结果就是我们队拿到了优胜奖，虽然没有机会拿丰厚的奖金，但是还是非常高兴。18号和队友在浙江大学玉泉校区和西湖转了转，然后就往杭州东站赶，乘高铁回学校继续找工作，就这样结束杭州之旅了。</p>\n<p><strong>每次参加阿里中间件比赛都能收获不少经验和教训，这次的收获主要在IO和并发编程等方面，接触到平时无法接触的锻炼机会，对业务层下面的中间件的理解和认识也更加深刻，同时也让我更加坚定学习底层基本知识的决心。哎，不说了，说太多了以后打脸越严重，按照我女票对我评价就是说的很美好，实际行动却不咋滴，哎，一把心酸泪啊！</strong></p>\n<h4 id=\"h4-1-2-2-\"><a name=\"1.2.2 秋招投递情况\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.2.2 秋招投递情况</h4><p>阿里中间件比赛结束后回到学校后就开始认真看书和总结了，陆陆续续看了以下几本书：1.Java特种兵上；2.Java并发编程的艺术;3.编程珠玑；4.计算机网络；5.数据结构；6.计算机操作系统；7.Reids设计与实现；……  这些书籍之前简单看过一遍，但是没什么感觉，参加完中间件比赛后在回过头看，发现这些东西的掌握程度基本可以确定自己的编程水平的高低。现在想起来还是懊悔不已。</p>\n<p>截止目前（2017年9月11号），秋招就投了几家公司，分别是阿里，华为，网易，携程，腾讯，百度，京东，中兴等。有些公司已经走完面试流程，有些公司还未开始就结束了。</p>\n<p><strong>阿里</strong>：之前拿到了阿里的实习offer，由于各种原因无法去实习，感到非常遗憾，但是保留了直通车的资格，加上5-6月份参加中间件比赛的原因，我申请调部门到中间件，然后还成功了。后面顺利的面试了技术终面和HR面，现在还是面试中，没有消息，自己也没什么把握，只能继续等待。</p>\n<p><strong>华为</strong>：华为我3月份投递是南研所这边的FX计划这批，貌似做了两次笔试和一次行为测评，后来在6月10号在南研所现场参加了面试，面试不太理想，面试总共两面，一面技术面，一面综合面试，面完感觉自己和华为也没啥关系了，不过后来知道通过了面试，并在8月份通过揭秘X Summer夏令营的时间和地点，在8月26日-29号参加了华为南研所的XSummer夏令营，4天3夜印象非常深刻，一起做陶艺，感受和学习工匠精神，同时在15层楼的天台上进行的奇葩说和座谈会也是非常有意思的，总算缓解和释放了下找工作以来的压力，放飞自我吧。非常感谢华为，这次的标题就是华为夏令营的主题“仰望星空，脚踏实地”。</p>\n<p><strong>网易</strong>：8月内推笔试过了，现场面试二面挂，简历没做好，能力不够，加上面试官估计赶时间（全程一脸不屑），全程尬聊。前两天的笔试编程题一道都不会做，毫无疑问直接挂掉。从此和网易彻底没有无缘了，byebye。</p>\n<p>携程：8月内推时行为测评直接挂了，从此携程一生黑，没有在投递校招了。</p>\n<p><strong>另外，腾讯还没有笔试，京东和中兴上周笔试完还没有结果（希望不大，编程题一道都不会），百度没有消息，估计直接简历挂吧！</strong></p>\n<p>秋招目前就只投了这些公司，虽然都没有什么结果，但是最近需要花点心思在学业问题上面了，需要写论文了。我的内心还是希望阿里、华为、招银网络科技这些走完面试流程的公司最后能给我发一个offer，这样我就不用在找工作这件事情上纠结和挣扎了，加油加油！</p>\n<p>PS：进入9月份后，我发现我的理解能力越来越差，老是被女票调侃为智障，同时也不找工作，只知道等结果，跟等死差不多。的确，我也发现这样不好，需要重新振作起来，找点事情做，继续提升自己。希望自己接下来能够合理安排时间完成自己想做的事情吧！同时希望女票也能早点找到工作，这样就不用那么大压力了！</p>\n<h2 id=\"h2-2-\"><a name=\"2.顺利毕业\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2.顺利毕业</h2><p>对于我来说，搞学术实在太难了，能力明显不足，撰写大小论文的只是达到毕业要求，能够顺利毕业罢了，仅此而已！大概在5月份的时候，在导师的严格要求下，勉强发表了一篇水文，但是这篇水文和毕业论文的研究课题关系不是很大，需要再写一篇文章发表出去，才能完成毕业要求的第一关，但是目前也没有什么思路去研究，只能每天看点资料，苦苦探究和做实验。上周老师找我们要毕业的学生开了个会，要求我们几个好好计划下时间，毕业大论文在2017年12月25号就要提交了，让我们安排一下时间，提交一个时间表以及论文大纲，什么时候完成什么任务等等。老师都开始强调毕业的重要性了，看来我也要开始重视毕业的事情了，加油加油！</p>\n<h2 id=\"h2-3-\"><a name=\"3.总结和展望\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>3.总结和展望</h2><p>金秋9月应该是个收获的月份，现在心里只想收获一个offer。进入2017年来，做的事情都比较零零碎碎，总的来说也就求职和毕业两件大事，目前这两件事情都还没有什么眉目。虽然有点心酸，但还是收获不少经验教训，比如不论做任何事情都需要提前做好准备，还有就是要专注和坚持的做一件事情，即使这件事情很小，等等。希望2017年剩下的几个月能够顺顺利利、平平安安的度过，顺利的完成毕业论文和求职。</p>\n','随笔,求职',0),
	('5a823d3753b945e98696a83fe779bf3b','从零开始搭建个人博客站概述','胡建洪','大概在2016年7月份，在看别人的个人博客系统时，脑子里产生了一个想法，作为程序员出身，为什么不自己开发一个博客系统，检验并锻炼下自己的编程水平，就这样一言不合就开始了开发个人博客系统不归之路，好在最后小有成果，没有留下遗憾。','大概在2016年7月份，在看别人的个人博客系统时，脑子里产生了一个想法，作为程序员出身，为什么不自己开发一个博客系统，检验并锻炼下自己的编程水平，就这样一言不合就开始了开发个人博客系统不归之路，好在最后小有成果，没有留下遗憾。闲话少说，下面开始谈谈我是如何从零开始搭建个人博客系统的。主要准备工作主要有：\n\n1. 注册域名\n2. 购买主机\n3. 域名解析\n4. 域名备案\n5. 系统开发\n6. 系统部署\n\n## 注册域名\n\n国内的域名服务提供商比较靠谱的阿里云的万网（[域名注册_虚拟主机_云服务器_企业邮箱-万网-阿里云旗下品牌](https://wanwang.aliyun.com \"域名注册_虚拟主机_云服务器_企业邮箱-万网-阿里云旗下品牌\")），腾讯云的新网（[域名注册 - 腾讯云](https://dnspod.qcloud.com \"域名注册 - 腾讯云\")）等。我是在阿里云的万网上注册了一个域名huding.name。\n\n## 购买主机\n\n因为之前做项目的时候使用过阿里云的主机，对阿里云的印象还是蛮好的，所以我开始打算使用阿里云的，但是后来发现太贵了，学生党实在负担不起。后来发现腾讯云推出了学生机([云+校园计划 - 腾讯云，值得信赖](https://www.qcloud.com/act/campus \"云+校园计划 - 腾讯云，值得信赖\"))，每个月只需1元。虽然阿里云也有学生机，但是申请过程较为麻烦，而且费用也比腾讯云贵，因此果断选择腾讯云。\n\n## 域名解析\n\n域名解析主要是在域名服务提供商那里将自己注册的域名解析到主机的IP地址。写到这里我就笑了，我居然已经使用国内互联网三大巨头中两家提供的服务了，即使用了阿里的域名服务和腾讯云的主机服务。还有更可笑的是，我后面为了方便统计访客数，又使用了百度的百度统计，我也是跪了这次，第一次搞一个简单的博客系统就使用了BAT三巨头的不同服务。\n\n## 域名备案\n\n域名备案主要是主机服务提供商那里提交材料进行域名备案，至于怎么备案，主机服务提供商都会提供详细的教程的。PS：只要是在中国大陆的主机都要备案才能正常访问。\n\n## 系统开发\n\n做好前面的准备的开发工作后，我就开始进行实际的代码开发了。我本身对Java比较熟悉点，因此使用Java作为后端开发语言，前端开发语言为：html，js，css等。由于我的前端水平不高，让我从头开始编写代码，不知道要写到猴年马月去了。因此我就找了几款框架，在框架的基础上进行开发，能够达到事半功倍的效果。这几款框架分别是：\n\nJava框架：JFinal([http://www.jfinal.com/](http://www.jfinal.com/))\n前端框架：amazeui([中国首个开源 HTML5 跨屏前端框架](http://amazeui.org \"中国首个开源 HTML5 跨屏前端框架\")）,layui（[layui - 经典模块化前端框架](http://www.layui.com \"layui - 经典模块化前端框架\")）。使用amazeui的特性实现屏幕适配，自适应屏幕。使用layui的特性实现前端脚本处理逻辑，实现与后台的交互。\n开发方式是前后端完全分离，因此我借助Nginx服务器实现连接前端和后端，实现前后端通信。\n\n最终的开发效果也是蛮好的，前端的博客内容展示：\n\n### 1.PC端效果\n![](http://static.huding.name/image/fc4651349ded4cd0852be288bbdbea6a.png)\n### 2.移动端效果\n![](http://static.huding.name/image/fa62f128b4184dafabcde954ad57efcc.png)\n### 3.后台管理系统\n![](http://static.huding.name/image/82f602d709ed45d18de11a605c2e6c7a.png)\n\n## 系统部署\n\n这部分暂略。大体上是在服务器端安装JDK，Nginx，Tomcat等相关部署软件，设置相应的配置后，将自己开发的系统部署到相应的目录下就好了。\n\n## 结束语\n\n最终经过自己不断地捣鼓，我的个人博客[青菜萝卜胡丁程序员技术分享博客](http://www.huding.name \"青菜萝卜胡丁程序员技术分享博客\")最终在2017年2月10日上线了。虽然我的代码写的不是很好，但本着开源精神，我将这个博客系统的代码开源在[GitHub](https://github.com/hujianhong \"GitHub\")上了[个人博客系统(青菜萝卜胡丁程序员技术分享博客)](https://github.com/hujianhong/blog \"个人博客系统(青菜萝卜胡丁程序员技术分享博客)\")。有需要的童鞋可以到这里去下载。',12,365,869,'2017-02-15 15:26:06','/B20170215152606.html','8B296771A9D0F80A9EB38894151A0CDA','18f3adde58d0497393f35e653b95aff8','2017-02-15 15:26:06','/wwwroot/html/qingcai-front/B20170215152606.html','http://static.huding.name/image/51dc3cab8b174c5c8453bbff5a67311c.png',1,0,'发表','<p>大概在2016年7月份，在看别人的个人博客系统时，脑子里产生了一个想法，作为程序员出身，为什么不自己开发一个博客系统，检验并锻炼下自己的编程水平，就这样一言不合就开始了开发个人博客系统不归之路，好在最后小有成果，没有留下遗憾。闲话少说，下面开始谈谈我是如何从零开始搭建个人博客系统的。主要准备工作主要有：</p>\n<ol>\n<li>注册域名</li><li>购买主机</li><li>域名解析</li><li>域名备案</li><li>系统开发</li><li>系统部署</li></ol>\n<h2 id=\"h2-u6CE8u518Cu57DFu540D\"><a name=\"注册域名\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>注册域名</h2><p>国内的域名服务提供商比较靠谱的阿里云的万网（<a href=\"https://wanwang.aliyun.com\" title=\"域名注册_虚拟主机_云服务器_企业邮箱-万网-阿里云旗下品牌\">域名注册<em>虚拟主机</em>云服务器_企业邮箱-万网-阿里云旗下品牌</a>），腾讯云的新网（<a href=\"https://dnspod.qcloud.com\" title=\"域名注册 - 腾讯云\">域名注册 - 腾讯云</a>）等。我是在阿里云的万网上注册了一个域名huding.name。</p>\n<h2 id=\"h2-u8D2Du4E70u4E3Bu673A\"><a name=\"购买主机\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>购买主机</h2><p>因为之前做项目的时候使用过阿里云的主机，对阿里云的印象还是蛮好的，所以我开始打算使用阿里云的，但是后来发现太贵了，学生党实在负担不起。后来发现腾讯云推出了学生机(<a href=\"https://www.qcloud.com/act/campus\" title=\"云+校园计划 - 腾讯云，值得信赖\">云+校园计划 - 腾讯云，值得信赖</a>)，每个月只需1元。虽然阿里云也有学生机，但是申请过程较为麻烦，而且费用也比腾讯云贵，因此果断选择腾讯云。</p>\n<h2 id=\"h2-u57DFu540Du89E3u6790\"><a name=\"域名解析\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>域名解析</h2><p>域名解析主要是在域名服务提供商那里将自己注册的域名解析到主机的IP地址。写到这里我就笑了，我居然已经使用国内互联网三大巨头中两家提供的服务了，即使用了阿里的域名服务和腾讯云的主机服务。还有更可笑的是，我后面为了方便统计访客数，又使用了百度的百度统计，我也是跪了这次，第一次搞一个简单的博客系统就使用了BAT三巨头的不同服务。</p>\n<h2 id=\"h2-u57DFu540Du5907u6848\"><a name=\"域名备案\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>域名备案</h2><p>域名备案主要是主机服务提供商那里提交材料进行域名备案，至于怎么备案，主机服务提供商都会提供详细的教程的。PS：只要是在中国大陆的主机都要备案才能正常访问。</p>\n<h2 id=\"h2-u7CFBu7EDFu5F00u53D1\"><a name=\"系统开发\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>系统开发</h2><p>做好前面的准备的开发工作后，我就开始进行实际的代码开发了。我本身对Java比较熟悉点，因此使用Java作为后端开发语言，前端开发语言为：html，js，css等。由于我的前端水平不高，让我从头开始编写代码，不知道要写到猴年马月去了。因此我就找了几款框架，在框架的基础上进行开发，能够达到事半功倍的效果。这几款框架分别是：</p>\n<p>Java框架：JFinal(<a href=\"http://www.jfinal.com/\">http://www.jfinal.com/</a>)<br>前端框架：amazeui(<a href=\"http://amazeui.org\" title=\"中国首个开源 HTML5 跨屏前端框架\">中国首个开源 HTML5 跨屏前端框架</a>）,layui（<a href=\"http://www.layui.com\" title=\"layui - 经典模块化前端框架\">layui - 经典模块化前端框架</a>）。使用amazeui的特性实现屏幕适配，自适应屏幕。使用layui的特性实现前端脚本处理逻辑，实现与后台的交互。<br>开发方式是前后端完全分离，因此我借助Nginx服务器实现连接前端和后端，实现前后端通信。\n<p>最终的开发效果也是蛮好的，前端的博客内容展示：</p>\n<h3 id=\"h3-1-pc-\"><a name=\"1.PC端效果\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.PC端效果</h3><p><img src=\"http://static.huding.name/image/fc4651349ded4cd0852be288bbdbea6a.png\" alt=\"\">\n<h3 id=\"h3-2-\"><a name=\"2.移动端效果\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2.移动端效果</h3><p><img src=\"http://static.huding.name/image/fa62f128b4184dafabcde954ad57efcc.png\" alt=\"\">\n<h3 id=\"h3-3-\"><a name=\"3.后台管理系统\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>3.后台管理系统</h3><p><img src=\"http://static.huding.name/image/82f602d709ed45d18de11a605c2e6c7a.png\" alt=\"\">\n<h2 id=\"h2-u7CFBu7EDFu90E8u7F72\"><a name=\"系统部署\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>系统部署</h2><p>这部分暂略。大体上是在服务器端安装JDK，Nginx，Tomcat等相关部署软件，设置相应的配置后，将自己开发的系统部署到相应的目录下就好了。</p>\n<h2 id=\"h2-u7ED3u675Fu8BED\"><a name=\"结束语\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>结束语</h2><p>最终经过自己不断地捣鼓，我的个人博客<a href=\"http://www.huding.name\" title=\"青菜萝卜胡丁程序员技术分享博客\">青菜萝卜胡丁程序员技术分享博客</a>最终在2017年2月10日上线了。虽然我的代码写的不是很好，但本着开源精神，我将这个博客系统的代码开源在<a href=\"https://github.com/hujianhong\" title=\"GitHub\">GitHub</a>上了<a href=\"https://github.com/hujianhong/blog\" title=\"个人博客系统(青菜萝卜胡丁程序员技术分享博客)\">个人博客系统(青菜萝卜胡丁程序员技术分享博客)</a>。有需要的童鞋可以到这里去下载。</p>\n','域名,GitHub,layui,博客',0),
	('5fb856efa680421ea2290276dd37045e','JavaScript学习总结','木槿心','JavaScript学习总结，undefined是全局对象（window）的一个特殊属性，其值是未定义的(当尝试读取不存在的对象属性时会返回 undefined)','# JavaScript学习总结\n\n## 1.undefined 和 null\n\nundefined是全局对象（window）的一个特殊属性，其值是未定义的(当尝试读取不存在的对象属性时会返回 undefined)\n\ntypeof undefined 返回’undefined’，undefined判断方法如下：\n\n```\nif(typeof(value)==\"undefined\"){ \n	alert(\"undefined\"); \n} \n```\n\nundefined参与数值计算返回NaN\n\nundefined 逻辑运算\n\n```\ndevice.enhancedName = device.name || device.model || device.serial || \'Unknown\'\n```\n\nundefined和null在if语句中，都会被自动转为false\n\n## 2.逻辑或(||)\n对于不是布尔值的情况：\n\n1. 如果第一个操作数是对象，则返第一个操作数\n2. 如果第一个操作数的求值结果为false，则返回第二个操作数\n3. 如果两个操作数都是对象，则返回第一个操作数\n4. 如果两个操作数是null，则返回null\n5. 如果两个操作数是undefined，则返回undefined\n\n\n参考链接：[http://www.cnblogs.com/linxiong945/p/4135554.html](http://www.cnblogs.com/linxiong945/p/4135554.html)\n\n## 3.Object.create(null)\n\n没有继承任何原型方法，它的原型链没有上一层\n\n##4.定义函数的方法\n函数声明\n\n```\nfunction sum(a,b){\n return a+b\n} \n```\n\n函数表达式\n\n```\nvar sum = function(a,b){\n return a+b\n}\n```\n\n```\n//类似于构造器，一般大写开头\nfunction Qingcai {\n\n}\n```\n\n##5.Promise\n\n在JS中让异步的代码同步化，可以使用require(‘bluebird’)\n\n参考链接：[https://stackoverflow.com/questions/27889687/promise-defer-browser-support](https://stackoverflow.com/questions/27889687/promise-defer-browser-support)\n\n```\nvar resolve = Promise.defer()\n.......\nresolve.resolve(()\n\n```',1,20,12,'2017-09-05 22:15:29','/B20170905221529.html','D88A837D638ACA893FE3072AE01107C9','8dfb5b72bc69437c8cbc87594c47ea20','2017-09-05 22:15:29','/wwwroot/html/qingcai-front/B20170905221529.html',NULL,0,0,'发表','<h1 id=\"h1-javascript-\"><a name=\"JavaScript学习总结\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>JavaScript学习总结</h1><h2 id=\"h2-1-undefined-null\"><a name=\"1.undefined 和 null\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.undefined 和 null</h2><p>undefined是全局对象（window）的一个特殊属性，其值是未定义的(当尝试读取不存在的对象属性时会返回 undefined)</p>\n<p>typeof undefined 返回’undefined’，undefined判断方法如下：</p>\n<pre><code>if(typeof(value)==\"undefined\"){ \n    alert(\"undefined\"); \n}\n</code></pre><p>undefined参与数值计算返回NaN</p>\n<p>undefined 逻辑运算</p>\n<pre><code>device.enhancedName = device.name || device.model || device.serial || \'Unknown\'\n</code></pre><p>undefined和null在if语句中，都会被自动转为false</p>\n<h2 id=\"h2-2-\"><a name=\"2.逻辑或(||)\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2.逻辑或(||)</h2><p>对于不是布尔值的情况：</p>\n<ol>\n<li>如果第一个操作数是对象，则返第一个操作数</li><li>如果第一个操作数的求值结果为false，则返回第二个操作数</li><li>如果两个操作数都是对象，则返回第一个操作数</li><li>如果两个操作数是null，则返回null</li><li>如果两个操作数是undefined，则返回undefined</li></ol>\n<p>参考链接：<a href=\"http://www.cnblogs.com/linxiong945/p/4135554.html\">http://www.cnblogs.com/linxiong945/p/4135554.html</a></p>\n<h2 id=\"h2-3-object-create-null-\"><a name=\"3.Object.create(null)\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>3.Object.create(null)</h2><p>没有继承任何原型方法，它的原型链没有上一层</p>\n<h2 id=\"h2-4-\"><a name=\"4.定义函数的方法\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>4.定义函数的方法</h2><p>函数声明</p>\n<pre><code>function sum(a,b){\n return a+b\n}\n</code></pre><p>函数表达式</p>\n<pre><code>var sum = function(a,b){\n return a+b\n}\n</code></pre><pre><code>//类似于构造器，一般大写开头\nfunction Qingcai {\n\n}\n</code></pre><h2 id=\"h2-5-promise\"><a name=\"5.Promise\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>5.Promise</h2><p>在JS中让异步的代码同步化，可以使用require(‘bluebird’)</p>\n<p>参考链接：<a href=\"https://stackoverflow.com/questions/27889687/promise-defer-browser-support\">https://stackoverflow.com/questions/27889687/promise-defer-browser-support</a></p>\n<pre><code>var resolve = Promise.defer()\n.......\nresolve.resolve(()\n</code></pre>','前端,JS,',0),
	('61c3f6282f3b480e88b0c33d36d22410','2014年9月CCF真题4 最优配餐','胡建洪','栋栋最近开了一家餐饮连锁店，提供外卖服务。随着连锁店越来越多，怎么合理的给客户送餐成为了一个急需解决的问题。栋栋的连锁店所在的区域可以看成是一个n×n的方格图（如下图所示），方格的格点上的位置上可能包含栋栋的分店（绿色标注）或者客户（蓝色标注），有一些格点是不能经过的（红色标注）。','问题描述\n\n　　栋栋最近开了一家餐饮连锁店，提供外卖服务。随着连锁店越来越多，怎么合理的给客户送餐成为了一个急需解决的问题。\n　　栋栋的连锁店所在的区域可以看成是一个n×n的方格图（如下图所示），方格的格点上的位置上可能包含栋栋的分店（绿色标注）或者客户（蓝色标注），有一些格点是不能经过的（红色标注）。\n　　方格图中的线表示可以行走的道路，相邻两个格点的距离为1。栋栋要送餐必须走可以行走的道路，而且不能经过红色标注的点。\n  ![](http://static.huding.name/image/b4fff3458d61426bbd6b114b287053a2.jpg)\n  送餐的主要成本体现在路上所花的时间，每一份餐每走一个单位的距离需要花费1块钱。每个客户的需求都可以由栋栋的任意分店配送，每个分店没有配送总量的限制。\n　　现在你得到了栋栋的客户的需求，请问在最优的送餐方式下，送这些餐需要花费多大的成本。\n\n输入格式\n\n　　输入的第一行包含四个整数n, m, k, d，分别表示方格图的大小、栋栋的分店数量、客户的数量，以及不能经过的点的数量。\n　　接下来m行，每行两个整数xi, yi，表示栋栋的一个分店在方格图中的横坐标和纵坐标。\n　　接下来k行，每行三个整数xi, yi, ci，分别表示每个客户在方格图中的横坐标、纵坐标和订餐的量。（注意，可能有多个客户在方格图中的同一个位置）\n　　接下来d行，每行两个整数，分别表示每个不能经过的点的横坐标和纵坐标。\n\n输出格式\n\n　　输出一个整数，表示最优送餐方式下所需要花费的成本。\n\n样例输入\n\n10 2 3 3\n1 1\n8 8\n1 5 1\n2 3 3\n6 7 2\n1 2\n2 2\n6 8\n\n样例输出\n\n29\n\n评测用例规模与约定\n\n　　前30%的评测用例满足：1<=n <=20。\n　　前60%的评测用例满足：1<=n<=100。\n　　所有评测用例都满足：1<=n<=1000，1<=m, k, d<=n^2。可能有多个客户在同一个格点上。每个客户的订餐量不超过1000，每个客户所需要的餐都能被送到。\n\n\n\n 解题方案： \n\n  广度优先搜索，从饭店出发寻找客户\n\n ps:程序运行超时，在CCF系统中得分80分，\n \n\n    import java.util.LinkedList;\n    import java.util.Queue;\n    import java.util.Scanner;\n    \n    public class Main {\n    	\n    	// 地图数组\n    	static int[][] map = new int[1001][1001];\n    	\n    	// 标记数组\n    	static boolean[][] mark = new boolean[1001][1001];\n    	\n    	public static class Node {\n    		public int x;\n    		public int y;\n    		public int t;\n    		\n    		public Node(int x, int y, int t) {\n    			this.x = x;\n    			this.y = y;\n    			this.t = t;\n    		}\n    	}\n    	\n    	public static Queue<Node> queue = new LinkedList<Node>();\n    	\n    	public static int[][] dir = { {0,1},\n    								  {1,0},\n    								  {-1,0},\n    								  {0,-1}\n    								 };\n    	\n    	static int n,m,k,d;\n    	\n    	\n    	public static long bfs(){\n    		long ans = 0;\n    		int cnt = 0;\n    		while(!queue.isEmpty()){\n    			Node node = queue.poll();\n    			// 依次扩展器相邻4个结点\n    			for(int i = 0;i < 4;i ++){\n    				int nx = node.x + dir[i][0];\n    				int ny = node.y + dir[i][1];\n    				if(nx <= 0 || nx > n || ny <= 0 || ny > n){\n    					continue;\n    				}\n    				if(map[nx][ny] == -1) continue;\n    				if(mark[nx][ny]) continue;\n    				// 新的状态\n    				Node node2 = new Node(nx, ny, node.t + 1);\n    				queue.add(node2);\n    				mark[nx][ny] = true;\n    				if(map[nx][ny] > 0){\n    					ans = ans + map[nx][ny] * node2.t;\n    					cnt ++;\n    					if(cnt == k) return ans;\n    				}\n    			}\n    		}\n    		return ans;\n    	}\n    \n    	public static void main(String[] args) {\n    		Scanner scanner = new Scanner(System.in);\n    		n = scanner.nextInt();\n    		m = scanner.nextInt();\n    		k = scanner.nextInt();\n    		d = scanner.nextInt();\n    		for(int i =0;i < m; i ++) {\n    			int x = scanner.nextInt();\n    			int y = scanner.nextInt();\n    			queue.add(new Node(x,y,0));\n    			map[x][y] = -1;\n    		}\n    		// 值大于0表示该点为客户位置\n    		for(int i = 0;i < k; i ++){\n    			int x = scanner.nextInt();\n    			int y = scanner.nextInt();\n    			int f = scanner.nextInt();\n    			map[x][y] += f;\n    		}\n    		// -1 表示该点不可以通过\n    		for(int i =0; i < d; i ++){\n    			int x = scanner.nextInt();\n    			int y = scanner.nextInt();\n    			map[x][y] = -1;\n    		}\n    		System.out.println(bfs());\n    	}\n    \n    }',0,77,94,'2017-02-14 16:37:51','/B20170214163751.html','3A09C79E03684FF8EFD83870D536EF4C','0deaf97437264ce69eac4f70cf8cb8f1','2017-02-14 16:37:51','/wwwroot/html/qingcai-front/B20170214163751.html',NULL,0,0,'发表','<p>问题描述</p>\n<p>　　栋栋最近开了一家餐饮连锁店，提供外卖服务。随着连锁店越来越多，怎么合理的给客户送餐成为了一个急需解决的问题。<br>　　栋栋的连锁店所在的区域可以看成是一个n×n的方格图（如下图所示），方格的格点上的位置上可能包含栋栋的分店（绿色标注）或者客户（蓝色标注），有一些格点是不能经过的（红色标注）。<br>　　方格图中的线表示可以行走的道路，相邻两个格点的距离为1。栋栋要送餐必须走可以行走的道路，而且不能经过红色标注的点。<br>  <img src=\"http://static.huding.name/image/b4fff3458d61426bbd6b114b287053a2.jpg\" alt=\"\"><br>  送餐的主要成本体现在路上所花的时间，每一份餐每走一个单位的距离需要花费1块钱。每个客户的需求都可以由栋栋的任意分店配送，每个分店没有配送总量的限制。<br>　　现在你得到了栋栋的客户的需求，请问在最优的送餐方式下，送这些餐需要花费多大的成本。\n<p>输入格式</p>\n<p>　　输入的第一行包含四个整数n, m, k, d，分别表示方格图的大小、栋栋的分店数量、客户的数量，以及不能经过的点的数量。<br>　　接下来m行，每行两个整数xi, yi，表示栋栋的一个分店在方格图中的横坐标和纵坐标。<br>　　接下来k行，每行三个整数xi, yi, ci，分别表示每个客户在方格图中的横坐标、纵坐标和订餐的量。（注意，可能有多个客户在方格图中的同一个位置）<br>　　接下来d行，每行两个整数，分别表示每个不能经过的点的横坐标和纵坐标。\n<p>输出格式</p>\n<p>　　输出一个整数，表示最优送餐方式下所需要花费的成本。</p>\n<p>样例输入</p>\n<p>10 2 3 3<br>1 1<br>8 8<br>1 5 1<br>2 3 3<br>6 7 2<br>1 2<br>2 2<br>6 8\n<p>样例输出</p>\n<p>29</p>\n<p>评测用例规模与约定</p>\n<p>　　前30%的评测用例满足：1&lt;=n &lt;=20。<br>　　前60%的评测用例满足：1&lt;=n&lt;=100。<br>　　所有评测用例都满足：1<=n<=1000，1<=m, k, d<=n^2。可能有多个客户在同一个格点上。每个客户的订餐量不超过1000，每个客户所需要的餐都能被送到。\n<p> 解题方案： </p>\n<p>  广度优先搜索，从饭店出发寻找客户</p>\n<p> ps:程序运行超时，在CCF系统中得分80分，</p>\n<pre><code>import java.util.LinkedList;\nimport java.util.Queue;\nimport java.util.Scanner;\n\npublic class Main {\n\n    // 地图数组\n    static int[][] map = new int[1001][1001];\n\n    // 标记数组\n    static boolean[][] mark = new boolean[1001][1001];\n\n    public static class Node {\n        public int x;\n        public int y;\n        public int t;\n\n        public Node(int x, int y, int t) {\n            this.x = x;\n            this.y = y;\n            this.t = t;\n        }\n    }\n\n    public static Queue&lt;Node&gt; queue = new LinkedList&lt;Node&gt;();\n\n    public static int[][] dir = { {0,1},\n                                  {1,0},\n                                  {-1,0},\n                                  {0,-1}\n                                 };\n\n    static int n,m,k,d;\n\n\n    public static long bfs(){\n        long ans = 0;\n        int cnt = 0;\n        while(!queue.isEmpty()){\n            Node node = queue.poll();\n            // 依次扩展器相邻4个结点\n            for(int i = 0;i &lt; 4;i ++){\n                int nx = node.x + dir[i][0];\n                int ny = node.y + dir[i][1];\n                if(nx &lt;= 0 || nx &gt; n || ny &lt;= 0 || ny &gt; n){\n                    continue;\n                }\n                if(map[nx][ny] == -1) continue;\n                if(mark[nx][ny]) continue;\n                // 新的状态\n                Node node2 = new Node(nx, ny, node.t + 1);\n                queue.add(node2);\n                mark[nx][ny] = true;\n                if(map[nx][ny] &gt; 0){\n                    ans = ans + map[nx][ny] * node2.t;\n                    cnt ++;\n                    if(cnt == k) return ans;\n                }\n            }\n        }\n        return ans;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        n = scanner.nextInt();\n        m = scanner.nextInt();\n        k = scanner.nextInt();\n        d = scanner.nextInt();\n        for(int i =0;i &lt; m; i ++) {\n            int x = scanner.nextInt();\n            int y = scanner.nextInt();\n            queue.add(new Node(x,y,0));\n            map[x][y] = -1;\n        }\n        // 值大于0表示该点为客户位置\n        for(int i = 0;i &lt; k; i ++){\n            int x = scanner.nextInt();\n            int y = scanner.nextInt();\n            int f = scanner.nextInt();\n            map[x][y] += f;\n        }\n        // -1 表示该点不可以通过\n        for(int i =0; i &lt; d; i ++){\n            int x = scanner.nextInt();\n            int y = scanner.nextInt();\n            map[x][y] = -1;\n        }\n        System.out.println(bfs());\n    }\n\n}\n</code></pre>','CCF,广度优先搜索',0),
	('702e8d5e18c04964b4da8ec48be50409','2015年9月CCF真题5 最佳文章','胡建洪','小明最近在研究一门新的语言，叫做Q语言。Q语言单词和文章都可以用且仅用只含有小写英文字母的字符串表示，任何由这些字母组成的字符串也都是一篇合法的Q语言文章。','问题描述\n\n　　小明最近在研究一门新的语言，叫做Q语言。Q语言单词和文章都可以用且仅用只含有小写英文字母的字符串表示，任何由这些字母组成的字符串也都是一篇合法的Q语言文章。\n　　在Q语言的所有单词中，小明选出了他认为最重要的n个。使用这些单词，小明可以评价一篇Q语言文章的“重要度”。\n　　文章“重要度”的定义为：在该文章中，所有重要的Q语言单词出现次数的总和。其中多次出现的单词，不论是否发生包含、重叠等情况，每次出现均计算在内。\n　　例如，假设n = 2，小明选出的单词是gvagv和agva。在文章gvagvagvagv中，gvagv出现了3次，agva出现了2次，因此这篇文章的重要度为3+2=5。\n　　现在，小明想知道，一篇由m个字母组成的Q语言文章，重要度最高能达到多少。\n\n输入格式\n\n　　输入的第一行包含两个整数n, m，表示小明选出的单词个数和最终文章包含的字母个数。\n　　接下来n行，每行包含一个仅由英文小写字母构成的字符串，表示小明选出的这n个单词。\n\n输出格式\n\n　　输出一行一个整数，表示由m个字母组成的Q语言文章中，重要度最高的文章的重要度。\n\n样例输入\n\n3 15\nagva\nagvagva\ngvagva\n\n样例输出\n\n11\n\n样例说明\n\n　　15个字母组成的重要度最高的文章为gvagvagvagvagva。\n　　在这篇文章中，agva出现4次，agvagva出现3次，gvagva出现4次，共计4+3+4=11次。\n\n评测用例规模与约定\n\n　　在评测时将使用10个评测用例对你的程序进行评测。\n　　设s为构成n个重要单词字母的总个数，例如在样例中，s=4+7+6=17；a为构成n个重要单词字母的种类数，例如在样例中，共有3中字母\'a\',\'g\',\'v\'，因此a=3。\n　　评测用例1和2满足2 ≤ n ≤ 3，1500 ≤ m ≤ 2000，s = 40；\n　　评测用例3和4满足m = 20，2 ≤ a ≤ 3；\n　　评测用例5、6和7满足2000 ≤ m ≤ 100000；\n　　评测用例8满足n = 2；\n　　所有的评测用例满足1 ≤ s ≤ 100，1 ≤ m ≤ 1015，每个单词至少包含1个字母，保证单词中仅出现英文小写字母，输入中不含多余字符，不会出现重复的单词。',0,15,51,'2017-02-07 23:38:17','/b20170207233817.html','84EE6D58B41A6ED2D3BB5F31093FB2E7','0deaf97437264ce69eac4f70cf8cb8f1','2017-02-07 23:38:17','/wwwroot/html/qingcai-front/b20170207233817.html',NULL,0,0,'发表','<p>问题描述</p>\n<p>　　小明最近在研究一门新的语言，叫做Q语言。Q语言单词和文章都可以用且仅用只含有小写英文字母的字符串表示，任何由这些字母组成的字符串也都是一篇合法的Q语言文章。<br>　　在Q语言的所有单词中，小明选出了他认为最重要的n个。使用这些单词，小明可以评价一篇Q语言文章的“重要度”。<br>　　文章“重要度”的定义为：在该文章中，所有重要的Q语言单词出现次数的总和。其中多次出现的单词，不论是否发生包含、重叠等情况，每次出现均计算在内。<br>　　例如，假设n = 2，小明选出的单词是gvagv和agva。在文章gvagvagvagv中，gvagv出现了3次，agva出现了2次，因此这篇文章的重要度为3+2=5。<br>　　现在，小明想知道，一篇由m个字母组成的Q语言文章，重要度最高能达到多少。\n<p>输入格式</p>\n<p>　　输入的第一行包含两个整数n, m，表示小明选出的单词个数和最终文章包含的字母个数。<br>　　接下来n行，每行包含一个仅由英文小写字母构成的字符串，表示小明选出的这n个单词。\n<p>输出格式</p>\n<p>　　输出一行一个整数，表示由m个字母组成的Q语言文章中，重要度最高的文章的重要度。</p>\n<p>样例输入</p>\n<p>3 15<br>agva<br>agvagva<br>gvagva\n<p>样例输出</p>\n<p>11</p>\n<p>样例说明</p>\n<p>　　15个字母组成的重要度最高的文章为gvagvagvagvagva。<br>　　在这篇文章中，agva出现4次，agvagva出现3次，gvagva出现4次，共计4+3+4=11次。\n<p>评测用例规模与约定</p>\n<p>　　在评测时将使用10个评测用例对你的程序进行评测。<br>　　设s为构成n个重要单词字母的总个数，例如在样例中，s=4+7+6=17；a为构成n个重要单词字母的种类数，例如在样例中，共有3中字母’a’,’g’,’v’，因此a=3。<br>　　评测用例1和2满足2 ≤ n ≤ 3，1500 ≤ m ≤ 2000，s = 40；<br>　　评测用例3和4满足m = 20，2 ≤ a ≤ 3；<br>　　评测用例5、6和7满足2000 ≤ m ≤ 100000；<br>　　评测用例8满足n = 2；<br>　　所有的评测用例满足1 ≤ s ≤ 100，1 ≤ m ≤ 1015，每个单词至少包含1个字母，保证单词中仅出现英文小写字母，输入中不含多余字符，不会出现重复的单词。\n','算法,数据结构',NULL),
	('7f45a62e0eac4061936477babeee37aa','2014年3月CCF真题4 无线网络','胡建洪','目前在一个很大的平面房间里有 n 个无线路由器,每个无线路由器都固定在某个点上。任何两个无线路由器只要距离不超过 r 就能互相建立网络连接。','问题描述\n\n　　目前在一个很大的平面房间里有 n 个无线路由器,每个无线路由器都固定在某个点上。任何两个无线路由器只要距离不超过 r 就能互相建立网络连接。\n　　除此以外,另有 m 个可以摆放无线路由器的位置。你可以在这些位置中选择至多 k 个增设新的路由器。\n　　你的目标是使得第 1 个路由器和第 2 个路由器之间的网络连接经过尽量少的中转路由器。请问在最优方案下中转路由器的最少个数是多少?\n\n输入格式\n\n　　第一行包含四个正整数 n,m,k,r。(2 ≤ n ≤ 100,1 ≤ k ≤ m ≤ 100, 1 ≤ r ≤ 108)。\n　　接下来 n 行,每行包含两个整数 xi 和 yi,表示一个已经放置好的无线 路由器在 (xi, yi) 点处。输入数据保证第 1 和第 2 个路由器在仅有这 n 个路由器的情况下已经可以互相连接(经过一系列的中转路由器)。\n　　接下来 m 行,每行包含两个整数 xi 和 yi,表示 (xi, yi) 点处可以增设 一个路由器。\n　　输入中所有的坐标的绝对值不超过 108,保证输入中的坐标各不相同。\n\n输出格式\n\n　　输出只有一个数,即在指定的位置中增设 k 个路由器后,从第 1 个路 由器到第 2 个路由器最少经过的中转路由器的个数。\n\n样例输入\n\n5 3 1 3\n0 0\n5 5\n0 3\n0 5\n3 5\n3 3\n4 4\n3 0\n\n样例输出\n\n2\n\n解题思路：\n\n深度优先搜索，代码如下：\n    import java.util.LinkedList;\n    import java.util.Queue;\n    import java.util.Scanner;\n    \n    public class Main {\n    	public static int MAX = 201;\n    	\n    	public static class Node {\n    		public long x;\n    		public long y;\n    		public int t;\n    		public boolean f;\n    		public int rd = 0;\n    		public Node(long x, long y, int t, boolean f) {\n    			this.x = x;\n    			this.y = y;\n    			this.t = t;\n    			this.f = f;\n    		}\n    	}\n    	\n    	public static Node[] nodes = new Node[MAX];\n    	public static boolean [] mark = new boolean[MAX];\n    	\n    	static int n,m,k;\n    	static long r;\n    	static Queue<Node> queue = new LinkedList<Node>();\n    	static int x,y;\n    	\n    	public static boolean isCan(Node node1,Node node2){\n    		long d1 = (node1.x - node2.x);\n    		long d2 = (node1.y - node2.y);\n    		return  (d1 * d1 + d2 * d2) <= (r * r);\n    	}\n    	\n    	public static int YY = Integer.MAX_VALUE;\n    	\n    	static void bfs(){\n    		while(!queue.isEmpty()){\n    			Node node = queue.poll();\n    			// 进行扩展\n    			for(int i = 1;i < m + n;i ++){\n    				// 该节点已被扩展\n    				if(mark[i]) continue;\n    				Node node2 = nodes[i];\n    				// 不能增加新的中间节点\n    				if(node.rd == k && node2.f) continue;\n    				// 可以扩展的结点\n    				if(isCan(node, node2)){\n    					node2.t = node.t + 1;\n    					node2.rd = node.rd;\n    					queue.add(node2);\n    					mark[i] = true;\n    					if(node2.f) node2.rd ++;\n    					if(node2.x == x && node2.y == y) {\n    						if(node.t < YY){\n    							YY = node.t;\n    						}\n    					}\n    				}\n    			}\n    		}\n    	}\n    	\n    \n    	public static void main(String[] args) {\n    		Scanner scanner = new Scanner(System.in);\n    		n = scanner.nextInt();\n    		m = scanner.nextInt();\n    		k = scanner.nextInt();\n    		r = scanner.nextInt();\n    		long x1 = scanner.nextInt();\n    		long y1 = scanner.nextInt();\n    		\n    		Node node1 = new Node(x1, y1, 0, false);\n    		nodes[0] = node1;\n    		mark[0] = true;\n    		queue.add(node1);\n    		x = scanner.nextInt();\n    		y = scanner.nextInt();\n    		Node node2 = new Node(x, y, 0, false);\n    		nodes[1]= node2;\n    		for(int i = 2;i < n;i ++){\n    			int nx = scanner.nextInt();\n    			int ny = scanner.nextInt();\n    			Node node = new Node(nx, ny, 0, false);\n    			nodes[i]= node;\n    		}\n    		for(int i = n;i < m + n;i ++){\n    			int nx = scanner.nextInt();\n    			int ny = scanner.nextInt();\n    			Node node = new Node(nx, ny, 0, true);\n    			nodes[i]= node;\n    		}\n    		bfs();\n    		System.out.println(YY);\n    	}\n    }\n    \n',0,147,65,'2017-02-07 23:35:13','/b20170207233513.html','AA8A897ABE29F3F1ACD2096D86DF30B5','0deaf97437264ce69eac4f70cf8cb8f1','2017-02-07 23:35:13','/wwwroot/html/qingcai-front/b20170207233513.html',NULL,0,0,'发表','<p>问题描述</p>\n<p>　　目前在一个很大的平面房间里有 n 个无线路由器,每个无线路由器都固定在某个点上。任何两个无线路由器只要距离不超过 r 就能互相建立网络连接。<br>　　除此以外,另有 m 个可以摆放无线路由器的位置。你可以在这些位置中选择至多 k 个增设新的路由器。<br>　　你的目标是使得第 1 个路由器和第 2 个路由器之间的网络连接经过尽量少的中转路由器。请问在最优方案下中转路由器的最少个数是多少?\n<p>输入格式</p>\n<p>　　第一行包含四个正整数 n,m,k,r。(2 ≤ n ≤ 100,1 ≤ k ≤ m ≤ 100, 1 ≤ r ≤ 108)。<br>　　接下来 n 行,每行包含两个整数 xi 和 yi,表示一个已经放置好的无线 路由器在 (xi, yi) 点处。输入数据保证第 1 和第 2 个路由器在仅有这 n 个路由器的情况下已经可以互相连接(经过一系列的中转路由器)。<br>　　接下来 m 行,每行包含两个整数 xi 和 yi,表示 (xi, yi) 点处可以增设 一个路由器。<br>　　输入中所有的坐标的绝对值不超过 108,保证输入中的坐标各不相同。\n<p>输出格式</p>\n<p>　　输出只有一个数,即在指定的位置中增设 k 个路由器后,从第 1 个路 由器到第 2 个路由器最少经过的中转路由器的个数。</p>\n<p>样例输入</p>\n<p>5 3 1 3<br>0 0<br>5 5<br>0 3<br>0 5<br>3 5<br>3 3<br>4 4<br>3 0\n<p>样例输出</p>\n<p>2</p>\n<p>解题思路：</p>\n<p>深度优先搜索，代码如下：<br>    import java.util.LinkedList;<br>    import java.util.Queue;<br>    import java.util.Scanner;\n<pre><code>public class Main {\n    public static int MAX = 201;\n\n    public static class Node {\n        public long x;\n        public long y;\n        public int t;\n        public boolean f;\n        public int rd = 0;\n        public Node(long x, long y, int t, boolean f) {\n            this.x = x;\n            this.y = y;\n            this.t = t;\n            this.f = f;\n        }\n    }\n\n    public static Node[] nodes = new Node[MAX];\n    public static boolean [] mark = new boolean[MAX];\n\n    static int n,m,k;\n    static long r;\n    static Queue&lt;Node&gt; queue = new LinkedList&lt;Node&gt;();\n    static int x,y;\n\n    public static boolean isCan(Node node1,Node node2){\n        long d1 = (node1.x - node2.x);\n        long d2 = (node1.y - node2.y);\n        return  (d1 * d1 + d2 * d2) &lt;= (r * r);\n    }\n\n    public static int YY = Integer.MAX_VALUE;\n\n    static void bfs(){\n        while(!queue.isEmpty()){\n            Node node = queue.poll();\n            // 进行扩展\n            for(int i = 1;i &lt; m + n;i ++){\n                // 该节点已被扩展\n                if(mark[i]) continue;\n                Node node2 = nodes[i];\n                // 不能增加新的中间节点\n                if(node.rd == k &amp;&amp; node2.f) continue;\n                // 可以扩展的结点\n                if(isCan(node, node2)){\n                    node2.t = node.t + 1;\n                    node2.rd = node.rd;\n                    queue.add(node2);\n                    mark[i] = true;\n                    if(node2.f) node2.rd ++;\n                    if(node2.x == x &amp;&amp; node2.y == y) {\n                        if(node.t &lt; YY){\n                            YY = node.t;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        n = scanner.nextInt();\n        m = scanner.nextInt();\n        k = scanner.nextInt();\n        r = scanner.nextInt();\n        long x1 = scanner.nextInt();\n        long y1 = scanner.nextInt();\n\n        Node node1 = new Node(x1, y1, 0, false);\n        nodes[0] = node1;\n        mark[0] = true;\n        queue.add(node1);\n        x = scanner.nextInt();\n        y = scanner.nextInt();\n        Node node2 = new Node(x, y, 0, false);\n        nodes[1]= node2;\n        for(int i = 2;i &lt; n;i ++){\n            int nx = scanner.nextInt();\n            int ny = scanner.nextInt();\n            Node node = new Node(nx, ny, 0, false);\n            nodes[i]= node;\n        }\n        for(int i = n;i &lt; m + n;i ++){\n            int nx = scanner.nextInt();\n            int ny = scanner.nextInt();\n            Node node = new Node(nx, ny, 0, true);\n            nodes[i]= node;\n        }\n        bfs();\n        System.out.println(YY);\n    }\n}\n</code></pre>','图,CCF,网络',NULL),
	('b79881401ed843f49becf79d92dd372d','linux的alias命令','胡建洪','alias命令用来设置指令的别名。我们可以使用该命令可以将一些较长的命令进行简化。使用alias时，用户必须使用单引号\'\'将原来的命令引起来，防止特殊字符导致错误。\n','alias命令用来设置指令的别名。我们可以使用该命令可以将一些较长的命令进行简化。使用alias时，用户必须使用单引号\'\'将原来的命令引起来，防止特殊字符导致错误。\n\nalias命令的作用只限于该次登入的操作。若要每次登入都能够使用这些命令别名，则可将相应的alias命令存放到/etc/profile或者自己的～/.bash_profile中。\n\n### 语法\n\n>alias（选项）(参数)\n\n其中，选项：-p 打印已经设置的命令别名。参数：定义命令别名，格式为“命令别名=\'实际命令\'”。\n\nFor example:\n\n> alias mysql = \'/usr/local/mysql/bin/mysql\'\n\n如果要删除一个别名，则可直接使用<strong>unalias</strong>命令\n\nFor example:\n> unalias mysql\n\n若直接输入不带参数的alias命令，则直接列出当前系统中的所有已经定义的别名。\n',0,0,12,'2017-09-11 19:15:04','/B20170911191504.html','9FCA62AB255C29442073290C047F3A8E','8a1aeb3e96dd48b7873d9100062cd8d6','2017-09-11 19:15:04','/wwwroot/html/qingcai-front/B20170911191504.html',NULL,0,0,'发表','<p>alias命令用来设置指令的别名。我们可以使用该命令可以将一些较长的命令进行简化。使用alias时，用户必须使用单引号’’将原来的命令引起来，防止特殊字符导致错误。</p>\n<p>alias命令的作用只限于该次登入的操作。若要每次登入都能够使用这些命令别名，则可将相应的alias命令存放到/etc/profile或者自己的～/.bash_profile中。</p>\n<h3 id=\"h3-u8BEDu6CD5\"><a name=\"语法\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>语法</h3><blockquote>\n<p>alias（选项）(参数)</p>\n</blockquote>\n<p>其中，选项：-p 打印已经设置的命令别名。参数：定义命令别名，格式为“命令别名=’实际命令’”。</p>\n<p>For example:</p>\n<blockquote>\n<p>alias mysql = ‘/usr/local/mysql/bin/mysql’</p>\n</blockquote>\n<p>如果要删除一个别名，则可直接使用<strong>unalias</strong>命令</p>\n<p>For example:</p>\n<blockquote>\n<p>unalias mysql</p>\n</blockquote>\n<p>若直接输入不带参数的alias命令，则直接列出当前系统中的所有已经定义的别名。</p>\n','alias,linux',0),
	('bd9567a036794a97bb6ada54a362b37d','mac下使用mysql控制台命令行','胡建洪','mac下使用mysql控制台命令行','mac下使用mysql控制台命令行\n\n命令行中输入\n\nopen .bash_profile\n\n然后将\n\nalias mysql=/usr/local/mysql/bin/mysql\nalias mysqladmin=/usr/local/mysql/bin/mysqladmin\n\n追加到最后面，如果文件不存在，自己创建一个就可以了\n\n然后保存\n\n然后输入\n\nsource .bash_profile\n\n最后就能使用mysql来使用shell来使用控制台命令了',3,135,156,'2017-04-12 09:16:46','/B20170412091646.html','6D5CF780D1A0B37853073AC63E30A2CE','330f029b812441db9bffa936f702071f','2017-04-12 09:16:46','/wwwroot/html/qingcai-front/B20170412091646.html',NULL,0,0,'发表','<p>mac下使用mysql控制台命令行</p>\n<p>命令行中输入</p>\n<p>open .bash_profile</p>\n<p>然后将</p>\n<p>alias mysql=/usr/local/mysql/bin/mysql<br>alias mysqladmin=/usr/local/mysql/bin/mysqladmin\n<p>追加到最后面，如果文件不存在，自己创建一个就可以了</p>\n<p>然后保存</p>\n<p>然后输入</p>\n<p>source .bash_profile</p>\n<p>最后就能使用mysql来使用shell来使用控制台命令了</p>\n','MAC,MySQL',0),
	('c088cee7075c4a70a8b87bf5ba0b3813','剑指Offer之用两个栈实现队列','胡建洪','用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。','\n用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。\n\n\n    import java.util.Stack;\n     \n    public class Solution {\n        Stack<Integer> stack1 = new Stack<Integer>();\n        Stack<Integer> stack2 = new Stack<Integer>();\n         \n        public void push(int node) {\n            stack1.push(node);\n        }\n         \n        public int pop() {\n            if(stack2.isEmpty()){\n                while(!stack1.isEmpty()){\n                    stack2.push(stack1.pop());\n                }\n                 \n            } \n            return stack2.pop();\n         \n        }\n    }',2,77,83,'2017-02-20 21:37:21','/B20170220213721.html','A7E48BA53772E4FD5E2178CF206D5BF9','94c47580980144ecbd3d5f3984a02087','2017-02-20 21:37:21','/wwwroot/html/qingcai-front/B20170220213721.html','null',0,0,'发表','<p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p>\n<pre><code>import java.util.Stack;\n\npublic class Solution {\n    Stack&lt;Integer&gt; stack1 = new Stack&lt;Integer&gt;();\n    Stack&lt;Integer&gt; stack2 = new Stack&lt;Integer&gt;();\n\n    public void push(int node) {\n        stack1.push(node);\n    }\n\n    public int pop() {\n        if(stack2.isEmpty()){\n            while(!stack1.isEmpty()){\n                stack2.push(stack1.pop());\n            }\n\n        } \n        return stack2.pop();\n\n    }\n}\n</code></pre>','队列,栈,数据结构',0),
	('cb7fdf7d43924bd198d86fa6208db44b','2014年12月CCF真题1 门禁系统','胡建洪','涛涛最近要负责图书馆的管理工作，需要记录下每天读者的到访情况。每位读者有一个编号，每条记录用读者的编号来表示。给出读者的来访记录，请问每一条记录中的读者是第几次出现。','问题描述\n\n　　涛涛最近要负责图书馆的管理工作，需要记录下每天读者的到访情况。每位读者有一个编号，每条记录用读者的编号来表示。给出读者的来访记录，请问每一条记录中的读者是第几次出现。\n\n输入格式\n\n　　输入的第一行包含一个整数n，表示涛涛的记录条数。\n　　第二行包含n个整数，依次表示涛涛的记录中每位读者的编号。\n\n输出格式\n\n　　输出一行，包含n个整数，由空格分隔，依次表示每条记录中的读者编号是第几次出现。\n\n样例输入\n\n5\n1 2 1 1 3\n\n样例输出\n\n1 1 2 3 1\n\n评测用例规模与约定\n\n　　1≤n≤1,000，读者的编号为不超过n的正整数。\n  \n\n    import java.util.Scanner;\n    \n    public class Main {\n    \n    	public static void main(String[] args) {\n    		Scanner scanner = new Scanner(System.in);\n    		int n = scanner.nextInt();\n    		int num[] = new int[n];\n    		for(int i = 0; i < n; i ++){\n    			int k = scanner.nextInt();\n    			num[k] ++;\n    			if(i != n - 1){\n    				System.out.print(num[k] + \" \");\n    			} else {\n    				System.out.print(num[k]);\n    			}\n    		}\n    		System.out.println();\n    		scanner.close();\n    	}\n    }\n',2,9,135,'2017-02-08 16:15:23','/B20170208161523.html','3AD1ED190DCA0B50741859826E82305E','0deaf97437264ce69eac4f70cf8cb8f1','2017-02-08 16:15:23','/wwwroot/html/qingcai-front/B20170208161523.html',NULL,0,0,'发表','<p>问题描述</p>\n<p>　　涛涛最近要负责图书馆的管理工作，需要记录下每天读者的到访情况。每位读者有一个编号，每条记录用读者的编号来表示。给出读者的来访记录，请问每一条记录中的读者是第几次出现。</p>\n<p>输入格式</p>\n<p>　　输入的第一行包含一个整数n，表示涛涛的记录条数。<br>　　第二行包含n个整数，依次表示涛涛的记录中每位读者的编号。\n<p>输出格式</p>\n<p>　　输出一行，包含n个整数，由空格分隔，依次表示每条记录中的读者编号是第几次出现。</p>\n<p>样例输入</p>\n<p>5<br>1 2 1 1 3\n<p>样例输出</p>\n<p>1 1 2 3 1</p>\n<p>评测用例规模与约定</p>\n<p>　　1≤n≤1,000，读者的编号为不超过n的正整数。</p>\n<pre><code>import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        int num[] = new int[n];\n        for(int i = 0; i &lt; n; i ++){\n            int k = scanner.nextInt();\n            num[k] ++;\n            if(i != n - 1){\n                System.out.print(num[k] + \" \");\n            } else {\n                System.out.print(num[k]);\n            }\n        }\n        System.out.println();\n        scanner.close();\n    }\n}\n</code></pre>','CCF,java,数据结构',0),
	('d8f415182fa84602a1e021a4937a22f7','2015年9月CCF真题4 高速公路','胡建洪','某国有n个城市，为了使得城市间的交通更便利，该国国王打算在城市之间修一些高速公路，由于经费限制，国王打算第一阶段先在部分城市之间修一些单向的高速公路。现在，大臣们帮国王拟了一个修高速公路的计划。看了计划后，国王发现，有些城市之间可以通过高速公路直接（不经过其他城市）或间接（经过一个或多个其他城市）到达，而有的却不能。如果城市A可以通过高速公路到达城市B，而且城市B也可以通过高速公路到达城市A，则这两个城市被称为便利城市对。国王想知道，在大臣们给他的计划中，有多少个便利城市对。','问题描述\n\n　　某国有n个城市，为了使得城市间的交通更便利，该国国王打算在城市之间修一些高速公路，由于经费限制，国王打算第一阶段先在部分城市之间修一些单向的高速公路。\n　　现在，大臣们帮国王拟了一个修高速公路的计划。看了计划后，国王发现，有些城市之间可以通过高速公路直接（不经过其他城市）或间接（经过一个或多个其他城市）到达，而有的却不能。如果城市A可以通过高速公路到达城市B，而且城市B也可以通过高速公路到达城市A，则这两个城市被称为便利城市对。\n　　国王想知道，在大臣们给他的计划中，有多少个便利城市对。\n\n输入格式\n\n　　输入的第一行包含两个整数n, m，分别表示城市和单向高速公路的数量。\n　　接下来m行，每行两个整数a, b，表示城市a有一条单向的高速公路连向城市b。\n\n输出格式\n\n　　输出一行，包含一个整数，表示便利城市对的数量。\n\n样例输入\n\n5 5\n1 2\n2 3\n3 4\n4 2\n3 5\n\n样例输出\n\n3\n\n样例说明\n![](http://static.huding.name/image/30d7399297254131903849b7f6861e07.jpg)\n\n　　城市间的连接如图所示。有3个便利城市对，它们分别是(2, 3), (2, 4), (3, 4)，请注意(2, 3)和(3, 2)看成同一个便利城市对。\n\n评测用例规模与约定\n\n　　前30%的评测用例满足1 ≤ n ≤ 100, 1 ≤ m ≤ 1000；\n　　前60%的评测用例满足1 ≤ n ≤ 1000, 1 ≤ m ≤ 10000；\n　　所有评测用例满足1 ≤ n ≤ 10000, 1 ≤ m ≤ 100000。\n    \n	import java.util.Scanner;\n    import java.util.Stack;\n    import java.util.Vector;\n    public class Main {\n    	\n    	public static int MAX = 10005;\n    	\n    	public static Vector[] gra = new Vector[MAX];\n    			\n    	public static int[] dfn = new int[MAX];\n    	\n    	public static int[] low = new int[MAX];\n    	\n    	public static int[] InComponent = new int[MAX];\n    	\n    	public static int[] Instack = new int[MAX];\n    	\n    	public static Stack<Integer> sta = new Stack<Integer>();;\n    	\n    	public static int index = 0,ComponentNumber = 0;\n    	\n    	\n    	public static void tarjan(int u)  \n    	{  \n    	    \n    	    low[u] = dfn[u] = ++ index;  \n    	    sta.push(u);  \n    	    Instack[u] = 2;  \n    	    for (int i = 0; gra[u] != null && i < gra[u].size(); ++ i)  \n    	    {  \n    	        int t = (int) gra[u].get(i);  \n    	        if (dfn[t] == 0)  \n    	        {  \n    	            tarjan(t);  \n    	            low[u] = Math.min(low[u], low[t]);  \n    	        }   \n    	        else if (Instack[t] == 2)  \n    	        {  \n    	            low[u] =  Math.min(low[u], dfn[t]);  \n    	        }  \n    	    }  \n    	  \n    	    if (low[u] == dfn[u])  \n    	    {  \n    	        ++ ComponentNumber;  \n    	        while (!sta.empty())  \n    	        {  \n    	            int j = sta.pop();  \n    	            Instack[j] = 1;  \n    	            InComponent[j]=ComponentNumber;  \n    	            if (j == u)  {\n    	               break;\n    	            }\n    	        }  \n    	    }  \n    	}  \n    	\n    	public static int[] v = new int[MAX];\n    \n    	public static void main(String[] args) {\n    		Scanner scanner = new Scanner(System.in);\n    		int n = scanner.nextInt();\n    		int m = scanner.nextInt();\n    		for(int i = 0; i < m ;i ++){\n    			int h = scanner.nextInt();\n    			int t = scanner.nextInt();\n    			if(gra[h] == null){\n    				gra[h] = new Vector();\n    			}\n    			gra[h].add(t);\n    		}\n    		for(int i = 1;i <= n; i ++){\n    			if(dfn[i] ==  0){\n    				tarjan(i);\n    			}\n    		}\n    		for(int i = 1; i <= n; i ++){\n    			v[InComponent[i]] ++;\n    		}\n    		\n    		int sum = 0;\n    		\n    		for(int i = 1;i <= n; i++){\n    			if(v[i] > 1){\n    				sum += (v[i] * (v[i] - 1)) / 2;\n    			}\n    		}\n    		System.out.println(sum);\n    		scanner.close();\n    	}\n\n   在系统中得分90分，剩下10分运行超时未得分',0,1,78,'2017-02-07 23:42:46','/b20170207234246.html','87EDDC788E020D567053549CDE946ED5','0deaf97437264ce69eac4f70cf8cb8f1','2017-02-07 23:42:46','/wwwroot/html/qingcai-front/b20170207234246.html',NULL,0,0,'发表','<p>问题描述</p>\n<p>　　某国有n个城市，为了使得城市间的交通更便利，该国国王打算在城市之间修一些高速公路，由于经费限制，国王打算第一阶段先在部分城市之间修一些单向的高速公路。<br>　　现在，大臣们帮国王拟了一个修高速公路的计划。看了计划后，国王发现，有些城市之间可以通过高速公路直接（不经过其他城市）或间接（经过一个或多个其他城市）到达，而有的却不能。如果城市A可以通过高速公路到达城市B，而且城市B也可以通过高速公路到达城市A，则这两个城市被称为便利城市对。<br>　　国王想知道，在大臣们给他的计划中，有多少个便利城市对。\n<p>输入格式</p>\n<p>　　输入的第一行包含两个整数n, m，分别表示城市和单向高速公路的数量。<br>　　接下来m行，每行两个整数a, b，表示城市a有一条单向的高速公路连向城市b。\n<p>输出格式</p>\n<p>　　输出一行，包含一个整数，表示便利城市对的数量。</p>\n<p>样例输入</p>\n<p>5 5<br>1 2<br>2 3<br>3 4<br>4 2<br>3 5\n<p>样例输出</p>\n<p>3</p>\n<p>样例说明<br><img src=\"http://static.huding.name/image/30d7399297254131903849b7f6861e07.jpg\" alt=\"\">\n<p>　　城市间的连接如图所示。有3个便利城市对，它们分别是(2, 3), (2, 4), (3, 4)，请注意(2, 3)和(3, 2)看成同一个便利城市对。</p>\n<p>评测用例规模与约定</p>\n<p>　　前30%的评测用例满足1 ≤ n ≤ 100, 1 ≤ m ≤ 1000；<br>　　前60%的评测用例满足1 ≤ n ≤ 1000, 1 ≤ m ≤ 10000；<br>　　所有评测用例满足1 ≤ n ≤ 10000, 1 ≤ m ≤ 100000。\n<pre><code>import java.util.Scanner;\nimport java.util.Stack;\nimport java.util.Vector;\npublic class Main {\n\n    public static int MAX = 10005;\n\n    public static Vector[] gra = new Vector[MAX];\n\n    public static int[] dfn = new int[MAX];\n\n    public static int[] low = new int[MAX];\n\n    public static int[] InComponent = new int[MAX];\n\n    public static int[] Instack = new int[MAX];\n\n    public static Stack&lt;Integer&gt; sta = new Stack&lt;Integer&gt;();;\n\n    public static int index = 0,ComponentNumber = 0;\n\n\n    public static void tarjan(int u)  \n    {  \n\n        low[u] = dfn[u] = ++ index;  \n        sta.push(u);  \n        Instack[u] = 2;  \n        for (int i = 0; gra[u] != null &amp;&amp; i &lt; gra[u].size(); ++ i)  \n        {  \n            int t = (int) gra[u].get(i);  \n            if (dfn[t] == 0)  \n            {  \n                tarjan(t);  \n                low[u] = Math.min(low[u], low[t]);  \n            }   \n            else if (Instack[t] == 2)  \n            {  \n                low[u] =  Math.min(low[u], dfn[t]);  \n            }  \n        }  \n\n        if (low[u] == dfn[u])  \n        {  \n            ++ ComponentNumber;  \n            while (!sta.empty())  \n            {  \n                int j = sta.pop();  \n                Instack[j] = 1;  \n                InComponent[j]=ComponentNumber;  \n                if (j == u)  {\n                   break;\n                }\n            }  \n        }  \n    }  \n\n    public static int[] v = new int[MAX];\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        int m = scanner.nextInt();\n        for(int i = 0; i &lt; m ;i ++){\n            int h = scanner.nextInt();\n            int t = scanner.nextInt();\n            if(gra[h] == null){\n                gra[h] = new Vector();\n            }\n            gra[h].add(t);\n        }\n        for(int i = 1;i &lt;= n; i ++){\n            if(dfn[i] ==  0){\n                tarjan(i);\n            }\n        }\n        for(int i = 1; i &lt;= n; i ++){\n            v[InComponent[i]] ++;\n        }\n\n        int sum = 0;\n\n        for(int i = 1;i &lt;= n; i++){\n            if(v[i] &gt; 1){\n                sum += (v[i] * (v[i] - 1)) / 2;\n            }\n        }\n        System.out.println(sum);\n        scanner.close();\n    }\n</code></pre><p>   在系统中得分90分，剩下10分运行超时未得分</p>\n','CCF,tarjan,图',NULL),
	('e045b65486664c67820ef9f7f4b81542','Java体系结构概念图描述','胡建洪','Java体系结构概念图描述','\n\n\nJava体系结构概念图描述\n\nJava6\n![](http://static.huding.name/image/83f99c8ea5904205bac1aa15af8eda78.png)\nJava7\n![](http://static.huding.name/image/d46782df766a4a24b36cc5d2a52308f4.png)\nJava8\n![Java8](http://static.huding.name/image/801bc64ce87d4792a540c462c91776d1.png \"Java8\")',7,50,234,'2017-02-14 21:03:46','/B20170214210346.html','5D32F08A72E891539669B4EAFFA58D50','aab2e1cb0e4148c4b081df9940c2800a','2017-02-14 21:03:46','/wwwroot/html/qingcai-front/B20170214210346.html','http://static.huding.name/image/fcc38a6963a740f4ac55318728f5a0d2.png',1,0,'发表','<p>Java体系结构概念图描述</p>\n<p>Java6<br><img src=\"http://static.huding.name/image/83f99c8ea5904205bac1aa15af8eda78.png\" alt=\"\"><br>Java7<br><img src=\"http://static.huding.name/image/d46782df766a4a24b36cc5d2a52308f4.png\" alt=\"\"><br>Java8<br><img src=\"http://static.huding.name/image/801bc64ce87d4792a540c462c91776d1.png\" alt=\"Java8\" title=\"Java8\">\n','Java,JDK,JRE',0),
	('e2de2c2fb832430687bffc4217dec1d7','Java的BufferedReader类学习笔记','胡建洪','BufferedReader由Reader类扩展而来，提供通用的缓冲方式文本读取，而且提供了很实用的readLine，读取一个文本行，从字符输入流中读取文本，缓冲各个字符，从而提供字符、数组和行的高效读取。','\nBufferedReader由Reader类扩展而来，提供通用的缓冲方式文本读取，而且提供了很实用的readLine，读取一个文本行，从字符输入流中读取文本，缓冲各个字符，从而提供字符、数组和行的高效读取。\n\nBufferedReader的主要方法\n\n\n构造方法：\n\n```\nBufferedReader br = new BufferReader(Reader in);\n```\n主要方法：\n\n```\nint read();//读取单个字符。\n//将字符读入到数组的某一部分。返回读取的字符数。达到尾部 ，返回-1。\nint read(char[] cbuf,int off,int len);\nString readLine();//读取一个文本行。\nvoid close(); //关闭该流。并释放与该流相关的所有资源。\n```\n\n今天在学习Java的BIO（blocking IO）的时候，在读取socket的输入流数据时，采用了BufferdReader的readLine方法，发现一直阻塞。后来才发现使用readLine方法读取一行必须要有“\\r\\n“，否则会一直阻塞到Socket超时或者IO异常。下面是我测试时的代码：\n\n## 未正常处理的代码\nBIOClient：\n\n```\npackage me.huding.study.distributed;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\n\npublic class BIOClient {\n	public static void main(String[] args) throws UnknownHostException, IOException {\n		Socket socket = new Socket(\"localhost\", 7878);\n		socket.setSoTimeout(30000);\n		BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n		PrintWriter writer = new PrintWriter(socket.getOutputStream(),true);\n		writer.write(\"hello server\");\n		writer.flush();\n		String string = reader.readLine();\n		System.out.println(string);\n		socket.close();\n\n	}\n}\n```\nBIOServer:\n\n```\npackage me.huding.study.distributed;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\n\npublic class BIOServer {\n\n	public static void main(String[] args) throws UnknownHostException, IOException {\n		ServerSocket serverSocket = new ServerSocket(7878);\n		Socket socket = serverSocket.accept();\n		BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n		String string = reader.readLine();\n		System.out.println(string);\n		PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);\n		writer.write(\"hello client\");\n		writer.flush();\n		socket.close();\n	}\n}\n```\n\n先运行BIOServer，在运行BIOClient，会发现控制台没有输出预期的结果，即BIOServer输出“hello Server\",BIOClient输出“hello client\"，而是输出这样的结果：\n\nBIOServer的结果：\n\n```\nhello server\n```\nBIOClient的结果：\n\n```\nException in thread \"main\" java.net.SocketTimeoutException: Read timed out\n	at java.net.SocketInputStream.socketRead0(Native Method)\n	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)\n	at java.net.SocketInputStream.read(SocketInputStream.java:170)\n	at java.net.SocketInputStream.read(SocketInputStream.java:141)\n	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)\n	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)\n	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)\n	at java.io.InputStreamReader.read(InputStreamReader.java:184)\n	at java.io.BufferedReader.fill(BufferedReader.java:161)\n	at java.io.BufferedReader.readLine(BufferedReader.java:324)\n	at java.io.BufferedReader.readLine(BufferedReader.java:389)\n	at me.huding.study.distributed.BIOClient.main(BIOClient.java:18)\n```\n\n其中BIOClient的结果是因为Socket读取超时出现的。经过简单思考，只要分别将BIOClient的第16行的代码换成：writer.write(\"hello server\\r\\n\");或者writer.println(\"hello server\");,将BIOServer的第20行代码替换成：writer.write(\"hello client\\r\\n\");或者writer.println(\"hello client\");然后分别运行BIOServer和BIOClient的代码，就可以出线理想的结果：\n\nBIOClient的结果：\n\n```\nhello client\n```\nBIOServer的结果：\n\n```\nhello server\n```\n\n## 总结\n\n虽然我在学习Java的IO方面的小小的插曲，但是如果我没有注意到这点，可能以后在写一些生产环境用的的系统时，会出现致命的问题。生活如此艰辛，学习过程还需时刻谨慎小心啊！\n',0,41,103,'2017-03-07 10:34:24','/B20170307103424.html','4098DCBD538FDA1CCA0BC7BB75A87B6E','aab2e1cb0e4148c4b081df9940c2800a','2017-03-07 10:34:24','/wwwroot/html/qingcai-front/B20170307103424.html',NULL,0,0,'发表','<p>BufferedReader由Reader类扩展而来，提供通用的缓冲方式文本读取，而且提供了很实用的readLine，读取一个文本行，从字符输入流中读取文本，缓冲各个字符，从而提供字符、数组和行的高效读取。</p>\n<p>BufferedReader的主要方法</p>\n<p>构造方法：</p>\n<pre><code>BufferedReader br = new BufferReader(Reader in);\n</code></pre><p>主要方法：</p>\n<pre><code>int read();//读取单个字符。\n//将字符读入到数组的某一部分。返回读取的字符数。达到尾部 ，返回-1。\nint read(char[] cbuf,int off,int len);\nString readLine();//读取一个文本行。\nvoid close(); //关闭该流。并释放与该流相关的所有资源。\n</code></pre><p>今天在学习Java的BIO（blocking IO）的时候，在读取socket的输入流数据时，采用了BufferdReader的readLine方法，发现一直阻塞。后来才发现使用readLine方法读取一行必须要有“\\r\\n“，否则会一直阻塞到Socket超时或者IO异常。下面是我测试时的代码：</p>\n<h2 id=\"h2-u672Au6B63u5E38u5904u7406u7684u4EE3u7801\"><a name=\"未正常处理的代码\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>未正常处理的代码</h2><p>BIOClient：</p>\n<pre><code>package me.huding.study.distributed;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\n\npublic class BIOClient {\n    public static void main(String[] args) throws UnknownHostException, IOException {\n        Socket socket = new Socket(\"localhost\", 7878);\n        socket.setSoTimeout(30000);\n        BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n        PrintWriter writer = new PrintWriter(socket.getOutputStream(),true);\n        writer.write(\"hello server\");\n        writer.flush();\n        String string = reader.readLine();\n        System.out.println(string);\n        socket.close();\n\n    }\n}\n</code></pre><p>BIOServer:</p>\n<pre><code>package me.huding.study.distributed;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\n\npublic class BIOServer {\n\n    public static void main(String[] args) throws UnknownHostException, IOException {\n        ServerSocket serverSocket = new ServerSocket(7878);\n        Socket socket = serverSocket.accept();\n        BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n        String string = reader.readLine();\n        System.out.println(string);\n        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);\n        writer.write(\"hello client\");\n        writer.flush();\n        socket.close();\n    }\n}\n</code></pre><p>先运行BIOServer，在运行BIOClient，会发现控制台没有输出预期的结果，即BIOServer输出“hello Server”,BIOClient输出“hello client”，而是输出这样的结果：</p>\n<p>BIOServer的结果：</p>\n<pre><code>hello server\n</code></pre><p>BIOClient的结果：</p>\n<pre><code>Exception in thread \"main\" java.net.SocketTimeoutException: Read timed out\n    at java.net.SocketInputStream.socketRead0(Native Method)\n    at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)\n    at java.net.SocketInputStream.read(SocketInputStream.java:170)\n    at java.net.SocketInputStream.read(SocketInputStream.java:141)\n    at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)\n    at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)\n    at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)\n    at java.io.InputStreamReader.read(InputStreamReader.java:184)\n    at java.io.BufferedReader.fill(BufferedReader.java:161)\n    at java.io.BufferedReader.readLine(BufferedReader.java:324)\n    at java.io.BufferedReader.readLine(BufferedReader.java:389)\n    at me.huding.study.distributed.BIOClient.main(BIOClient.java:18)\n</code></pre><p>其中BIOClient的结果是因为Socket读取超时出现的。经过简单思考，只要分别将BIOClient的第16行的代码换成：writer.write(“hello server\\r\\n”);或者writer.println(“hello server”);,将BIOServer的第20行代码替换成：writer.write(“hello client\\r\\n”);或者writer.println(“hello client”);然后分别运行BIOServer和BIOClient的代码，就可以出线理想的结果：</p>\n<p>BIOClient的结果：</p>\n<pre><code>hello client\n</code></pre><p>BIOServer的结果：</p>\n<pre><code>hello server\n</code></pre><h2 id=\"h2-u603Bu7ED3\"><a name=\"总结\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>总结</h2><p>虽然我在学习Java的IO方面的小小的插曲，但是如果我没有注意到这点，可能以后在写一些生产环境用的的系统时，会出现致命的问题。生活如此艰辛，学习过程还需时刻谨慎小心啊！</p>\n','Java,IO,Socket',0),
	('f584b7d7774b437a87290a072dfb9a02','剑指Offer之第一个只出现一次的字符位置','胡建洪','在一个字符串(1<=字符串长度<=10000，全部由大写字母组成)中找到第一个只出现一次的字符,并返回它的位置。','在一个字符串(1<=字符串长度<=10000，全部由大写字母组成)中找到第一个只出现一次的字符,并返回它的位置。\n\n    public class Solution {\n        public int FirstNotRepeatingChar(String str) {\n            int len = str.length();\n            if(len == 0){\n                return -1;\n            }\n            int kl = 256;\n            int nums[] = new int[kl];\n            int index[] = new int[kl];\n            for(int i = 0;i < len;i ++){\n                char ch = str.charAt(i);\n                nums[ch]++;\n                index[ch] = i;\n            }\n            int k = kl + 1;\n            for(int i = 0;i < kl;i ++){\n                if(nums[i] == 1){\n                    if(index[i] < k){\n                        k = index[i];\n                    }\n                }\n            }\n            return k;\n        }\n    }',5,122,169,'2017-02-21 22:24:57','/B20170221222457.html','A3A38254E1F1422FD6DDC2F51DEB6320','94c47580980144ecbd3d5f3984a02087','2017-02-21 22:24:57','/wwwroot/html/qingcai-front/B20170221222457.html',NULL,0,0,'发表','<p>在一个字符串(1&lt;=字符串长度&lt;=10000，全部由大写字母组成)中找到第一个只出现一次的字符,并返回它的位置。</p>\n<pre><code>public class Solution {\n    public int FirstNotRepeatingChar(String str) {\n        int len = str.length();\n        if(len == 0){\n            return -1;\n        }\n        int kl = 256;\n        int nums[] = new int[kl];\n        int index[] = new int[kl];\n        for(int i = 0;i &lt; len;i ++){\n            char ch = str.charAt(i);\n            nums[ch]++;\n            index[ch] = i;\n        }\n        int k = kl + 1;\n        for(int i = 0;i &lt; kl;i ++){\n            if(nums[i] == 1){\n                if(index[i] &lt; k){\n                    k = index[i];\n                }\n            }\n        }\n        return k;\n    }\n}\n</code></pre>','剑指offer',0);

UNLOCK TABLES;


CREATE TABLE `blog_tags` (
  `tagID` char(32) NOT NULL,
  `blogID` char(32) NOT NULL,
  PRIMARY KEY (`tagID`,`blogID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `blog_tags` WRITE;


INSERT INTO `blog_tags` (`tagID`, `blogID`)
VALUES
	('046A899EE7A6EC88D370211A518C9E80','702e8d5e18c04964b4da8ec48be50409'),
	('0796F7F8B93AD1204D4769C52AFF5284','c088cee7075c4a70a8b87bf5ba0b3813'),
	('0A5A4153B8FAB8B735400132F35570CD','3ba1267bf2c245bf88c3fc66b2e09013'),
	('0FEA7C47D93DA5689F31820EE525B367','702e8d5e18c04964b4da8ec48be50409'),
	('0FEA7C47D93DA5689F31820EE525B367','c088cee7075c4a70a8b87bf5ba0b3813'),
	('0FEA7C47D93DA5689F31820EE525B367','cb7fdf7d43924bd198d86fa6208db44b'),
	('1','1ca3888bf494480a81db9f577e362d07'),
	('1573C74E227F14DED2DAA71BB049ECDA','f4864b922fb1492e91a83e79d491fa3d'),
	('190980C7D0218074702264D8DA6E31E1','5a823d3753b945e98696a83fe779bf3b'),
	('21D68B2DE0E91DFB14942CA8AEA316FC','33a05aaedd7e4fd4ae47e25c7359b940'),
	('235D7BE86290BD05B9985C8A5B3713FD','61c3f6282f3b480e88b0c33d36d22410'),
	('235D7BE86290BD05B9985C8A5B3713FD','7f45a62e0eac4061936477babeee37aa'),
	('235D7BE86290BD05B9985C8A5B3713FD','cb7fdf7d43924bd198d86fa6208db44b'),
	('235D7BE86290BD05B9985C8A5B3713FD','d8f415182fa84602a1e021a4937a22f7'),
	('267595728BEB6EE41DFC9C862917055D','093dcae887cd4904b2d244fcdca5473a'),
	('2E25C285356CBB0ED8785A1377027D79','bd9567a036794a97bb6ada54a362b37d'),
	('32981A13284DB7A021131DF49E6CD203','0205d4b6d0914715970da8ca41c2c0d6'),
	('32F7222026696F30787889194DEE83E5','093dcae887cd4904b2d244fcdca5473a'),
	('36b487f38d114b10ae793ff58cf952fb','1ca3888bf494480a81db9f577e362d07'),
	('46CFF7C2E22C5FB804C02D5B561B39F8','e045b65486664c67820ef9f7f4b81542'),
	('48B26E4419603D55F8128747CFEE5E92','54a2a725cc2c4860808a66d7082e52c4'),
	('49EDAB1CB53BA3CF77C6C3271196ACBB','f4864b922fb1492e91a83e79d491fa3d'),
	('5','1ca3888bf494480a81db9f577e362d07'),
	('5','9b07036e1c04405f997aafd301e32bf0'),
	('50c61d9e506248ae8ad00539a8603ea6','1ca3888bf494480a81db9f577e362d07'),
	('558D23A4DCECDFDBE69B2C8BB50560A9','3ba1267bf2c245bf88c3fc66b2e09013'),
	('58463BDA2FB934A0ABC9E9A02C012A41','c088cee7075c4a70a8b87bf5ba0b3813'),
	('5A85E5CECB477D06AD59A113A1F6AE2C','25e6009dc84e483293e30f8578be6382'),
	('5BC06F5800D415CC95E1349EDBACA425','5fb856efa680421ea2290276dd37045e'),
	('5FC71C1AEC7C1753FA3596E8DDAD3C4C','e045b65486664c67820ef9f7f4b81542'),
	('62A004B95946BB97541AFA471DCCA73A','359a42eec11c4fee9351a2891bf2afa9'),
	('62A004B95946BB97541AFA471DCCA73A','bd9567a036794a97bb6ada54a362b37d'),
	('63DB5605AC2D3A21F0ABD506C9531209','7f45a62e0eac4061936477babeee37aa'),
	('63DB5605AC2D3A21F0ABD506C9531209','d8f415182fa84602a1e021a4937a22f7'),
	('6499CC2E7CB3DAAF2861D054ECF54B87','495fa978801d418a9b6ed475c989eaa1'),
	('66C260D88C897E6C6353F6DB6EACC3BD','359a42eec11c4fee9351a2891bf2afa9'),
	('68051BF4AA2743B030984B694628EE9C','25e6009dc84e483293e30f8578be6382'),
	('684892549c6f4df88e147eb0c252dcb6','1ca3888bf494480a81db9f577e362d07'),
	('684892549c6f4df88e147eb0c252dcb6','9b07036e1c04405f997aafd301e32bf0'),
	('69F69B59AAE6F4EE1A47BBC1086ECDB4','e2de2c2fb832430687bffc4217dec1d7'),
	('6A620E3C07048291FDB26B6EDCEE7ABA','3ddd409dfc9344449dac3717ecc75f72'),
	('6DE9E0AFBA7328E44B19153A6733835C','3ba1267bf2c245bf88c3fc66b2e09013'),
	('724874D1BE77F450A09B305FC1534AFB','b79881401ed843f49becf79d92dd372d'),
	('7898814832f34d91b9ed45eed7049837','1ca3888bf494480a81db9f577e362d07'),
	('7DDBE15C845FA27A2BAB496183042CA6','7f45a62e0eac4061936477babeee37aa'),
	('8178AD6FD9FE5CEEB9D3AA702AD45403','3ba1267bf2c245bf88c3fc66b2e09013'),
	('88EAEC4C7BC4EC29AFA783666D0B53BC','f584b7d7774b437a87290a072dfb9a02'),
	('8936F53B23E9DFE2965D9E2EC23A4779','54a2a725cc2c4860808a66d7082e52c4'),
	('912302CB020149C37F9642FBC9E42891','093dcae887cd4904b2d244fcdca5473a'),
	('93F725A07423FE1C889F448B33D21F46','0205d4b6d0914715970da8ca41c2c0d6'),
	('93F725A07423FE1C889F448B33D21F46','cb7fdf7d43924bd198d86fa6208db44b'),
	('9778840A0100CB30C982876741B0B5A2','359a42eec11c4fee9351a2891bf2afa9'),
	('9ABFE4A03928EB88A75A5CD95822DFEF','5fb856efa680421ea2290276dd37045e'),
	('9D0F8F6F657186A8F0F18F1EA92D1C95','f4864b922fb1492e91a83e79d491fa3d'),
	('A5C5D0DC90CCF0733D65742D59D28CCC','00e05640cb9a4cef9ec0c355b4c4cd8c'),
	('a838b3281b5f471e8fe85aeae0eb0330','9b07036e1c04405f997aafd301e32bf0'),
	('AFAEF14EBCFFDF11EF0A5D3E61B50866','495fa978801d418a9b6ed475c989eaa1'),
	('B6747DD73070743AE1F68AD64A80E873','33a05aaedd7e4fd4ae47e25c7359b940'),
	('BEE912D79EEFB7335988C4997AA9138D','359a42eec11c4fee9351a2891bf2afa9'),
	('C50D13646EC66F1929DA5D491F2DFF0F','093dcae887cd4904b2d244fcdca5473a'),
	('C50D13646EC66F1929DA5D491F2DFF0F','5a823d3753b945e98696a83fe779bf3b'),
	('C72EC5AF9F5EC0DE360EC126CDA41672','f4864b922fb1492e91a83e79d491fa3d'),
	('C7A628CBA22E28EB17B5F5C6AE2A266A','0205d4b6d0914715970da8ca41c2c0d6'),
	('CCF','495fa978801d418a9b6ed475c989eaa1'),
	('CCF','7f45a62e0eac4061936477babeee37aa'),
	('CCF','cb7fdf7d43924bd198d86fa6208db44b'),
	('CCF','d8f415182fa84602a1e021a4937a22f7'),
	('CF3882F1C43AB22BFF0BD9D82D83251B','e2de2c2fb832430687bffc4217dec1d7'),
	('CF4F2BADD0AED460A7C0758AE4EC4874','3ba1267bf2c245bf88c3fc66b2e09013'),
	('css','0205d4b6d0914715970da8ca41c2c0d6'),
	('D276123C8BF8DABF3AE03A2A571ACD43','3ddd409dfc9344449dac3717ecc75f72'),
	('D3B7C913CD04EBFEC0E9EC32CB6FD58C','5a823d3753b945e98696a83fe779bf3b'),
	('D52387880E1EA22817A72D3759213819','00e05640cb9a4cef9ec0c355b4c4cd8c'),
	('D52387880E1EA22817A72D3759213819','3ddd409dfc9344449dac3717ecc75f72'),
	('D52387880E1EA22817A72D3759213819','e045b65486664c67820ef9f7f4b81542'),
	('D52387880E1EA22817A72D3759213819','e2de2c2fb832430687bffc4217dec1d7'),
	('D95200B7462824DA8D5C86DF1D944D7D','33a05aaedd7e4fd4ae47e25c7359b940'),
	('DA9B26CFD7DE4FB79CABBDBC8FA05F61','d8f415182fa84602a1e021a4937a22f7'),
	('DD29E7545EB8E590333BF6705D45BD71','5a823d3753b945e98696a83fe779bf3b'),
	('E0407C4DA384781218D7D89D043BA67B','61c3f6282f3b480e88b0c33d36d22410'),
	('E206A54E97690CCE50CC872DD70EE896','b79881401ed843f49becf79d92dd372d'),
	('e686c30979dd452f98a59a53f4d8487c','1ca3888bf494480a81db9f577e362d07'),
	('F88522CF1B8A99E869EE231AC97BBC86','3ddd409dfc9344449dac3717ecc75f72'),
	('FC35FDC70D5FC69D269883A822C7A53E','0205d4b6d0914715970da8ca41c2c0d6'),
	('html','0205d4b6d0914715970da8ca41c2c0d6'),
	('java','0205d4b6d0914715970da8ca41c2c0d6'),
	('js','0205d4b6d0914715970da8ca41c2c0d6');


UNLOCK TABLES;




CREATE TABLE `category` (
  `id` char(32) NOT NULL,
  `name` varchar(50) NOT NULL,
  `cdate` datetime DEFAULT NULL,
  `typeID` int(11) DEFAULT '1',
  `keywords` varchar(50) DEFAULT '',
  `blogNum` int(11) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `category` WRITE;


INSERT INTO `category` (`id`, `name`, `cdate`, `typeID`, `keywords`, `blogNum`)
VALUES
	('0deaf97437264ce69eac4f70cf8cb8f1','CCF','2017-02-13 23:32:29',6,'',6),
	('178ebabf0fa54c73b5a42264455c1c1d','Layui','2017-02-07 12:00:00',1,'',0),
	('17966703da9a4f9c8f5726e07a44b4c5','求职','2017-03-10 19:29:37',3,'',1),
	('18f3adde58d0497393f35e653b95aff8','Web开发','2017-02-15 14:33:29',1,'',2),
	('2c4a47850cff4955b9a1c6b09b17ea2f','LeetCode','2017-02-14 17:03:41',6,'',0),
	('330f029b812441db9bffa936f702071f','MySQL','2017-02-07 12:00:00',1,'',2),
	('37a822efa50140e88b78ae35e8e13b4f','随笔','2017-09-11 14:48:07',2,'随笔',2),
	('4','数据库','2017-02-07 12:00:00',1,'',1),
	('415f7f76f72c447290b3931af488374a','CSS','2017-02-07 12:00:00',1,'',0),
	('46850e2a0cfd40e1993ce825f4340f91','机器学习','2017-02-07 12:00:00',1,'数据挖掘',1),
	('6','Android','2017-02-07 12:00:00',1,'',0),
	('8a1aeb3e96dd48b7873d9100062cd8d6','Linux','2017-02-07 12:00:00',1,'',1),
	('8c1d8fe2a03d4a0688072f95fd6d8f68','数据结构','2017-02-18 21:23:13',1,'',1),
	('8dfb5b72bc69437c8cbc87594c47ea20','前端','2017-02-07 12:00:00',1,'',1),
	('94c47580980144ecbd3d5f3984a02087','剑指Offer','2017-02-20 21:33:49',6,'',2),
	('aab2e1cb0e4148c4b081df9940c2800a','Java','2017-02-07 12:00:00',1,'',4),
	('adc1e0953e324138b9ed6b0603a69373','Git','2017-02-07 12:00:00',1,'',0),
	('ce447e247965481baac6ea8745e49e43','Redis','2017-02-07 12:00:00',1,'',0),
	('e686c30979dd452f98a59a53f4d8487c','Python','2017-02-07 12:00:00',1,'',0);


UNLOCK TABLES;




CREATE TABLE `comment` (
  `id` char(32) NOT NULL,
  `nickname` varchar(20) NOT NULL,
  `email` varchar(50) NOT NULL,
  `content` text NOT NULL,
  `cdate` datetime NOT NULL,
  `likeNum` int(11) NOT NULL DEFAULT '0',
  `hateNum` int(11) NOT NULL DEFAULT '0',
  `parent` char(32) DEFAULT NULL,
  `blogID` char(32) NOT NULL,
  `shareNum` int(11) NOT NULL DEFAULT '0',
  `replyNum` int(11) NOT NULL DEFAULT '0',
  `headURL` varchar(100) DEFAULT NULL,
  `check` int(11) DEFAULT '0' COMMENT '是否审核，0表示未审核，1表示审核',
  `status` int(11) DEFAULT '1' COMMENT '是否合法，0未通过，1通过',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

LOCK TABLES `comment` WRITE;


INSERT INTO `comment` (`id`, `nickname`, `email`, `content`, `cdate`, `likeNum`, `hateNum`, `parent`, `blogID`, `shareNum`, `replyNum`, `headURL`, `check`, `status`)
VALUES
	('0162f1f25337462a9897488c18f21e07','胡建洪','1043244432@qq.com','<a href=\"javascript:;\" class=\"qing-comment-aite\">@胡建洪</a> <img alt=\"[围观]\" title=\"[围观]\" src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/f2/wg_thumb.gif\"> ','2017-02-13 17:40:06',0,0,'14e0efeef2c1430faae70629982797ea','qingcailuobo-msg-cmt',0,0,'author.jpg',1,0),
	('0299eb279917427cbcc59db11e853899','胡建洪','1043244432@qq.com','<a href=\"javascript:;\" class=\"qing-comment-aite\">@羊皮卷网</a> 没问题啊','2017-06-08 15:03:47',0,0,'1194597f59974786862a06bb722f46d0','bd9567a036794a97bb6ada54a362b37d',0,0,'author.jpg',1,1),
	('04728bffe10d4af29b2b598ef28a49ea','笨小孩','1391936847@qq.com','博主莫急，知己在前路','2017-03-15 23:55:25',1,0,'','f4864b922fb1492e91a83e79d491fa3d',0,0,'16.gif',0,1),
	('0480ae6e03ab4ad4b606101203c5d92b','李大宝','1Q@qq.com','<a href=\"javascript:;\" class=\"qing-comment-aite\">@SillyBoy</a> test','2017-02-13 17:44:36',1,1,'','cb7fdf7d43924bd198d86fa6208db44b',0,0,'57.gif',1,1),
	('05df9a4e6d9c407dab31890545698163','胡建洪','1043244432@qq.com','<pre>.qing-comment-no {<br>	margin-top: 1rem;<br>    border: 1px solid #B0E0F9;<br>    height: 10rem;<br>    background: #f8f8f8;<br>    text-align: center;<br>}<br></pre>测试代码功能段','2017-02-11 14:25:46',0,0,'','qingcailuobo-msg-cmt',0,0,'36.gif',1,0),
	('0668e9b15d414d68a8744c7b1d546d39','123','1310228145@qq.com','sdsd','2017-02-08 15:21:38',1,0,NULL,'qingcailuobo-msg-cmt',0,0,'50.gif',1,1),
	('07019924e60441cdaa5de4c166c30a66','huahua','huadi916@gmail.com','咦，是呢！喜欢按键可以无限点。','2017-04-10 11:09:49',0,0,'','f4864b922fb1492e91a83e79d491fa3d',0,0,'70.gif',0,1),
	('099b1227eb734183a1c1e98e1012e43f','胡格子','1017877487@qq.com','博主，喜欢功能有bug，未登录可以无限点','2017-03-13 13:28:20',2,0,'','f4864b922fb1492e91a83e79d491fa3d',0,0,'65.gif',0,1),
	('09cd17dd2e084ba6952b9d50509aa94c','别人家的老公','gudankangti1987@126.com','方便发一份这个个人博客的mysql数据库给我吗？<br><br>gudankangti1987<a href=\"javascript:;\" class=\"qing-comment-aite\">@126.com</a>','2017-02-15 16:57:58',1,0,'','qingcailuobo-msg-cmt',0,0,'48.gif',1,1),
	('0ca1634dfcd84676947f80386541a3b4','123','123@qq.com','6666666!','2017-02-26 14:32:53',0,0,'','qingcailuobo-msg-cmt',0,0,'45.gif',1,1),
	('0e67948f38d04f99bade324c398774d1','胡建洪','1043244432@qq.com','<a href=\"javascript:;\" class=\"qing-comment-aite\">@keen</a> <img alt=\"[可爱]\" title=\"[可爱]\" src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/14/tza_thumb.gif\"> <img alt=\"[可爱]\" title=\"[可爱]\" src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/14/tza_thumb.gif\"> 谢谢啊','2017-02-16 09:42:35',1,0,'746ca5a04dce4d0fb33c456243886abc','qingcailuobo-msg-cmt',0,0,'author.jpg',1,1),
	('110bbe580c0a4c6fafd657c00a12de94','aa','zhouby@huanlvjinfu.com.cn','ds','2017-05-10 16:13:42',3,1,'','qingcailuobo-msg-cmt',0,0,'11.gif',0,1),
	('1186e465bb674164a0f9fffc2258bc1e','AA','aa@qq.com','AA','2017-03-07 17:05:07',1,0,'','f584b7d7774b437a87290a072dfb9a02',0,0,'15.gif',0,1),
	('1194597f59974786862a06bb722f46d0','羊皮卷网','v5pp@qq.com',' <a href=\"http://ypj5.com\" target=\"_blank\" rel=\"nofollow\">http://ypj5.com</a>  换链接吗？','2017-05-17 22:38:00',0,0,'','bd9567a036794a97bb6ada54a362b37d',0,0,'40.gif',0,1),
	('12b7abadba19408ca0f84b76e447da05','胡建洪','1043244432@qq.com','感谢胡同学于2017年02月09日赞助1.0元！','2017-02-09 13:48:15',9,1,NULL,'qingcailuo_donate_cmt',0,0,'author.jpg',1,1),
	('14e0efeef2c1430faae70629982797ea','胡建洪','1043244432@qq.com','ds<img alt=\"[亲亲]\" title=\"[亲亲]\" src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/8f/qq_thumb.gif\"> ','2017-02-13 17:36:44',0,0,'e96c604870a84768befe3fa6d63bdc8e','qingcailuobo-msg-cmt',0,0,'author.jpg',1,0),
	('1556e4bc958f45c9bd1daa6d8109d15e','胡建洪','1043244432@qq.com','@huige java','2017-02-10 14:35:09',0,0,'ad05798804b8489687dfe8d249170ffd','qingcailuobo-msg-cmt',0,0,'36.gif',1,1),
	('1a69ae4e50ad4d86b50b2c0c126a1fd3','CC','61562576@qq.com','第一次使用start这样来启动的，这个项目怎么部署在tomcat下？','2017-07-26 17:10:17',2,0,'','5a823d3753b945e98696a83fe779bf3b',0,0,'13.gif',0,1),
	('1be7c054f94f4ac7b893086a729ebdeb','asf','asf@163.com','<pre>sad<br></pre>','2017-09-23 17:43:47',1,0,'','qingcailuobo-msg-cmt',0,0,'67.gif',0,1),
	('1e3aebc056f14e53aa390a99caa955fe','7878','9002@qq.com','<a href=\"javascript:;\" class=\"qing-comment-aite\">@77</a> 777','2017-06-05 23:10:11',0,0,'e31df40e5b7543faa5d9d0789d168e71','f584b7d7774b437a87290a072dfb9a02',0,0,'62.gif',0,1),
	('224038e533164a7a9797d7713aa67fb8','ken','1069046590@qq.com','您好，我在添加文章时，显示的是静态化失败。请问怎么解决','2017-06-05 16:21:45',0,0,'','qingcailuobo-msg-cmt',0,0,'17.gif',0,1),
	('23c492ba08a34933aeeee5e9554e1799','从V型从','qweq@qq.com','22222','2017-04-24 17:42:52',1,2,'','qingcailuobo-msg-cmt',0,0,'65.gif',0,1),
	('2829d10c521944149e12e7e35f548498','落叶无声','1015966457@qq.com','<img alt=\"[偷笑]\" title=\"[偷笑]\" src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/19/heia_thumb.gif\"> 做的真不错','2017-06-20 22:55:49',7,0,'','qingcailuobo-msg-cmt',0,0,'73.gif',0,1),
	('296b76a8de5949e095eb56f784762c23','胡建洪','1043244432@qq.com','<a href=\"javascript:;\" class=\"qing-comment-aite\">@别人家的老公</a> 已经发送到您的邮箱了，其中有几张表是无用的！','2017-02-15 19:55:47',0,0,'09cd17dd2e084ba6952b9d50509aa94c','qingcailuobo-msg-cmt',0,0,'author.jpg',1,1),
	('2edb017060094360a86cc1ad357df660','胡建洪','1043244432@qq.com','<a href=\"javascript:;\" class=\"qing-comment-aite\">@别人家的老公</a> 好的，我待会儿发给你<img alt=\"[微笑]\" title=\"[微笑]\" src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/5c/huanglianwx_thumb.gif\"> ','2017-02-15 19:31:42',0,0,'09cd17dd2e084ba6952b9d50509aa94c','qingcailuobo-msg-cmt',0,0,'author.jpg',1,1),
	('31408bf668764385a00263ff64594c06','1=1&#39;','1@sh.sh','&lt;x&gt;&#39;1=1','2017-03-31 23:21:29',6,2,'','qingcailuobo-msg-cmt',0,0,'33.gif',0,1),
	('326c7a85fc824fafa6d170c3332aa202','你好','123asdf@163.com','不错','2017-02-16 21:31:52',1,1,'','qingcailuobo-msg-cmt',0,0,'21.gif',1,1),
	('353e8c0fcedf4e19bd053225bbf2d70c','a','b@123.com','<pre>#include &lt;stdio.h&gt;<br>int main(){<br>     a=1;<br><br>}<br></pre>','2017-03-05 15:20:51',0,0,'','359a42eec11c4fee9351a2891bf2afa9',0,0,'53.gif',1,1),
	('375aff6d177248ed93137d346634c642','朗若','104324432@qq.com','虽然没看懂，但是还是Mark一下！','2017-09-05 22:18:31',0,0,'','5fb856efa680421ea2290276dd37045e',0,0,'62.gif',0,1),
	('39a87206b36340329feb4ae711656fb7','木槿心','13770733135@163.com','博主加油，祝好运','2017-03-10 19:41:40',1,0,'','f4864b922fb1492e91a83e79d491fa3d',0,0,'31.gif',0,1),
	('3ab39d7e1e63411fae1d810c89ae493e','我牛','luojie@yydrobot.com','参观学习','2017-07-01 15:43:37',0,0,'','c088cee7075c4a70a8b87bf5ba0b3813',0,0,'55.gif',0,1),
	('3efbd06b6e0b434bac70def3338f4275','123','12312@qq.com','评论为什么这么慢？','2017-02-20 16:51:19',0,0,'','3ba1267bf2c245bf88c3fc66b2e09013',0,0,'70.gif',1,0),
	('4053f103aec145dab55c674e72ee5564','第三方','111@12.com','手上的撒大','2017-02-21 20:43:28',1,1,'','c088cee7075c4a70a8b87bf5ba0b3813',0,0,'57.gif',1,1),
	('41e28bd09f7147c2ac39b85068ee536a','饺子','941192051@qq.com','<img alt=\"[太开心]\" title=\"[太开心]\" src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/58/mb_thumb.gif\"> ','2017-03-24 15:57:45',0,2,'','qingcailuobo-msg-cmt',0,0,'9.gif',0,1),
	('4265ff3f3a4b48c8b0060d5bce7ea7ea','6666','66@6.com','<pre>&lt;h1&gt;6666666&lt;/h1&gt;<br></pre>','2017-05-10 21:01:52',0,0,'','bd9567a036794a97bb6ada54a362b37d',0,0,'23.gif',0,1),
	('43e302db33de46398e7966014519e6e4','不知道','11@123.com','今天生产资料不在，上网很不方便，只能来你这里玩玩了','2017-07-26 15:10:11',0,0,'','qingcailuobo-msg-cmt',0,0,'53.gif',0,1),
	('441aa4dd308643879e99d528b11459dc','2ysp','1123804727@qq.com','厉害啊，感觉我就做不出来','2017-07-20 16:44:46',0,0,'','qingcailuobo-msg-cmt',0,0,'50.gif',0,1),
	('44627966c0964883b26aa1056055240a','nihao','1310229149@qq.com','12dsadface[可怜] ','2017-02-08 15:34:21',0,0,NULL,'qingcailuobo-msg-cmt',0,0,'23.gif',1,1),
	('44680c2fc33d496e82bf12d756a56cf8','SillyBoy','1043244432@qq.com','<img alt=\"[右哼哼]\" title=\"[右哼哼]\" src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/98/yhh_thumb.gif\"> ','2017-02-13 11:12:35',0,0,'','qingcailuobo-msg-cmt',0,0,'author.jpg',1,1),
	('44a447607b59408c8f29062d4c13d5bc','seck','504038236@qq.com','怎么 后台 提交 文章 就出现“请求异常，请 重试”  求 博主 测试一下','2017-06-09 16:28:32',1,1,'','093dcae887cd4904b2d244fcdca5473a',0,0,'22.gif',0,1),
	('454e7a085c704b8e96672133420d2f7d','hujiang@163.com','hujiang@163.com','[pre]\npublic static void listFiles(File file){\n		if(file.isDirectory()){\n			File[] file2 = file.listFiles();\n			for(File file3 : file2){\n				if(file3.isDirectory()){\n					listFiles(file3);\n				} else {\n					String path = file3.getAbsolutePath();\n					upload(path, sub(path), token);\n				}\n			}\n		} else {\n			String path = file.getAbsolutePath();\n			upload(path, sub(path), token);\n		}\n	}\n[/pre]','2017-02-08 16:07:16',0,0,NULL,'495fa978801d418a9b6ed475c989eaa1',0,0,'47.gif',1,1),
	('479d618d3f8541cf814f7d54405091c9','huige','935178577@qq.com','你好你的后台是用java还是php?\n','2017-02-10 11:03:11',0,0,'','qingcailuobo-msg-cmt',0,0,'71.gif',1,1),
	('47e8e53da6db439ca9c54c23e05ee580','qwrqweq','wrqwrqwr@qq.com','<a href=\"javascript:;\" class=\"qing-comment-aite\">@，、，、，、；买了么，。吗</a> weqwe','2017-03-22 17:27:59',0,1,'bcb00802580d4f47aa41775d4cdca379','qingcailuobo-msg-cmt',0,0,'4.gif',0,1),
	('48060bce590242648c986484df74e83c','`','11@qq.com','dasd','2017-06-17 16:15:32',0,0,'','359a42eec11c4fee9351a2891bf2afa9',0,0,'5.gif',0,1),
	('482eee976d1f4891a01180d0b7d20055','SillyBoy','123435@163.com','不错，face[嘻嘻] ','2017-02-08 16:44:10',3,2,NULL,'cb7fdf7d43924bd198d86fa6208db44b',0,0,'41.gif',1,1),
	('4b3172c1184a4b6eb74d65290b8b84af','背影','1234@163.com','世界很大，人生很长','2017-04-24 15:57:19',1,1,'','qingcailuobo-msg-cmt',0,0,'47.gif',0,1),
	('4b4c5f066d37464ab6ef3eddd12f89ff','胡建洪','1043244432@qq.com','<a href=\"javascript:;\" class=\"qing-comment-aite\">@ken</a> 这个需要看下后台报什么错误了','2017-06-08 15:03:33',2,0,'224038e533164a7a9797d7713aa67fb8','qingcailuobo-msg-cmt',0,0,'author.jpg',1,1),
	('4b63da68f1d94d2886a8358c252955b1','Jiayang','Chen.Jiayang@foxmail.com','干货很多，网站吼吼看！！！','2017-08-29 16:38:20',1,0,'','qingcailuobo-msg-cmt',0,0,'18.gif',0,1),
	('4b89b41590164466964337c22935ab25','tt','y@shit.com','[pre]\ny y y y\n[/pre]','2017-02-10 02:14:08',0,0,'','qingcailuobo-msg-cmt',0,0,'16.gif',1,1),
	('4cbc999f61594e20b9b9633943712ea6','胡建洪','1043244432@qq.com','<a href=\"javascript:;\" class=\"qing-comment-aite\">@没有的别想了</a> 还行吧，谢谢支持啊<img alt=\"[微笑]\" title=\"[微笑]\" src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/5c/huanglianwx_thumb.gif\">','2017-02-19 09:29:19',1,1,'8b486897be9d49e5ae514cb170d46880','e045b65486664c67820ef9f7f4b81542',0,0,'author.jpg',1,1),
	('4d5a623462f24fa283e055965de3e86d','Jackylin','52686675@qq.com','我也用Jfinal 开发了一个 个人博客，发现jfinal不错，不过在前端渲染数据方面我用的vue.js<br>不知道你是如何做的<br>博客是否有源码研究研究<br><img alt=\"[微笑]\" title=\"[微笑]\" src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/5c/huanglianwx_thumb.gif\"> <br><br>还有表情选择有点样式问题~~~','2017-02-15 22:36:46',4,0,'','5a823d3753b945e98696a83fe779bf3b',0,0,'28.gif',1,1),
	('4e8d7ca972e746bca258cde884777d23','张航','zhanghang@qq.com','face[心] face[鼓掌] face[good] ','2017-02-09 21:11:41',0,0,'','9b07036e1c04405f997aafd301e32bf0',0,0,'23.gif',1,1),
	('5111391a9c2b4f9cb93c7dab0764e0ff','sampson','dkynjust@foxmail.com','不错，不错！','2017-02-20 18:37:08',0,0,'','5a823d3753b945e98696a83fe779bf3b',0,0,'21.gif',1,1),
	('54b68f56154c40718daecffd6c0c2125','aa','aa@a.com','<a href=\"javascript:;\" class=\"qing-comment-aite\">@AA</a> <a href=\"javascript:;\" class=\"qing-comment-aite\">@123</a> aaa','2017-03-07 17:07:28',0,0,'1186e465bb674164a0f9fffc2258bc1e','f584b7d7774b437a87290a072dfb9a02',0,0,'14.gif',0,1),
	('598031d1686d4cb59eadbbe8ffd984a0','123123','123123@qq.com','<pre>/**<br> * Copyright (c) 2015, 玛雅牛［李飞］ (lifei<a href=\"javascript:;\" class=\"qing-comment-aite\">@wellbole.com).</a><br> *<br> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br> * you may not use this file except in compliance with the License.<br> * You may obtain a copy of the License at<br> *<br> *      http://www.apache.org/licenses/LICENSE-2.0<br> *<br> * Unless required by applicable law or agreed to in writing, software<br> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br> * See the License for the specific language governing permissions and<br> * limitations under the License.<br> */<br>package com.jfinal.plugin.scheduler;<br><br>import java.util.HashMap;<br>import java.util.Map;<br>import java.util.Set;<br>import java.util.concurrent.ScheduledFuture;<br>import java.util.concurrent.ScheduledThreadPoolExecutor;<br>import java.util.concurrent.TimeUnit;<br><br>import com.jfinal.kit.Prop;<br>import com.jfinal.kit.PropKit;<br>import com.jfinal.kit.StrKit;<br>import com.jfinal.log.Log;<br>import com.jfinal.plugin.IPlugin;<br><br>import it.sauronsoftware.cron4j.Scheduler;<br><br>/**<br> * <a href=\"javascript:;\" class=\"qing-comment-aite\">@ClassName:</a> SchedulerPlugin<br> * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Description:</a> 简单任务调度插件，整合了cron4j和ScheduledThreadPoolExecutor<br> * <a href=\"javascript:;\" class=\"qing-comment-aite\">@author</a> 李飞 (lifei<a href=\"javascript:;\" class=\"qing-comment-aite\">@wellbole.com)</a><br> * <a href=\"javascript:;\" class=\"qing-comment-aite\">@date</a> 2015年8月1日 下午10:01:37<br> * <a href=\"javascript:;\" class=\"qing-comment-aite\">@since</a> V1.0.0<br> */<br>public class SchedulerPlugin implements IPlugin {<br><br>	private static Log LOG = Log.getLog(&quot;SchedulerPlugin&quot;);<br><br>	/**<br>	 * cron调度器<br>	 */<br>	private final Scheduler cronScheduler = new Scheduler();<br><br>	/**<br>	 * ScheduledThreadPoolExecutor调度器<br>	 */<br>	private final ScheduledThreadPoolExecutor taskScheduler;<br><br>	/**<br>	 * 调度任务配置文件<br>	 */<br>	private final String jobConfigFile;<br><br>	/**<br>	 * &lt;p&gt;<br>	 * Title: SchedulerPlugin<br>	 * &lt;/p&gt;<br>	 * &lt;p&gt;<br>	 * Description: 构造函数(线程池依据系统核心数自动设定)<br>	 * &lt;/p&gt;<br>	 * <br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@since</a> V1.0.0<br>	 */<br>	public SchedulerPlugin() {<br>		this(getBestPoolSize(), null);<br>	}<br><br>	/**<br>	 * &lt;p&gt;<br>	 * Title: SchedulerPlugin<br>	 * &lt;/p&gt;<br>	 * &lt;p&gt;<br>	 * Description: 构造函数(指定调度线程池大小)<br>	 * &lt;/p&gt;<br>	 * <br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> scheduledThreadPoolSize<br>	 *            调度线程池大小<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@since</a> V1.3.0<br>	 */<br>	public SchedulerPlugin(int scheduledThreadPoolSize) {<br>		this(scheduledThreadPoolSize, null);<br>	}<br><br>	/**<br>	 * &lt;p&gt;<br>	 * Title: SchedulerPlugin<br>	 * &lt;/p&gt;<br>	 * &lt;p&gt;<br>	 * Description: 构造函数(指定调度任务配置文件，线程池依据系统核心数自动设定)<br>	 * &lt;/p&gt;<br>	 * <br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> jobConfigFile<br>	 *            调度任务配置文件<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@since</a> V1.0.0<br>	 */<br>	public SchedulerPlugin(String jobConfigFile) {<br>		this(getBestPoolSize(), jobConfigFile);<br>	}<br><br>	/**<br>	 * &lt;p&gt;<br>	 * Title: SchedulerPlugin<br>	 * &lt;/p&gt;<br>	 * &lt;p&gt;<br>	 * Description: 构造函数(指定调度线程池大小和调度任务配置文件)<br>	 * &lt;/p&gt;<br>	 * <br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> scheduledThreadPoolSize<br>	 *            调度线程池大小<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> jobConfigFile<br>	 *            调度任务配置文件<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@since</a> V1.3.0<br>	 */<br>	public SchedulerPlugin(int scheduledThreadPoolSize, String jobConfigFile) {<br>		this.jobConfigFile = jobConfigFile;<br>		this.taskScheduler = new ScheduledThreadPoolExecutor(scheduledThreadPoolSize);<br>	}<br><br>	/**<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Title:</a> cronSchedule<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Description:</a> 添加基于Linux下的crontab表达式的调度任务(Runnable)<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> task<br>	 *            定期执行的任务(Runnable)<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> cronExpression<br>	 *            cron调度表达式<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@since</a> V1.0.0<br>	 */<br>	public void cronSchedule(Runnable task, String cronExpression) {<br>		this.cronScheduler.schedule(cronExpression, task);<br>	}<br><br>	/**<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Title:</a> fixedRateSchedule<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Description:</a> 立即启动，并以固定的频率来运行任务。后续任务的启动时间不受前次任务延时影响（并行）。<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> task<br>	 *            定期执行的任务<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> periodSeconds<br>	 *            每次执行任务的间隔时间(单位秒)<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@return</a><br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@since</a> V1.0.0<br>	 */<br>	public ScheduledFuture&lt;?&gt; fixedRateSchedule(Runnable task, int periodSeconds) {<br>		return taskScheduler.scheduleAtFixedRate(task, 0, periodSeconds, TimeUnit.SECONDS);<br>	}<br><br>	/**<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Title:</a> fixedDelaySchedule<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Description:</a> 立即启动，两次任务间保持固定的时间间隔(任务串行执行，前一个结束之后间隔固定时间后一个才会启动)<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> task<br>	 *            定期执行的任务<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> periodSeconds<br>	 *            每次执行任务的间隔时间(单位秒)<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@return</a><br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@since</a> V1.0.0<br>	 */<br>	public ScheduledFuture&lt;?&gt; fixedDelaySchedule(Runnable task, int periodSeconds) {<br>		return taskScheduler.scheduleWithFixedDelay(task, 0, periodSeconds, TimeUnit.SECONDS);<br>	}<br><br>	<a href=\"javascript:;\" class=\"qing-comment-aite\">@Override</a><br>	public boolean start() {<br>		if (this.jobConfigFile != null) {<br>			// 任务配置文件非空,从配置文件汇总加载任务<br>			loadJobsFromConfigFile();<br>		}<br>		this.cronScheduler.setDaemon(true);<br>		this.cronScheduler.start();<br>		LOG.info(&quot;SchedulerPlugin is started&quot;);<br>		return true;<br>	}<br><br>	<a href=\"javascript:;\" class=\"qing-comment-aite\">@Override</a><br>	public boolean stop() {<br>		this.cronScheduler.stop();<br>		this.taskScheduler.shutdown();<br>		LOG.info(&quot;SchedulerPlugin is stopped&quot;);<br>		return true;<br>	}<br><br>	/**<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Title:</a> loadJobsFromConfigFile<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Description:</a> 从配置文件汇总加载任务<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@since</a> V1.0.0<br>	 */<br>	private void loadJobsFromConfigFile() {<br>		// 获取job配置文件<br>		Prop jobProp = PropKit.use(this.jobConfigFile);<br>		// 获得所有任务名<br>		Set&lt;String&gt; jobNames = this.getJobNamesFromProp(jobProp);<br>		// 逐个加载任务<br>		for (String jobName : jobNames) {<br>			loadJob(jobProp, jobName);<br>		}<br>	}<br><br>	/**<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Title:</a> loadJob<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Description:</a> 加载一个任务<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> jobProp<br>	 *            job配置<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> jobName<br>	 *            job名<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@since</a> V1.0.0<br>	 */<br>	private void loadJob(Prop jobProp, String jobName) {<br>		// 任务开关，默认开启<br>		Boolean enable = jobProp.getBoolean(jobName + &quot;.enable&quot;, Boolean.TRUE);<br>		// 任务被禁用，直接返回<br>		if (!enable) {<br>			return;<br>		}<br>		// 创建要执行的任务<br>		Runnable task = createTask(jobName, jobProp.get(jobName + &quot;.class&quot;));<br>		// 任务类型<br>		String taskType = jobProp.get(jobName + &quot;.type&quot;);<br>		if (StrKit.isBlank(taskType)) {<br>			throw new RuntimeException(&quot;Please set &quot; + jobName + &quot;.type&quot;);<br>		}<br>		// 任务表达式<br>		String expr = jobProp.get(jobName + &quot;.expr&quot;);<br>		if (StrKit.isBlank(expr)) {<br>			throw new RuntimeException(&quot;Please set &quot; + jobName + &quot;.expr&quot;);<br>		}<br>		// 依据任务类型，开始调度任务<br>		scheduleJobByType(jobName, taskType, expr, task);<br>		LOG.info(&quot;--------load job: &quot; + jobName + &quot; successfully--------&quot;);<br>		LOG.info(&quot;class: &quot; + jobProp.get(jobName + &quot;.class&quot;));<br>		LOG.info(&quot;type : &quot; + taskType);<br>		LOG.info(&quot;expr : &quot; + expr);<br>		LOG.info(&quot;----------------&quot;);<br>	}<br><br>	/**<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Title:</a> scheduleJobByType<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Description:</a> 依据任务类型，开始调度任务<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> jobName<br>	 *            任务名<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> taskType<br>	 *            任务类型<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> expr<br>	 *            调度表达式<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> task<br>	 *            执行的任务<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@since</a> V1.0.0<br>	 */<br>	private void scheduleJobByType(String jobName, String taskType, String expr, Runnable task) {<br>		if (&quot;cron&quot;.equals(taskType)) {<br>			this.cronSchedule(task, expr);<br>		} else if (&quot;fixedRate&quot;.equals(taskType)) {<br>			int periodSeconds = 0;<br>			try {<br>				periodSeconds = Integer.parseInt(expr);<br>			} catch (NumberFormatException e) {<br>				throw new RuntimeException(jobName + &quot;.expr must be a number&quot;);<br>			}<br>			this.fixedRateSchedule(task, periodSeconds);<br>		} else if (&quot;fixedDelay&quot;.equals(taskType)) {<br>			int periodSeconds = 0;<br>			try {<br>				periodSeconds = Integer.parseInt(expr);<br>			} catch (NumberFormatException e) {<br>				throw new RuntimeException(jobName + &quot;.expr must be a number&quot;);<br>			}<br>			this.fixedDelaySchedule(task, periodSeconds);<br>		} else {<br>			throw new RuntimeException(&quot;Please set &quot; + jobName + &quot;.type to cron/fixedRate/fixedDelay&quot;);<br>		}<br>	}<br><br>	/**<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Title:</a> createTask<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Description:</a> 创建任务<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> jobName<br>	 *            任务名<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> taskClassName<br>	 *            任务类名<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@return</a> Runnable对象<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@since</a> V1.0.0<br>	 */<br>	private Runnable createTask(String jobName, String taskClassName) {<br>		if (taskClassName == null) {<br>			throw new RuntimeException(&quot;Please set &quot; + jobName + &quot;.className&quot;);<br>		}<br><br>		Object temp = null;<br>		try {<br>			temp = Class.forName(taskClassName).newInstance();<br>		} catch (Exception e) {<br>			throw new RuntimeException(&quot;Can not create instance of class: &quot; + taskClassName, e);<br>		}<br><br>		Runnable task = null;<br>		if (temp instanceof Runnable) {<br>			task = (Runnable) temp;<br>		} else {<br>			throw new RuntimeException(&quot;Can not create instance of class: &quot; + taskClassName<br>					+ &quot;. this class must implements Runnable interface&quot;);<br>		}<br>		return task;<br>	}<br><br>	/**<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Title:</a> getJobNamesFromProp<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Description:</a> 获得所有任务名<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> jobProp<br>	 *            job配置<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@return</a> 任务名集合<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@since</a> V1.0.0<br>	 */<br>	private Set&lt;String&gt; getJobNamesFromProp(Prop jobProp) {<br>		Map&lt;String, Boolean&gt; jobNames = new HashMap&lt;String, Boolean&gt;();<br>		for (Object item : jobProp.getProperties().keySet()) {<br>			String fullKeyName = item.toString();<br>			// 获得job名<br>			String jobName = fullKeyName.substring(0, fullKeyName.indexOf(&quot;.&quot;));<br>			jobNames.put(jobName, Boolean.TRUE);<br>		}<br>		return jobNames.keySet();<br>	}<br><br>	/**<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Title:</a> getBestPoolSize<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Description:</a> 获得调度线程池大小<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@return</a><br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@since</a> V1.0.0<br>	 */<br>	private static int getBestPoolSize() {<br>		try {<br>			final int cores = Runtime.getRuntime().availableProcessors();<br>			// 每个核有8个调度线程<br>			return cores * 8;<br>		} catch (Throwable e) {<br>			return 8;<br>		}<br>	}<br>}<br></pre>','2017-02-20 16:51:50',0,0,'','3ba1267bf2c245bf88c3fc66b2e09013',0,0,'3.gif',1,0),
	('59abadca059742b8bf621000621c2d81','嘻嘻嘻','543532@qq.com','<img alt=\"[嘻嘻]\" title=\"[嘻嘻]\" src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/0b/tootha_thumb.gif\"> ','2017-06-20 16:25:12',0,0,'','5a823d3753b945e98696a83fe779bf3b',0,0,'61.gif',0,1),
	('5eb03f2a125b40dab4eb62e48805c57d','水水','123@123.com','<a href=\"javascript:;\" class=\"qing-comment-aite\">@一个小白</a> 功能更强，界面更好看，但是要熟悉IDEA','2017-02-22 15:27:09',0,0,'ac7800241e1b47e586ec3ae0cfecc2b8','093dcae887cd4904b2d244fcdca5473a',0,0,'49.gif',1,1),
	('61e001a2937c4e439f61c971ebc10b64','胡建洪','1043244432@qq.com','&lt;script&gt;alert(&#39;test&#39;);&lt;/script&gt;','2017-02-11 14:03:42',1,0,'','qingcailuobo-msg-cmt',0,0,'36.gif',1,1),
	('6572089d2f314dd182a744e028f3aa1b','sjyw','14241924@qq.com','666','2017-05-13 06:24:40',0,0,'','qingcailuobo-msg-cmt',0,0,'38.gif',0,1),
	('6633c29f8c8b421da6683136ab4489c7','什么东东','1281715978@qq.com','厉害了','2017-03-17 09:51:38',1,1,'','f4864b922fb1492e91a83e79d491fa3d',0,0,'26.gif',0,1),
	('6b9e681cbbe145abbe30ed6cd26ad846','654','654@qq.com','666','2017-08-17 12:39:42',0,0,'','3ddd409dfc9344449dac3717ecc75f72',0,0,'56.gif',0,1),
	('6ee6cfe290084c6191ff71c45abb6e47','好几个','w@163.com','我终于抢到沙发了，哈哈','2017-02-09 13:01:42',1,2,NULL,'1ca3888bf494480a81db9f577e362d07',0,0,'16.gif',1,1),
	('7236bd2e38e443c5adb7bca77d0d8ce5','羊皮卷网','374949633@qq.com',' 我的网站也是jfinal做得，交换连接不？<a href=\"http://ypj5.com\" target=\"_blank\" rel=\"nofollow\">http://ypj5.com</a> ','2017-05-12 20:05:05',0,0,'','qingcailuobo-msg-cmt',0,0,'49.gif',0,1),
	('7352ee4845164cb894d9eefb4bc9f12e','黎明','1111@qq.com','<a href=\"javascript:;\" class=\"qing-comment-aite\">@胡建洪</a> 博主这是成功防止脚本攻击了吗face[哈哈] ','2017-02-11 14:05:05',1,0,'a4c5ba7c3a204091947ac196dc0f8df1','qingcailuobo-msg-cmt',0,0,'29.gif',1,1),
	('74517bf2067a4f9a9c01153bbcced1a0','test','test@qq.com','face[睡] ','2017-02-06 13:44:29',0,1,NULL,'qingcailuobo-msg-cmt',0,0,'25.gif',1,1),
	('746ca5a04dce4d0fb33c456243886abc','keen','liukehenu@163.com','不错，支持下<img alt=\"[嘻嘻]\" title=\"[嘻嘻]\" src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/0b/tootha_thumb.gif\"> ','2017-02-16 09:21:07',0,0,'','qingcailuobo-msg-cmt',0,0,'5.gif',1,1),
	('76d61f333e114b2099c563d448335ce6','大大','32156@qq.com','<img alt=\"[微笑]\" title=\"[微笑]\" src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/5c/huanglianwx_thumb.gif\"> ','2017-03-14 16:16:06',1,1,'','qingcailuobo-msg-cmt',0,0,'14.gif',0,1),
	('7bcbf387f7634870838a0d121b2768bb','小木鱼','547857825@qq.com','这个留言墙怎么做的？是无限级的回复吗','2017-07-07 10:02:11',0,0,'','qingcailuobo-msg-cmt',0,0,'16.gif',0,1),
	('7e10601e12454c67bcac754b6069f023','11','11@q.com','按时送达·','2017-05-30 16:28:42',0,0,'','e045b65486664c67820ef9f7f4b81542',0,0,'64.gif',0,1),
	('7e9a7a91fc0c4e6985d2044edf6208b8','黎明','1043244432@qq.com','<a href=\"javascript:;\" class=\"qing-comment-aite\">@胡建洪</a> 伤心<img alt=\"[泪]\" title=\"[泪]\" src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/9d/sada_thumb.gif\"> ','2017-02-11 14:14:04',0,0,'e5aa2f373a4d4dada06aad0772127a0d','qingcailuobo-msg-cmt',0,0,'36.gif',1,1),
	('7fafe13b6887459f9ceea59ac0119612','yjiang','yj@163.com','我的人都有','2017-03-03 12:07:03',2,0,'','e045b65486664c67820ef9f7f4b81542',0,0,'52.gif',1,1),
	('81cef627f7c041e790f772faf3462048','一问大师','2252538638@qq.com','<img alt=\"[心]\" title=\"[心]\" src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/40/hearta_thumb.gif\"> <img alt=\"[心]\" title=\"[心]\" src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/40/hearta_thumb.gif\"> ','2017-06-26 17:35:47',0,0,'','qingcailuobo-msg-cmt',0,0,'25.gif',0,1),
	('857b271c066a4fef817db06237407db4','ceshi','351402@qq.com','<pre>&lt;html&gt;<br>&lt;br&gt;<br>&lt;div&gt;<br>&lt;/div&gt;<br>&lt;/html&gt;<br></pre>','2017-03-05 22:24:24',0,0,'','qingcailuobo-msg-cmt',0,0,'36.gif',1,0),
	('85bc5d39155b4690b70a3c580a55cf13','补码','11@123.com','已知补码怎么求值','2017-07-26 15:31:04',1,1,'','qingcailuobo-msg-cmt',0,0,'53.gif',0,1),
	('8b486897be9d49e5ae514cb170d46880','没有的别想了','heichumei@sina.com','从jfinal社区过来的,楼主写得不错啊','2017-02-18 22:46:56',0,0,'','e045b65486664c67820ef9f7f4b81542',0,0,'19.gif',1,1),
	('8ce45bcf86c64924b9569d550d8ca5dd','dssss','ss@qq.com','sss','2017-02-23 17:35:59',0,1,'','qingcailuobo-msg-cmt',0,0,'3.gif',1,1),
	('8e439f6115214c8497b7047085235e8e','胡建洪','1043244432@qq.com','感谢萧碧无痕于2017年07月20日热心赞助10元','2017-07-20 10:26:09',4,0,NULL,'qingcailuo_donate_cmt',0,0,'author.jpg',1,1),
	('9189e9329408447aa7a794ec66c6a535','胡建洪','1043244432@qq.com','<a href=\"javascript:;\" class=\"qing-comment-aite\">@douma</a> 晚上我初步写个文档吧<img alt=\"[微笑]\" title=\"[微笑]\" src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/5c/huanglianwx_thumb.gif\"> ','2017-02-21 15:29:38',1,0,'f2fb3aef7d124db1b14079864902fab4','5a823d3753b945e98696a83fe779bf3b',0,0,'author.jpg',1,1),
	('92e4d4fa47f148f19f67cd4db9319844','胡建洪','1043244432@qq.com','<a href=\"javascript:;\" class=\"qing-comment-aite\">@绝尘</a> 好的，谢谢啊，晚上修改下','2017-02-27 13:35:20',3,2,'fc7d48959c10498b8af2097b6eee9b25','qingcailuobo-msg-cmt',0,0,'author.jpg',1,1),
	('92f488e19429428483037f04f28d4a9b','ceshi','351402@qq.com','<pre>&lt;html&gt;<br>&lt;br&gt;<br>&lt;div&gt;<br>&lt;/div&gt;<br>&lt;/html&gt;<br></pre>','2017-03-05 22:24:26',0,0,'','qingcailuobo-msg-cmt',0,0,'36.gif',1,0),
	('943f867fa5764a368923c4079e232c25','555','5555@qq.com','777777','2017-02-17 17:18:40',1,0,'','5a823d3753b945e98696a83fe779bf3b',0,0,'67.gif',1,1),
	('9508ed9173a94e629f23a38b3e6ad6d0','StruggleYang','172455319@qq.com','喜欢有bug，可以无限点','2017-03-14 14:24:07',2,1,'','f4864b922fb1492e91a83e79d491fa3d',0,0,'54.gif',0,1),
	('99fb24ffdc6b4fd797e3f71ba0be3e16','123123123','123123@qq.com','<pre>/**<br> * Copyright (c) 2015, 玛雅牛［李飞］ (lifei<a href=\"javascript:;\" class=\"qing-comment-aite\">@wellbole.com).</a><br> *<br> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br> * you may not use this file except in compliance with the License.<br> * You may obtain a copy of the License at<br> *<br> *      http://www.apache.org/licenses/LICENSE-2.0<br> *<br> * Unless required by applicable law or agreed to in writing, software<br> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br> * See the License for the specific language governing permissions and<br> * limitations under the License.<br> */<br>package com.jfinal.plugin.scheduler;<br><br>import java.util.HashMap;<br>import java.util.Map;<br>import java.util.Set;<br>import java.util.concurrent.ScheduledFuture;<br>import java.util.concurrent.ScheduledThreadPoolExecutor;<br>import java.util.concurrent.TimeUnit;<br><br>import com.jfinal.kit.Prop;<br>import com.jfinal.kit.PropKit;<br>import com.jfinal.kit.StrKit;<br>import com.jfinal.log.Log;<br>import com.jfinal.plugin.IPlugin;<br><br>import it.sauronsoftware.cron4j.Scheduler;<br><br>/**<br> * <a href=\"javascript:;\" class=\"qing-comment-aite\">@ClassName:</a> SchedulerPlugin<br> * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Description:</a> 简单任务调度插件，整合了cron4j和ScheduledThreadPoolExecutor<br> * <a href=\"javascript:;\" class=\"qing-comment-aite\">@author</a> 李飞 (lifei<a href=\"javascript:;\" class=\"qing-comment-aite\">@wellbole.com)</a><br> * <a href=\"javascript:;\" class=\"qing-comment-aite\">@date</a> 2015年8月1日 下午10:01:37<br> * <a href=\"javascript:;\" class=\"qing-comment-aite\">@since</a> V1.0.0<br> */<br>public class SchedulerPlugin implements IPlugin {<br><br>	private static Log LOG = Log.getLog(&quot;SchedulerPlugin&quot;);<br><br>	/**<br>	 * cron调度器<br>	 */<br>	private final Scheduler cronScheduler = new Scheduler();<br><br>	/**<br>	 * ScheduledThreadPoolExecutor调度器<br>	 */<br>	private final ScheduledThreadPoolExecutor taskScheduler;<br><br>	/**<br>	 * 调度任务配置文件<br>	 */<br>	private final String jobConfigFile;<br><br>	/**<br>	 * &lt;p&gt;<br>	 * Title: SchedulerPlugin<br>	 * &lt;/p&gt;<br>	 * &lt;p&gt;<br>	 * Description: 构造函数(线程池依据系统核心数自动设定)<br>	 * &lt;/p&gt;<br>	 * <br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@since</a> V1.0.0<br>	 */<br>	public SchedulerPlugin() {<br>		this(getBestPoolSize(), null);<br>	}<br><br>	/**<br>	 * &lt;p&gt;<br>	 * Title: SchedulerPlugin<br>	 * &lt;/p&gt;<br>	 * &lt;p&gt;<br>	 * Description: 构造函数(指定调度线程池大小)<br>	 * &lt;/p&gt;<br>	 * <br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> scheduledThreadPoolSize<br>	 *            调度线程池大小<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@since</a> V1.3.0<br>	 */<br>	public SchedulerPlugin(int scheduledThreadPoolSize) {<br>		this(scheduledThreadPoolSize, null);<br>	}<br><br>	/**<br>	 * &lt;p&gt;<br>	 * Title: SchedulerPlugin<br>	 * &lt;/p&gt;<br>	 * &lt;p&gt;<br>	 * Description: 构造函数(指定调度任务配置文件，线程池依据系统核心数自动设定)<br>	 * &lt;/p&gt;<br>	 * <br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> jobConfigFile<br>	 *            调度任务配置文件<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@since</a> V1.0.0<br>	 */<br>	public SchedulerPlugin(String jobConfigFile) {<br>		this(getBestPoolSize(), jobConfigFile);<br>	}<br><br>	/**<br>	 * &lt;p&gt;<br>	 * Title: SchedulerPlugin<br>	 * &lt;/p&gt;<br>	 * &lt;p&gt;<br>	 * Description: 构造函数(指定调度线程池大小和调度任务配置文件)<br>	 * &lt;/p&gt;<br>	 * <br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> scheduledThreadPoolSize<br>	 *            调度线程池大小<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> jobConfigFile<br>	 *            调度任务配置文件<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@since</a> V1.3.0<br>	 */<br>	public SchedulerPlugin(int scheduledThreadPoolSize, String jobConfigFile) {<br>		this.jobConfigFile = jobConfigFile;<br>		this.taskScheduler = new ScheduledThreadPoolExecutor(scheduledThreadPoolSize);<br>	}<br><br>	/**<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Title:</a> cronSchedule<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Description:</a> 添加基于Linux下的crontab表达式的调度任务(Runnable)<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> task<br>	 *            定期执行的任务(Runnable)<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> cronExpression<br>	 *            cron调度表达式<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@since</a> V1.0.0<br>	 */<br>	public void cronSchedule(Runnable task, String cronExpression) {<br>		this.cronScheduler.schedule(cronExpression, task);<br>	}<br><br>	/**<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Title:</a> fixedRateSchedule<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Description:</a> 立即启动，并以固定的频率来运行任务。后续任务的启动时间不受前次任务延时影响（并行）。<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> task<br>	 *            定期执行的任务<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> periodSeconds<br>	 *            每次执行任务的间隔时间(单位秒)<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@return</a><br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@since</a> V1.0.0<br>	 */<br>	public ScheduledFuture&lt;?&gt; fixedRateSchedule(Runnable task, int periodSeconds) {<br>		return taskScheduler.scheduleAtFixedRate(task, 0, periodSeconds, TimeUnit.SECONDS);<br>	}<br><br>	/**<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Title:</a> fixedDelaySchedule<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Description:</a> 立即启动，两次任务间保持固定的时间间隔(任务串行执行，前一个结束之后间隔固定时间后一个才会启动)<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> task<br>	 *            定期执行的任务<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> periodSeconds<br>	 *            每次执行任务的间隔时间(单位秒)<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@return</a><br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@since</a> V1.0.0<br>	 */<br>	public ScheduledFuture&lt;?&gt; fixedDelaySchedule(Runnable task, int periodSeconds) {<br>		return taskScheduler.scheduleWithFixedDelay(task, 0, periodSeconds, TimeUnit.SECONDS);<br>	}<br><br>	<a href=\"javascript:;\" class=\"qing-comment-aite\">@Override</a><br>	public boolean start() {<br>		if (this.jobConfigFile != null) {<br>			// 任务配置文件非空,从配置文件汇总加载任务<br>			loadJobsFromConfigFile();<br>		}<br>		this.cronScheduler.setDaemon(true);<br>		this.cronScheduler.start();<br>		LOG.info(&quot;SchedulerPlugin is started&quot;);<br>		return true;<br>	}<br><br>	<a href=\"javascript:;\" class=\"qing-comment-aite\">@Override</a><br>	public boolean stop() {<br>		this.cronScheduler.stop();<br>		this.taskScheduler.shutdown();<br>		LOG.info(&quot;SchedulerPlugin is stopped&quot;);<br>		return true;<br>	}<br><br>	/**<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Title:</a> loadJobsFromConfigFile<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Description:</a> 从配置文件汇总加载任务<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@since</a> V1.0.0<br>	 */<br>	private void loadJobsFromConfigFile() {<br>		// 获取job配置文件<br>		Prop jobProp = PropKit.use(this.jobConfigFile);<br>		// 获得所有任务名<br>		Set&lt;String&gt; jobNames = this.getJobNamesFromProp(jobProp);<br>		// 逐个加载任务<br>		for (String jobName : jobNames) {<br>			loadJob(jobProp, jobName);<br>		}<br>	}<br><br>	/**<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Title:</a> loadJob<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Description:</a> 加载一个任务<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> jobProp<br>	 *            job配置<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> jobName<br>	 *            job名<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@since</a> V1.0.0<br>	 */<br>	private void loadJob(Prop jobProp, String jobName) {<br>		// 任务开关，默认开启<br>		Boolean enable = jobProp.getBoolean(jobName + &quot;.enable&quot;, Boolean.TRUE);<br>		// 任务被禁用，直接返回<br>		if (!enable) {<br>			return;<br>		}<br>		// 创建要执行的任务<br>		Runnable task = createTask(jobName, jobProp.get(jobName + &quot;.class&quot;));<br>		// 任务类型<br>		String taskType = jobProp.get(jobName + &quot;.type&quot;);<br>		if (StrKit.isBlank(taskType)) {<br>			throw new RuntimeException(&quot;Please set &quot; + jobName + &quot;.type&quot;);<br>		}<br>		// 任务表达式<br>		String expr = jobProp.get(jobName + &quot;.expr&quot;);<br>		if (StrKit.isBlank(expr)) {<br>			throw new RuntimeException(&quot;Please set &quot; + jobName + &quot;.expr&quot;);<br>		}<br>		// 依据任务类型，开始调度任务<br>		scheduleJobByType(jobName, taskType, expr, task);<br>		LOG.info(&quot;--------load job: &quot; + jobName + &quot; successfully--------&quot;);<br>		LOG.info(&quot;class: &quot; + jobProp.get(jobName + &quot;.class&quot;));<br>		LOG.info(&quot;type : &quot; + taskType);<br>		LOG.info(&quot;expr : &quot; + expr);<br>		LOG.info(&quot;----------------&quot;);<br>	}<br><br>	/**<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Title:</a> scheduleJobByType<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Description:</a> 依据任务类型，开始调度任务<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> jobName<br>	 *            任务名<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> taskType<br>	 *            任务类型<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> expr<br>	 *            调度表达式<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> task<br>	 *            执行的任务<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@since</a> V1.0.0<br>	 */<br>	private void scheduleJobByType(String jobName, String taskType, String expr, Runnable task) {<br>		if (&quot;cron&quot;.equals(taskType)) {<br>			this.cronSchedule(task, expr);<br>		} else if (&quot;fixedRate&quot;.equals(taskType)) {<br>			int periodSeconds = 0;<br>			try {<br>				periodSeconds = Integer.parseInt(expr);<br>			} catch (NumberFormatException e) {<br>				throw new RuntimeException(jobName + &quot;.expr must be a number&quot;);<br>			}<br>			this.fixedRateSchedule(task, periodSeconds);<br>		} else if (&quot;fixedDelay&quot;.equals(taskType)) {<br>			int periodSeconds = 0;<br>			try {<br>				periodSeconds = Integer.parseInt(expr);<br>			} catch (NumberFormatException e) {<br>				throw new RuntimeException(jobName + &quot;.expr must be a number&quot;);<br>			}<br>			this.fixedDelaySchedule(task, periodSeconds);<br>		} else {<br>			throw new RuntimeException(&quot;Please set &quot; + jobName + &quot;.type to cron/fixedRate/fixedDelay&quot;);<br>		}<br>	}<br><br>	/**<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Title:</a> createTask<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Description:</a> 创建任务<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> jobName<br>	 *            任务名<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> taskClassName<br>	 *            任务类名<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@return</a> Runnable对象<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@since</a> V1.0.0<br>	 */<br>	private Runnable createTask(String jobName, String taskClassName) {<br>		if (taskClassName == null) {<br>			throw new RuntimeException(&quot;Please set &quot; + jobName + &quot;.className&quot;);<br>		}<br><br>		Object temp = null;<br>		try {<br>			temp = Class.forName(taskClassName).newInstance();<br>		} catch (Exception e) {<br>			throw new RuntimeException(&quot;Can not create instance of class: &quot; + taskClassName, e);<br>		}<br><br>		Runnable task = null;<br>		if (temp instanceof Runnable) {<br>			task = (Runnable) temp;<br>		} else {<br>			throw new RuntimeException(&quot;Can not create instance of class: &quot; + taskClassName<br>					+ &quot;. this class must implements Runnable interface&quot;);<br>		}<br>		return task;<br>	}<br><br>	/**<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Title:</a> getJobNamesFromProp<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Description:</a> 获得所有任务名<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@param</a> jobProp<br>	 *            job配置<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@return</a> 任务名集合<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@since</a> V1.0.0<br>	 */<br>	private Set&lt;String&gt; getJobNamesFromProp(Prop jobProp) {<br>		Map&lt;String, Boolean&gt; jobNames = new HashMap&lt;String, Boolean&gt;();<br>		for (Object item : jobProp.getProperties().keySet()) {<br>			String fullKeyName = item.toString();<br>			// 获得job名<br>			String jobName = fullKeyName.substring(0, fullKeyName.indexOf(&quot;.&quot;));<br>			jobNames.put(jobName, Boolean.TRUE);<br>		}<br>		return jobNames.keySet();<br>	}<br><br>	/**<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Title:</a> getBestPoolSize<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@Description:</a> 获得调度线程池大小<br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@return</a><br>	 * <a href=\"javascript:;\" class=\"qing-comment-aite\">@since</a> V1.0.0<br>	 */<br>	private static int getBestPoolSize() {<br>		try {<br>			final int cores = Runtime.getRuntime().availableProcessors();<br>			// 每个核有8个调度线程<br>			return cores * 8;<br>		} catch (Throwable e) {<br>			return 8;<br>		}<br>	}<br>}<br></pre>','2017-02-20 16:50:17',0,0,'','3ba1267bf2c245bf88c3fc66b2e09013',0,0,'3.gif',1,0),
	('9b6ee242b96a4ba5913d95addc326d51','而威尔','111111@127.com','而威尔','2017-07-19 16:40:59',0,0,'','qingcailuobo-msg-cmt',0,0,'73.gif',0,1),
	('9edcd024fc5f4bdcb33ab43a0b778875','ssss','sss@qq.com','[pre]\nsssdasdfgas\n[/pre]','2017-02-08 16:05:50',0,0,NULL,'495fa978801d418a9b6ed475c989eaa1',0,0,'66.gif',1,1),
	('9f2c258cbe044fc180a8f1acd53da663','胡建洪','1043244432@qq.com','<a href=\"javascript:;\" class=\"qing-comment-aite\">@一个小白</a> 这个不清楚啊，我没有使用过！<img alt=\"[泪]\" title=\"[泪]\" src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/9d/sada_thumb.gif\"> ','2017-02-22 14:22:39',0,0,'ac7800241e1b47e586ec3ae0cfecc2b8','093dcae887cd4904b2d244fcdca5473a',0,0,'author.jpg',1,1),
	('a06dac7b331b4b3480ab8d2e102c829a','a','a@qq.com','a','2017-06-29 16:54:17',0,0,'','qingcailuobo-msg-cmt',0,0,'12.gif',0,1),
	('a15cfde1817b4672b38026e2a30ba355','12','1310228148@qq.com','121face[可爱] face[嘻嘻] ','2017-02-08 15:15:05',1,0,NULL,'qingcailuobo-msg-cmt',0,0,'57.gif',1,1),
	('a25e91262e6943e78b51d94afc785648','旋风','163@qq.com','@好几个 厉害啊，我只能下次再抢了','2017-02-09 13:17:42',0,0,NULL,'1ca3888bf494480a81db9f577e362d07',0,0,'3.gif',1,1),
	('a30afae08ac34ff8b62a3ec82f01a888','别人家的老公','gudankangti1987@126.com','<a href=\"javascript:;\" class=\"qing-comment-aite\">@胡建洪</a>  之前一直做的springmvc ，听到同事说起这个框架就想来看看   谢谢','2017-02-16 10:37:04',1,1,'296b76a8de5949e095eb56f784762c23','qingcailuobo-msg-cmt',0,0,'48.gif',1,1),
	('a498b67702274cb8b82bfb647caedf30','tty','123@123.com','face[哈哈] face[哈哈] face[哈哈] ','2017-02-11 14:06:21',0,0,'','qingcailuobo-msg-cmt',0,0,'49.gif',1,1),
	('a51dd86bf1204a07bc1edc0f31a28c19','gg','941192051@qq.com','禁吸戒毒家<img alt=\"[睡]\" title=\"[睡]\" src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/96/huangliansj_thumb.gif\"> f f f','2017-04-26 10:35:02',1,1,'','qingcailuobo-msg-cmt',0,0,'9.gif',0,1),
	('a7cb4e90982343e482e507d6a91ac52d','sdfa','fdas@qq.com','dfsafa','2017-02-07 22:14:16',0,0,NULL,'qingcailuobo-msg-cmt',0,0,'71.gif',1,1),
	('ac7800241e1b47e586ec3ae0cfecc2b8','一个小白','492300924@qq.com','intellij idea 开发软件跟MyEclipse 有什么不一样啊','2017-02-22 11:40:55',1,1,'','093dcae887cd4904b2d244fcdca5473a',0,0,'42.gif',1,1),
	('b20a30ea1a674ca79bf89d5af6552022','aaa','12132132132@qq.com','<a href=\"javascript:;\" class=\"qing-comment-aite\">@qwrqweq</a> ','2017-05-22 17:34:48',1,1,'47e8e53da6db439ca9c54c23e05ee580','qingcailuobo-msg-cmt',0,0,'0.gif',0,1),
	('b33a7340b7a04cd599876a100f109fa5','习大大','renji235@139.com','<a href=\"javascript:;\" class=\"qing-comment-aite\">@gg</a> <img alt=\"[哈哈]\" title=\"[哈哈]\" src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/6a/laugh.gif\"> ','2017-07-26 17:05:41',1,1,'a51dd86bf1204a07bc1edc0f31a28c19','qingcailuobo-msg-cmt',0,0,'18.gif',0,1),
	('b54232b8632b4f02b65146de0007b6fd','append','qew@qq.com','不错不错','2017-02-21 11:06:52',1,1,'','qingcailuobo-msg-cmt',0,0,'48.gif',1,1),
	('b57b14869b9b4df59158ddc30dfd9084','胡建洪','1043244432@qq.com','<a href=\"javascript:;\" class=\"qing-comment-aite\">@1</a> 目前就这样搞的，反正用户量不大<img alt=\"[微笑]\" title=\"[微笑]\" src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/5c/huanglianwx_thumb.gif\"> ','2017-05-10 09:44:24',0,0,'c9a0e029dbe54a198bd24b5aa0f26759','e045b65486664c67820ef9f7f4b81542',0,0,'author.jpg',1,1),
	('b5dcb4440fd44de09b29466a5469726a','ceshi','351402@qq.com','<pre>&lt;html&gt;<br>&lt;br&gt;<br>&lt;div&gt;<br>&lt;/div&gt;<br>&lt;/html&gt;<br></pre>','2017-03-05 22:24:23',0,0,'','qingcailuobo-msg-cmt',0,0,'36.gif',1,1),
	('b626acde292e499d886bb20bb5fc0361','胡建洪','1043244432@qq.com','<a href=\"javascript:;\" class=\"qing-comment-aite\">@sampson</a> 谢谢支持啊！<img alt=\"[微笑]\" title=\"[微笑]\" src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/5c/huanglianwx_thumb.gif\"> ','2017-02-20 20:59:15',0,1,'5111391a9c2b4f9cb93c7dab0764e0ff','5a823d3753b945e98696a83fe779bf3b',0,0,'author.jpg',1,1),
	('b68f4bec8487450bab0b7f9465660565','kinano','1032467389@qq.com','very good','2017-05-02 17:09:41',0,0,'','5a823d3753b945e98696a83fe779bf3b',0,0,'62.gif',0,1),
	('b8f813e23c5b4f6699aff2cae7cbe3ef','ceshi','351402@qq.com','<pre>&lt;html&gt;<br>&lt;br&gt;<br>&lt;div&gt;<br>&lt;/div&gt;<br>&lt;/html&gt;<br></pre>','2017-03-05 22:24:23',0,0,'','qingcailuobo-msg-cmt',0,0,'36.gif',1,0),
	('b934e82937f943ac8adf56ac26335895','huige','935178577@qq.com','你好你的后台是用java还是php?\n','2017-02-10 11:03:11',0,0,'','qingcailuobo-msg-cmt',0,0,'71.gif',1,1),
	('ba0f9d9ff2f34916916d27e68487d01e','这个是什么','123123@qq.com','阿三发射点','2017-02-11 23:22:58',0,0,'','qingcailuobo-msg-cmt',0,0,'3.gif',1,1),
	('bad8b0b68f674bd9aaa00c4ec176a834','小伟','12313@qq.com','马斯克：人类的生存模式已经是编写好的程序 网友的评论炸了！<br>原创 SandT 2017-04-15 09:45<br>马斯克：人类的生存模式已经是编写好的程序 网友的评论炸了！<br> <a href=\"http://p9.pstatp.com/large/1b8700037d6a074957b3\" target=\"_blank\" rel=\"nofollow\">http://p9.pstatp.com/large/1b8700037d6a074957b3</a> <br>SpaceX太空探索技术公司、环保电动汽车公司特斯拉（Tesla）以及SolarCity四家公司的CEO马斯克表示：“我们只有十亿分之一的机会生活在现实世界中。”实际上这意味着，他认为我们更有可能生活在复杂的计算机模拟世界中。我们的生存，我们的人生，我们的喜怒哀乐都被设定的好好的。<br><br>马斯克：人类的生存模式已经是编写好的程序 网友的评论炸了！<br><br>那么，我们的人生都是救世机器程序中预设的代码，我们所遭遇到的一切都是因为命运敲定了要这么发生。 那么像我们的首富马云，王健林的人生程序员是不是做了手脚，我们先看看媒体如何介绍马云的出生：1964年9月，马云出生在杭州一户普通人家。小脑袋，小身子，即使是40年后，他的“光辉形象”仍然没有什么大的改观。美国《福布斯》记者对马云的描述是这样的：“深凹的面颊，扭曲的头发，淘气的露齿笑，一个5英尺高、100磅重的顽童模样”。这就是马云出生的小号，如今可以说是世界家喻户晓的人物。<br><br>马斯克：人类的生存模式已经是编写好的程序 网友的评论炸了！<br><br>如果人生正如马斯克说的，已经被设定好了，那么网友们的评论都炸了，纷纷表示了自己的不满。','2017-05-12 17:48:36',0,0,'','qingcailuobo-msg-cmt',0,0,'5.gif',0,1),
	('bb7775ecb64b48b6b3af250548a51734','111','111@123.com','112face[哈哈] ','2017-02-10 01:04:44',1,0,'','qingcailuobo-msg-cmt',0,0,'44.gif',1,1),
	('bcb00802580d4f47aa41775d4cdca379','，、，、，、；买了么，。吗','ads@sd.com','gjbjnkj','2017-03-07 07:27:05',0,1,'','qingcailuobo-msg-cmt',0,0,'26.gif',1,1),
	('bcf916dbd0644953a604e445e225a7a1','555','5555@qq.com','<a href=\"javascript:;\" class=\"qing-comment-aite\">@SillyBoy</a> 11111','2017-02-14 18:24:26',0,0,'44680c2fc33d496e82bf12d756a56cf8','qingcailuobo-msg-cmt',0,0,'67.gif',1,1),
	('c8b9dea9bce745b2870ef38e6e31d7cf','test','test@qq.com','我终于成功抢到沙发啦','2017-02-06 13:09:51',1,0,NULL,'6a34999f2c79496ebd7c0aa921fdd53a',0,0,'25.gif',1,1),
	('c9a0e029dbe54a198bd24b5aa0f26759','1','1@1.com','<a href=\"javascript:;\" class=\"qing-comment-aite\">@胡建洪</a> 不登录就能留言?','2017-05-05 13:32:34',0,0,'4cbc999f61594e20b9b9633943712ea6','e045b65486664c67820ef9f7f4b81542',0,0,'27.gif',0,1),
	('caac442feb054b34ba76a7f34ec8db28','flyed@126.com','flyed@126.com','<img alt=\"[微笑]\" title=\"[微笑]\" src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/5c/huanglianwx_thumb.gif\"> ','2017-02-17 17:04:12',4,0,'','qingcailuobo-msg-cmt',0,0,'32.gif',1,1),
	('cc5f1233d7564976bfdde4b4deb4f04c','胡建洪','1043244432@qq.com','感谢丁*蓉同学于2017年02月08日赞助1.0元！','2017-02-09 13:45:23',9,2,NULL,'qingcailuo_donate_cmt',0,0,'author.jpg',1,1),
	('cedc71b2c1c3439aa2b2004b33ad584b','阿萨','1011111@qq.com','<a href=\"javascript:;\" class=\"qing-comment-aite\">@asddsad@qq.com</a>  你是谁','2017-06-20 23:03:06',0,0,'e82e608fc9c54bcebd2d1d9b899adab4','qingcailuobo-msg-cmt',0,0,'41.gif',0,1),
	('d2cceb5cd184436483b62a8301671e44','胡建洪','1043244432@qq.com','<a href=\"javascript:;\" class=\"qing-comment-aite\">@绝尘</a> 目前还没有做cookie处理，所以就这样啦，后面有时间在捣鼓下<img alt=\"[害羞]\" title=\"[害羞]\" src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/6e/shamea_thumb.gif\"> ','2017-02-27 13:34:15',1,0,'d3362eff475c45518fa33eca0d5f7571','qingcailuobo-msg-cmt',0,0,'author.jpg',1,1),
	('d3362eff475c45518fa33eca0d5f7571','绝尘','237809796@qq.com','可以无限点赞，还有无限踩，jfinal+layui 组合不错','2017-02-27 12:28:51',6,0,'','qingcailuobo-msg-cmt',0,0,'58.gif',1,1),
	('d424e40c14244ffaa72b00e8f6c33d4d','胡建洪','1043244432@qq.com','感谢章*（星缘）同学于2017年3月25日热心赞助5元～','2017-03-25 22:17:27',9,5,NULL,'qingcailuo_donate_cmt',0,0,'author.jpg',1,1),
	('d50999bf8b984132ac2db857f082c716','胡建洪','1043244432@qq.com','<a href=\"javascript:;\" class=\"qing-comment-aite\">@Tyrone</a> 这个得看下后台报什么错误了','2017-06-08 15:03:11',0,0,'eddd1141db40491b88ec2727971e1775','093dcae887cd4904b2d244fcdca5473a',0,0,'author.jpg',1,1),
	('d538576a33b74dfdb99ad35c9d247c9f','胡建洪','1043244432@qq.com','感谢崔大大于2017年02月10日赞助1.0元！','2017-02-10 19:17:07',11,2,NULL,'qingcailuo_donate_cmt',0,0,'author.jpg',1,1),
	('d6af603c25584a6a936cf7d8f68eed6a','ceshi','351402@qq.com','<pre>&lt;html&gt;<br>&lt;br&gt;<br>&lt;div&gt;<br>&lt;/div&gt;<br>&lt;/html&gt;<br></pre>','2017-03-05 22:24:23',0,0,'','qingcailuobo-msg-cmt',0,0,'36.gif',1,0),
	('d7a3b7572a4741c491055b89365bda20','rr','rr23buliuhu@163.com','rr','2017-05-17 17:39:02',0,0,'','e045b65486664c67820ef9f7f4b81542',0,0,'26.gif',0,1),
	('d8f9cc4ea0d140bcb8a20bb1446fb38b','Jackylin ','1@1.com','撒','2017-04-16 21:18:21',0,0,'','5a823d3753b945e98696a83fe779bf3b',0,0,'27.gif',0,1),
	('db7b3bb79f5449cfa600860bc98c01d9','哈哈','941192051@qq.com','快哭了','2017-04-10 15:30:18',1,3,'','qingcailuobo-msg-cmt',0,0,'9.gif',0,1),
	('deaefa1b83ab41df80021235a4ffc80f','sathya','sathya@163.com','<img alt=\"[微笑]\" title=\"[微笑]\" src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/5c/huanglianwx_thumb.gif\"> ','2017-05-31 16:07:50',0,0,'','qingcailuobo-msg-cmt',0,0,'59.gif',0,1),
	('e1421adb67c949ebb61e7ccdb8c9b4e3','dfr','123@123.com','<img alt=\"[可爱]\" title=\"[可爱]\" src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/14/tza_thumb.gif\"> <img alt=\"[可爱]\" title=\"[可爱]\" src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/14/tza_thumb.gif\"> <img alt=\"[可爱]\" title=\"[可爱]\" src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/14/tza_thumb.gif\"> ','2017-02-11 14:31:44',0,0,'','qingcailuobo-msg-cmt',0,0,'49.gif',1,1),
	('e1dbcc4ebca14be6a843b25833e0be65','发过火','941192051@qq.com','fgvasdga','2017-03-24 11:43:47',0,1,'','qingcailuobo-msg-cmt',0,0,'9.gif',0,1),
	('e31df40e5b7543faa5d9d0789d168e71','77','888@334.com','777','2017-06-05 23:09:31',0,0,'','f584b7d7774b437a87290a072dfb9a02',0,0,'55.gif',0,1),
	('e3847bd50a8f4f3cbdad0856e48b7790','董克源','dokeyuan@163.com','@胡建洪 face[互粉] [pre]\nvar laytpl = layui.laytpl;\nvar laypage = layui.laypage;\nvar qingcmt = layui.qingcmt;\n[/pre]','2017-02-09 21:09:43',0,0,'446482318567456daa6990233bca0e19','9b07036e1c04405f997aafd301e32bf0',0,0,'27.gif',1,1),
	('e5aa2f373a4d4dada06aad0772127a0d','胡建洪','1043244432@qq.com','<a href=\"javascript:;\" class=\"qing-comment-aite\">@黎明</a> 是的啊，但是以前的表情等又解析失败了','2017-02-11 14:13:08',0,0,'7352ee4845164cb894d9eefb4bc9f12e','qingcailuobo-msg-cmt',0,0,'36.gif',1,1),
	('e76a2e0c1d1c43cdaa97788100c51529','ceshi','351402@qq.com','<pre>&lt;html&gt;<br>&lt;br&gt;<br>&lt;div&gt;<br>&lt;/div&gt;<br>&lt;/html&gt;<br></pre>','2017-03-05 22:24:23',0,0,'','qingcailuobo-msg-cmt',0,0,'36.gif',1,0),
	('e79338284da54d22808099a4b1b07176','aa','aa@123.com','var path = require(&#39;path&#39;)<br><br>var gulp = require(&#39;gulp&#39;)<br>var gutil = require(&#39;gulp-util&#39;)<br>var jsonlint = require(&#39;gulp-jsonlint&#39;)<br>var eslint = require(&#39;gulp-eslint&#39;)<br>var EslintCLIEngine = require(&#39;eslint&#39;).CLIEngine<br>var webpack = require(&#39;webpack&#39;)<br>var webpackConfig = require(&#39;./webpack.config&#39;).webpack<br>var webpackStatusConfig = require(&#39;./res/common/status/webpack.config&#39;)<br>var gettext = require(&#39;gulp-angular-gettext&#39;)<br>var pug = require(&#39;gulp-pug&#39;)<br>var del = require(&#39;del&#39;)<br>// var protractor = require(&#39;gulp-protractor&#39;)<br>var protractor = require(&#39;./res/test/e2e/helpers/gulp-protractor-adv&#39;)<br>var protractorConfig = &#39;./res/test/protractor.conf&#39;<br>var karma = require(&#39;karma&#39;).server<br>var karmaConfig = &#39;/res/test/karma.conf.js&#39;<br>var stream = require(&#39;stream&#39;)<br>var run = require(&#39;gulp-run&#39;)<br><br>gulp.task(&#39;jsonlint&#39;, function() {<br>  return gulp.src([<br>      &#39;.bowerrc&#39;<br>    , &#39;.yo-rc.json&#39;<br>    , &#39;*.json&#39;<br>    ])<br>    .pipe(jsonlint())<br>    .pipe(jsonlint.reporter())<br>})<br><br>// Try to use eslint-cli directly instead of eslint-gulp<br>// since it doesn&#39;t support cache yet<br>gulp.task(&#39;eslint&#39;, function() {<br>  return gulp.src([<br>      &#39;lib/**/*.js&#39;<br>    , &#39;res/**/*.js&#39;<br>    , &#39;!res/bower_components/**&#39;<br>    , &#39;*.js&#39;<br>  ])<br>    // eslint() attaches the lint output to the &quot;eslint&quot; property<br>    // of the file object so it can be used by other modules.<br>    .pipe(eslint())<br>    // eslint.format() outputs the lint results to the console.<br>    // Alternatively use eslint.formatEach() (see Docs).<br>    .pipe(eslint.format())<br>    // To have the process exit with an error code (1) on<br>    // lint error, return the stream and pipe to failAfterError last.<br>    .pipe(eslint.failAfterError())<br>})<br><br>gulp.task(&#39;eslint-cli&#39;, function(done) {<br>  var cli = new EslintCLIEngine({<br>    cache: true<br>  , fix: false<br>  })<br><br>  var report = cli.executeOnFiles([<br>    &#39;lib/**/*.js&#39;<br>    , &#39;res/app/**/*.js&#39;<br>    , &#39;res/auth/**/*.js&#39;<br>    , &#39;res/common/**/*.js&#39;<br>    , &#39;res/test/**/*.js&#39;<br>    , &#39;res/web_modules/**/*.js&#39;<br>    , &#39;*.js&#39;<br>  ])<br>  var formatter = cli.getFormatter()<br>  console.log(formatter(report.results))<br><br>  if (report.errorCount &gt; 0) {<br>    done(new gutil.PluginError(&#39;eslint-cli&#39;, new Error(&#39;ESLint error&#39;)))<br>  }<br>  else {<br>    done()<br>  }<br>})<br><br><br>gulp.task(&#39;lint&#39;, [&#39;jsonlint&#39;, &#39;eslint-cli&#39;])<br>gulp.task(&#39;test&#39;, [&#39;lint&#39;, &#39;run:checkversion&#39;])<br>gulp.task(&#39;build&#39;, [&#39;clean&#39;, &#39;webpack:build&#39;])<br><br>gulp.task(&#39;run:checkversion&#39;, function() {<br>  gutil.log(&#39;Checking STF version...&#39;)<br>  return run(&#39;./bin/stf -V&#39;).exec()<br>})<br><br>gulp.task(&#39;karma_ci&#39;, function(done) {<br>  karma.start({<br>    configFile: path.join(__dirname, karmaConfig)<br>  , singleRun: true<br>  }, done)<br>})<br><br>gulp.task(&#39;karma&#39;, function(done) {<br>  karma.start({<br>    configFile: path.join(__dirname, karmaConfig)<br>  }, done)<br>})<br><br>if (gutil.env.multi) {<br>  protractorConfig = &#39;./res/test/protractor-multi.conf&#39;<br>}<br>else if (gutil.env.appium) {<br>  protractorConfig = &#39;./res/test/protractor-appium.conf&#39;<br>}<br><br>gulp.task(&#39;webdriver-update&#39;, protractor.webdriverUpdate)<br>gulp.task(&#39;webdriver-standalone&#39;, protractor.webdriverStandalone)<br>gulp.task(&#39;protractor-explorer&#39;, function(callback) {<br>  protractor.protractorExplorer({<br>    url: require(protractorConfig).config.baseUrl<br>  }, callback)<br>})<br><br>gulp.task(&#39;protractor&#39;, [&#39;webdriver-update&#39;], function(callback) {<br>  gulp.src([&#39;./res/test/e2e/**/*.js&#39;])<br>    .pipe(protractor.protractor({<br>      configFile: protractorConfig<br>    , debug: gutil.env.debug<br>    , suite: gutil.env.suite<br>    }))<br>    .on(&#39;error&#39;, function(e) {<br>      console.log(e)<br><br>      /* eslint no-console: 0 */<br>    })<br>    .on(&#39;end&#39;, callback)<br>})<br><br>// For piping strings<br>function fromString(filename, string) {<br>  var src = new stream.Readable({objectMode: true})<br>  src._read = function() {<br>    this.push(new gutil.File({<br>      cwd: &#39;&#39;<br>    , base: &#39;&#39;<br>    , path: filename<br>    , contents: new Buffer(string)<br>    }))<br>    this.push(null)<br>  }<br>  return src<br>}<br><br><br>// For production<br>gulp.task(&#39;webpack:build&#39;, function(callback) {<br>  var myConfig = Object.create(webpackConfig)<br>  myConfig.plugins = myConfig.plugins.concat(<br>    new webpack.DefinePlugin({<br>      &#39;process.env&#39;: {<br>        NODE_ENV: JSON.stringify(&#39;production&#39;)<br>      }<br>    })<br>  )<br>  myConfig.devtool = false<br><br>  webpack(myConfig, function(err, stats) {<br>    if (err) {<br>      throw new gutil.PluginError(&#39;webpack:build&#39;, err)<br>    }<br><br>    gutil.log(&#39;[webpack:build]&#39;, stats.toString({<br>      colors: true<br>    }))<br><br>    // Save stats to a json file<br>    // Can be analyzed in http://webpack.github.io/analyse/<br>    fromString(&#39;stats.json&#39;, JSON.stringify(stats.toJson()))<br>      .pipe(gulp.dest(&#39;./tmp/&#39;))<br><br>    callback()<br>  })<br>})<br><br>gulp.task(&#39;webpack:others&#39;, function(callback) {<br>  var myConfig = Object.create(webpackStatusConfig)<br>  myConfig.plugins = myConfig.plugins.concat(<br>    new webpack.DefinePlugin({<br>      &#39;process.env&#39;: {<br>        NODE_ENV: JSON.stringify(&#39;production&#39;)<br>      }<br>    })<br>  )<br>  myConfig.devtool = false<br><br>  webpack(myConfig, function(err, stats) {<br>    if (err) {<br>      throw new gutil.PluginError(&#39;webpack:others&#39;, err)<br>    }<br><br>    gutil.log(&#39;[webpack:others]&#39;, stats.toString({<br>      colors: true<br>    }))<br>    callback()<br>  })<br>})<br><br>gulp.task(&#39;translate&#39;, [<br>  &#39;translate:extract&#39;<br>, &#39;translate:push&#39;<br>, &#39;translate:pull&#39;<br>, &#39;translate:compile&#39;<br>])<br><br>gulp.task(&#39;pug&#39;, function() {<br>  return gulp.src([<br>      &#39;./res/**/*.pug&#39;<br>    , &#39;!./res/bower_components/**&#39;<br>    ])<br>    .pipe(pug({<br>      locals: {<br>        // So res/views/docs.pug doesn&#39;t complain<br>        markdownFile: {<br>          parseContent: function() {<br>          }<br>        }<br>      }<br>    }))<br>    .pipe(gulp.dest(&#39;./tmp/html/&#39;))<br>})<br><br>gulp.task(&#39;translate:extract&#39;, [&#39;pug&#39;], function() {<br>  return gulp.src([<br>      &#39;./tmp/html/**/*.html&#39;<br>    , &#39;./res/**/*.js&#39;<br>    , &#39;!./res/bower_components/**&#39;<br>    , &#39;!./res/build/**&#39;<br>    ])<br>    .pipe(gettext.extract(&#39;stf.pot&#39;))<br>    .pipe(gulp.dest(&#39;./res/common/lang/po/&#39;))<br>})<br><br>gulp.task(&#39;translate:compile&#39;, function() {<br>  return gulp.src(&#39;./res/common/lang/po/**/*.po&#39;)<br>    .pipe(gettext.compile({<br>      format: &#39;json&#39;<br>    }))<br>    .pipe(gulp.dest(&#39;./res/common/lang/translations/&#39;))<br>})<br><br>gulp.task(&#39;translate:push&#39;, function() {<br>  gutil.log(&#39;Pushing translation source to Transifex...&#39;)<br>  return run(&#39;tx push -s&#39;).exec()<br>})<br><br>gulp.task(&#39;translate:pull&#39;, function() {<br>  gutil.log(&#39;Pulling translations from Transifex...&#39;)<br>  return run(&#39;tx pull&#39;).exec()<br>})<br><br>gulp.task(&#39;clean&#39;, function(cb) {<br>  del([<br>    &#39;./tmp&#39;<br>    , &#39;./res/build&#39;<br>    , &#39;.eslintcache&#39;<br>  ], cb)<br>})','2017-07-28 14:57:12',0,0,'','qingcailuobo-msg-cmt',0,0,'43.gif',1,0),
	('e80b2c20bc55467cab40293503779b73','木槿心','13770733135@163.com','膜拜一下，我的胡哥','2017-07-26 09:15:05',0,0,'','00e05640cb9a4cef9ec0c355b4c4cd8c',0,0,'31.gif',0,1),
	('e82e608fc9c54bcebd2d1d9b899adab4','asddsad@qq.com','asddsad@qq.com','<a href=\"javascript:;\" class=\"qing-comment-aite\">@aaa</a> asdsadasdsadsad','2017-05-28 16:24:05',5,0,'b20a30ea1a674ca79bf89d5af6552022','qingcailuobo-msg-cmt',0,0,'73.gif',0,1),
	('e84f89d634e84eff8fe9cef3447827c4','dw','dqwd@qdqwd.com','dddd','2017-08-30 09:56:14',0,0,'','3ba1267bf2c245bf88c3fc66b2e09013',0,0,'70.gif',0,1),
	('e9f801f54bac4605b4d243f52c629148','123','123@qq.com','123','2017-03-02 17:58:38',1,1,'','f584b7d7774b437a87290a072dfb9a02',0,0,'45.gif',1,1),
	('ed33464693ba4493afd61a3ceb62f61c','胡建洪','1043244432@qq.com','<a href=\"javascript:;\" class=\"qing-comment-aite\">@小木鱼</a> 是的啊','2017-07-19 11:36:06',1,0,'7bcbf387f7634870838a0d121b2768bb','qingcailuobo-msg-cmt',0,0,'author.jpg',1,1),
	('ed912a7b0d894175a2aa2e828b5bc49d','aaa','aa@aa.com','aaa','2017-03-07 23:35:02',0,0,'','5a823d3753b945e98696a83fe779bf3b',0,0,'35.gif',0,1),
	('eddd1141db40491b88ec2727971e1775','Tyrone','li532788@126.com','配置文件:<br>#博文静态化存储的根目录<br>STATICS_ROOT_PATH = H:/Jfinal/qingcai-front<br><br>然后访问首页，出现以下错误，然后就404<br><pre>四月 18, 2017 4:01:07 下午 org.apache.jasper.servlet.JspServlet serviceJspFile<br>严重: PWC6117: File &quot;H%3A%5CWorkspaces%5CLunaEclipseWorkspaces%5Cluobo%5CWebRoot%5Cindex.jsp&quot; not found<br></pre>这个怎么解决呢？','2017-04-18 16:03:04',1,0,'','093dcae887cd4904b2d244fcdca5473a',0,0,'58.gif',0,1),
	('eebcaa3e41114e72b7efa65eb0867018','木槿','472998043@qq.com','估计是故意的吧<img alt=\"[嘻嘻]\" title=\"[嘻嘻]\" src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/0b/tootha_thumb.gif\"> <img alt=\"[嘻嘻]\" title=\"[嘻嘻]\" src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/0b/tootha_thumb.gif\"> <img alt=\"[嘻嘻]\" title=\"[嘻嘻]\" src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/0b/tootha_thumb.gif\"> ','2017-03-29 16:19:20',0,0,'','f4864b922fb1492e91a83e79d491fa3d',0,0,'29.gif',0,1),
	('f198101567b0453f8ebbc93f36404439','ceshi','351402@qq.com','<pre>&lt;html&gt;<br>&lt;br&gt;<br>&lt;div&gt;<br>&lt;/div&gt;<br>&lt;/html&gt;<br></pre>','2017-03-05 22:24:24',0,0,'','qingcailuobo-msg-cmt',0,0,'36.gif',1,0),
	('f2d850f24964441b989182795a580c74','胡建洪','1043244432@qq.com','<a href=\"javascript:;\" class=\"qing-comment-aite\">@Jackylin</a>  有的，我的源码放在 <a href=\"https://github.com/hujianhong/blog\" target=\"_blank\" rel=\"nofollow\">https://github.com/hujianhong/blog</a> 这里的。我选的前端框架有AmazeUI和layUI，前者实现跨屏适配，支持手机端浏览；后者主要实现数据渲染，模块开发嘛<img alt=\"[微笑]\" title=\"[微笑]\" src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/5c/huanglianwx_thumb.gif\"> 。是的，评论框的表情选择样式有点问题，谢谢指正啊<img alt=\"[可爱]\" title=\"[可爱]\" src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/14/tza_thumb.gif\"> ','2017-02-16 00:31:58',0,0,'4d5a623462f24fa283e055965de3e86d','5a823d3753b945e98696a83fe779bf3b',0,0,'author.jpg',1,1),
	('f2e026d9ff43489c91076fa583864957','666','y@y-cc.cc','学习了','2017-02-22 18:59:05',5,0,'','qingcailuobo-msg-cmt',0,0,'39.gif',1,1),
	('f2fb3aef7d124db1b14079864902fab4','douma','mrhe_vip@163.com','作者大大，你在文中写到：“我借助Nginx服务器实现连接前端和后端，实现前后端通信”  具体怎么做呢 说说思路嘛  我也想弄一个个人博客','2017-02-21 15:09:46',1,1,'','5a823d3753b945e98696a83fe779bf3b',0,0,'65.gif',1,1),
	('f4fba80972f647bbb55bb9c090c61085','ceshi','351402@qq.com','<pre>&lt;html&gt;<br>&lt;br&gt;<br>&lt;div&gt;<br>&lt;/div&gt;<br>&lt;/html&gt;<br></pre>','2017-03-05 22:24:24',0,0,'','qingcailuobo-msg-cmt',0,0,'36.gif',1,0),
	('f504203fe1dc4a239e39be262b0bd7f2','胡建洪','1043244432@qq.com','感谢孙*成同学于2017年02月27日热心赞助1.0元','2017-02-27 15:48:00',6,2,NULL,'qingcailuo_donate_cmt',0,0,'author.jpg',1,1),
	('f649aef366a647e08f440070f01b98a0','sd','234579@qq.com','sgs','2017-09-18 23:04:55',0,0,'','qingcailuobo-msg-cmt',0,0,'71.gif',0,1),
	('fa28c665f9404c2cabea1641e295a147','123','123@q.com','<img alt=\"[睡]\" title=\"[睡]\" src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/96/huangliansj_thumb.gif\"> ','2017-02-15 14:39:50',1,0,'','qingcailuobo-msg-cmt',0,0,'6.gif',1,1),
	('fc7d48959c10498b8af2097b6eee9b25','绝尘','237809796@qq.com','保存完后数据可以直接使用 异步加载免除刷新闪烁，（直接js将评论加入列表中）','2017-02-27 12:30:13',0,1,'','qingcailuobo-msg-cmt',0,0,'58.gif',1,1),
	('ff1f8747beb14e0db0218b4044e075c2','6666','6666@qq.com','<a href=\"javascript:;\" class=\"qing-comment-aite\">@什么东东</a> ','2017-04-11 22:28:12',0,0,'6633c29f8c8b421da6683136ab4489c7','f4864b922fb1492e91a83e79d491fa3d',0,0,'1.gif',0,1);

UNLOCK TABLES;



CREATE TABLE `notice` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `content` mediumtext NOT NULL,
  `start` datetime NOT NULL,
  `end` datetime NOT NULL,
  `visible` tinyint(1) NOT NULL DEFAULT '1' COMMENT '0,不可见，1可见',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `notice` WRITE;


INSERT INTO `notice` (`id`, `content`, `start`, `end`, `visible`)
VALUES
	(1,'本博客系统已经开源在GitHub(https://github.com/hujianhong/blog)上了,需要的童鞋可以去下载玩玩～','2017-03-10 00:00:00','2017-12-31 00:00:00',1);


UNLOCK TABLES;




CREATE TABLE `tags` (
  `id` char(32) NOT NULL,
  `name` varchar(50) NOT NULL,
  `cdate` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `tags` WRITE;


INSERT INTO `tags` (`id`, `name`, `cdate`)
VALUES
	('046A899EE7A6EC88D370211A518C9E80','算法','2017-02-07 12:00:00'),
	('0796F7F8B93AD1204D4769C52AFF5284','队列','2017-02-20 21:37:21'),
	('0A5A4153B8FAB8B735400132F35570CD','前序','2017-02-18 21:26:44'),
	('0FEA7C47D93DA5689F31820EE525B367','数据结构','2017-02-07 12:00:00'),
	('1','数据挖掘','2017-02-07 12:00:00'),
	('1573C74E227F14DED2DAA71BB049ECDA','面试','2017-03-10 19:32:13'),
	('190980C7D0218074702264D8DA6E31E1','域名','2017-02-07 12:00:00'),
	('21D68B2DE0E91DFB14942CA8AEA316FC','思考','2017-09-22 23:29:13'),
	('235D7BE86290BD05B9985C8A5B3713FD','CCF','2017-02-07 12:00:00'),
	('267595728BEB6EE41DFC9C862917055D','本地运行','2017-02-21 20:43:20'),
	('2E25C285356CBB0ED8785A1377027D79','MAC','2017-04-12 09:16:46'),
	('32981A13284DB7A021131DF49E6CD203','js','2017-02-07 12:00:00'),
	('32F7222026696F30787889194DEE83E5','Eclipse','2017-02-21 20:43:20'),
	('36b487f38d114b10ae793ff58cf952fb','Net','2017-02-07 12:00:00'),
	('3FF3C3E26A68112C11C3E80F2A26896E','开发','2017-02-07 12:00:00'),
	('46CFF7C2E22C5FB804C02D5B561B39F8','JDK','2017-02-18 21:29:36'),
	('48B26E4419603D55F8128747CFEE5E92','求职','2017-09-11 14:55:50'),
	('49EDAB1CB53BA3CF77C6C3271196ACBB','阿里巴巴','2017-03-10 19:32:13'),
	('5','Java','2017-02-07 12:00:00'),
	('50c61d9e506248ae8ad00539a8603ea6','PHP','2017-02-07 12:00:00'),
	('558D23A4DCECDFDBE69B2C8BB50560A9','树高','2017-02-18 21:26:44'),
	('58463BDA2FB934A0ABC9E9A02C012A41','栈','2017-02-20 21:37:21'),
	('5A85E5CECB477D06AD59A113A1F6AE2C','LevelDB','2017-09-05 22:20:19'),
	('5BC06F5800D415CC95E1349EDBACA425','JS','2017-09-05 22:15:29'),
	('5FC71C1AEC7C1753FA3596E8DDAD3C4C','JRE','2017-02-14 21:03:46'),
	('6','Android','2017-02-07 12:00:00'),
	('61FE750FD3C6240A6CD016C70E693D06','Java.JDK','2017-02-14 21:03:46'),
	('62A004B95946BB97541AFA471DCCA73A','MySQL','2017-02-20 21:30:57'),
	('62E0B5B350C9E3D2C19AA801D9442BA9','Nginx','2017-02-07 12:00:00'),
	('63DB5605AC2D3A21F0ABD506C9531209','图','2017-02-14 16:41:48'),
	('6499CC2E7CB3DAAF2861D054ECF54B87','最小生成树','2017-02-14 16:44:02'),
	('66C260D88C897E6C6353F6DB6EACC3BD','分区','2017-02-20 21:30:57'),
	('68051BF4AA2743B030984B694628EE9C','数据库','2017-09-05 22:20:19'),
	('684892549c6f4df88e147eb0c252dcb6','APP','2017-02-07 12:00:00'),
	('69F69B59AAE6F4EE1A47BBC1086ECDB4','Socket','2017-03-07 10:34:24'),
	('6A620E3C07048291FDB26B6EDCEE7ABA','同步','2017-02-20 21:02:27'),
	('6DE9E0AFBA7328E44B19153A6733835C','后序','2017-02-18 21:26:44'),
	('724874D1BE77F450A09B305FC1534AFB','alias','2017-09-11 19:15:04'),
	('7898814832f34d91b9ed45eed7049837','测试','2017-02-07 12:00:00'),
	('7DDBE15C845FA27A2BAB496183042CA6','网络','2017-02-14 16:45:01'),
	('8178AD6FD9FE5CEEB9D3AA702AD45403','二叉树','2017-02-18 21:26:44'),
	('8347A927C09A4EC2FE473B0A93F667D0','修改','2017-02-07 12:00:00'),
	('88EAEC4C7BC4EC29AFA783666D0B53BC','剑指offer','2017-02-21 22:24:57'),
	('8936F53B23E9DFE2965D9E2EC23A4779','随笔','2017-09-11 14:55:50'),
	('8a1aeb3e96dd48b7873d9100062cd8d6','Linux','2017-02-07 12:00:00'),
	('912302CB020149C37F9642FBC9E42891','浏览器','2017-02-21 20:43:20'),
	('93F725A07423FE1C889F448B33D21F46','java','2017-02-07 12:00:00'),
	('9778840A0100CB30C982876741B0B5A2','SQL','2017-02-20 21:30:57'),
	('9ABFE4A03928EB88A75A5CD95822DFEF','前端','2017-09-05 22:15:29'),
	('9D0F8F6F657186A8F0F18F1EA92D1C95','职业规划','2017-03-10 19:32:13'),
	('A5C5D0DC90CCF0733D65742D59D28CCC','比赛','2017-07-21 17:51:58'),
	('a838b3281b5f471e8fe85aeae0eb0330','SSH','2017-02-07 12:00:00'),
	('adc1e0953e324138b9ed6b0603a69373','Git','2017-02-07 12:00:00'),
	('ADFC37610C59D9BD09BFFC3E9759F170','建站','2017-02-07 12:00:00'),
	('AFAEF14EBCFFDF11EF0A5D3E61B50866','并查集','2017-02-14 16:44:02'),
	('B6747DD73070743AE1F68AD64A80E873','激情','2017-09-22 23:29:13'),
	('BEE912D79EEFB7335988C4997AA9138D','查询','2017-02-20 21:30:57'),
	('C2EA3D934457181067DEC8B8DFA66E00','备案','2017-02-07 12:00:00'),
	('C50D13646EC66F1929DA5D491F2DFF0F','博客','2017-02-15 15:26:07'),
	('C72EC5AF9F5EC0DE360EC126CDA41672','菜鸟驿站','2017-03-10 19:32:13'),
	('C7A628CBA22E28EB17B5F5C6AE2A266A','css','2017-02-07 12:00:00'),
	('ce447e247965481baac6ea8745e49e43','Redis','2017-02-07 12:00:00'),
	('CF3882F1C43AB22BFF0BD9D82D83251B','IO','2017-03-07 10:34:24'),
	('CF4F2BADD0AED460A7C0758AE4EC4874','中序','2017-02-18 21:26:44'),
	('D276123C8BF8DABF3AE03A2A571ACD43','线程','2017-02-20 21:02:27'),
	('D3B7C913CD04EBFEC0E9EC32CB6FD58C','GitHub','2017-02-15 15:26:07'),
	('D52387880E1EA22817A72D3759213819','Java','2017-02-07 12:00:00'),
	('D95200B7462824DA8D5C86DF1D944D7D','理想','2017-09-22 23:29:13'),
	('DA9B26CFD7DE4FB79CABBDBC8FA05F61','tarjan','2017-02-14 16:41:48'),
	('DB06C78D1E24CF708A14CE81C9B617EC','测试','2017-02-07 12:00:00'),
	('DD29E7545EB8E590333BF6705D45BD71','layui','2017-02-15 15:26:07'),
	('E0407C4DA384781218D7D89D043BA67B','广度优先搜索','2017-02-14 16:37:51'),
	('E206A54E97690CCE50CC872DD70EE896','linux','2017-09-11 19:15:04'),
	('e686c30979dd452f98a59a53f4d8487c','Python','2017-02-07 12:00:00'),
	('F88522CF1B8A99E869EE231AC97BBC86','进程','2017-02-20 21:02:27'),
	('FC35FDC70D5FC69D269883A822C7A53E','html','2017-02-07 12:00:00');


UNLOCK TABLES;




CREATE TABLE `timeline` (
  `id` varchar(20) NOT NULL COMMENT '主键',
  `createdDate` datetime NOT NULL COMMENT '创建时间',
  `displayName` varchar(30) NOT NULL COMMENT '显示名称',
  `displayDate` datetime DEFAULT NULL COMMENT '显示日期',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `timeline` WRITE;


INSERT INTO `timeline` (`id`, `createdDate`, `displayName`, `displayDate`)
VALUES
	('201611','2017-01-14 12:12:34','2016年11月','2016-11-05 16:45:27'),
	('391202','2017-01-14 12:12:34','3912年02月','3912-02-01 00:00:00'),
	('391203','2017-01-14 12:12:34','3912年03月','3912-03-01 00:00:00'),
	('391204','2017-01-14 12:12:34','3912年04月','3912-04-01 00:00:00'),
	('391205','2017-01-14 12:12:34','3912年05月','3912-05-01 00:00:00'),
	('391206','2017-01-14 12:12:34','3912年06月','3912-06-01 00:00:00'),
	('391207','2017-01-14 12:12:34','3912年07月','3912-07-01 00:00:00'),
	('391208','2017-01-14 12:12:34','3912年08月','3912-08-01 00:00:00'),
	('391209','2017-01-14 12:12:34','3912年09月','3912-09-01 00:00:00'),
	('391210','2017-01-14 12:12:34','3912年10月','3912-10-01 00:00:00'),
	('391211','2017-01-14 12:12:34','3912年11月','3912-11-01 00:00:00'),
	('391212','2017-01-14 12:12:34','3912年12月','3912-12-01 00:00:00'),
	('391301','2017-01-14 12:12:34','3913年01月','3913-01-01 00:00:00'),
	('391402','2017-01-14 12:12:34','3914年02月','3914-02-01 00:00:00'),
	('391503','2017-01-14 12:12:34','3915年03月','3915-03-01 00:00:00'),
	('391604','2017-01-14 12:12:34','3916年04月','3916-04-01 00:00:00'),
	('391705','2017-01-14 12:12:34','3917年05月','3917-05-01 00:00:00'),
	('391806','2017-01-14 12:12:34','3918年06月','3918-06-01 00:00:00'),
	('391907','2017-01-14 12:12:34','3919年07月','3919-07-01 00:00:00'),
	('392008','2017-01-14 12:12:34','3920年08月','3920-08-01 00:00:00'),
	('392109','2017-01-14 12:12:34','3921年09月','3921-09-01 00:00:00'),
	('392210','2017-01-14 12:12:34','3922年10月','3922-10-01 00:00:00'),
	('392311','2017-01-14 12:12:34','3923年11月','3923-11-01 00:00:00'),
	('392412','2017-01-14 12:12:34','3924年12月','3924-12-01 00:00:00'),
	('392601','2017-01-14 12:12:34','3926年01月','3926-01-01 00:00:00'),
	('392802','2017-01-14 12:12:34','3928年02月','3928-02-01 00:00:00'),
	('393003','2017-01-14 12:12:34','3930年03月','3930-03-01 00:00:00'),
	('393204','2017-01-14 12:12:34','3932年04月','3932-04-01 00:00:00'),
	('393405','2017-01-14 12:12:34','3934年05月','3934-05-01 00:00:00'),
	('393606','2017-01-14 12:12:34','3936年06月','3936-06-01 00:00:00'),
	('393807','2017-01-14 12:12:34','3938年07月','3938-07-01 00:00:00'),
	('394008','2017-01-14 12:12:34','3940年08月','3940-08-01 00:00:00'),
	('394209','2017-01-14 12:12:34','3942年09月','3942-09-01 00:00:00'),
	('394410','2017-01-14 12:12:34','3944年10月','3944-10-01 00:00:00'),
	('394611','2017-01-14 12:12:34','3946年11月','3946-11-01 00:00:00'),
	('394812','2017-01-14 12:12:34','3948年12月','3948-12-01 00:00:00'),
	('395101','2017-01-14 12:12:34','3951年01月','3951-01-01 00:00:00'),
	('395402','2017-01-14 12:12:34','3954年02月','3954-02-01 00:00:00'),
	('395703','2017-01-14 12:12:34','3957年03月','3957-03-01 00:00:00'),
	('396004','2017-01-14 12:12:34','3960年04月','3960-04-01 00:00:00');


UNLOCK TABLES;







CREATE TABLE `type` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(50) DEFAULT NULL,
  `cdate` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `type` WRITE;


INSERT INTO `type` (`id`, `name`, `cdate`)
VALUES
	(1,'技术','2017-02-13 15:41:25'),
	(2,'随笔','2016-11-05 23:22:50'),
	(3,'杂谈','2017-02-12 21:44:42'),
	(6,'算法','2017-02-13 23:31:59');


UNLOCK TABLES;




CREATE TABLE `user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(20) NOT NULL,
  `password` varchar(32) NOT NULL,
  `nickname` varchar(30) DEFAULT '游客',
  `headurl` varchar(100) DEFAULT '',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `user` WRITE;


INSERT INTO `user` (`id`, `username`, `password`, `nickname`, `headurl`)
VALUES
	(737,'hujianhong','86141F4348B5F1BE2424B491D89F1E68','胡建洪','n');


UNLOCK TABLES;




CREATE TABLE `youlian` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(50) DEFAULT NULL,
  `logo` varchar(100) DEFAULT NULL,
  `url` varchar(100) DEFAULT NULL,
  `cdate` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `youlian` WRITE;


INSERT INTO `youlian` (`id`, `name`, `logo`, `url`, `cdate`)
VALUES
	(3,'我的GitHub',NULL,'https://github.com/hujianhong','2017-02-05 19:57:53'),
	(4,'我的旅行',NULL,'http://travel.huding.name','2017-02-10 19:08:30'),
	(5,'我的码云',NULL,'https://git.oschina.net/hujianhong','2017-02-25 10:20:16'),
	(6,'51微投票',NULL,'http://www.omlzz.com/','2017-02-05 19:42:50'),
	(11,'layui前端框架',NULL,'http://www.layui.com','2017-02-10 23:15:31'),
	(13,'MonkeyBlog',NULL,'http://www.houchaowei.com','2017-03-09 09:29:47'),
	(14,'Laychat即时通讯系统',NULL,'http://lay.laychat.cn','2017-04-14 14:03:42'),
	(15,'ChenJY\'sBlog',NULL,'http://chenjiayang.me/','2017-08-30 09:32:15');


UNLOCK TABLES;






CREATE VIEW `blog_display`
AS SELECT
   `category`.`name` AS `categoryName`,
   `blog`.`id` AS `id`,
   `blog`.`title` AS `title`,
   `blog`.`author` AS `author`,
   `blog`.`summary` AS `summary`,
   `blog`.`commentNum` AS `commentNum`,
   `blog`.`readNum` AS `readNum`,
   `blog`.`url` AS `url`,
   `blog`.`publishTime` AS `publishTime`,
   `blog`.`type` AS `type`,
   `blog`.`status` AS `status`,
   `blog`.`coverURL` AS `coverURL`,
   `blog`.`heartNum` AS `heartNum`,
   `blog`.`tags` AS `tags`,
   `type`.`name` AS `typeName`,
   `type`.`id` AS `typeID`,
   `category`.`id` AS `categoryID`,
   `blog`.`content` AS `content`
FROM ((`category` join `blog`) join `type`) where ((`category`.`id` = `blog`.`categoryID`) and (`category`.`typeID` = `type`.`id`));






CREATE  VIEW `blog_back_display`
AS SELECT
   `category`.`name` AS `categoryName`,
   `blog`.`id` AS `id`,
   `blog`.`title` AS `title`,
   `blog`.`author` AS `author`,
   `blog`.`commentNum` AS `commentNum`,
   `blog`.`readNum` AS `readNum`,
   `blog`.`url` AS `url`,
   `blog`.`publishTime` AS `publishTime`,
   `blog`.`type` AS `type`,
   `blog`.`status` AS `status`,
   `blog`.`statusName` AS `statusName`,
   `blog`.`heartNum` AS `heartNum`
FROM (`category` join `blog`) where (`category`.`id` = `blog`.`categoryID`);



CREATE VIEW `blog_display_by_tag`
AS SELECT
   `category`.`name` AS `categoryName`,
   `blog`.`id` AS `id`,
   `blog`.`title` AS `title`,
   `blog`.`author` AS `author`,
   `blog`.`summary` AS `summary`,
   `blog`.`commentNum` AS `commentNum`,
   `blog`.`readNum` AS `readNum`,
   `blog`.`url` AS `url`,
   `blog`.`publishTime` AS `publishTime`,
   `blog`.`type` AS `type`,
   `blog`.`status` AS `status`,
   `blog`.`coverURL` AS `coverURL`,
   `blog`.`heartNum` AS `heartNum`,
   `blog`.`tags` AS `tags`,
   `type`.`name` AS `typeName`,
   `type`.`id` AS `typeID`,
   `category`.`id` AS `categoryID`,
   `tags`.`id` AS `tagID`,
   `tags`.`name` AS `tagName`
FROM ((((`category` join `blog`) join `type`) join `blog_tags`) join `tags`) where ((`category`.`id` = `blog`.`categoryID`) and (`category`.`typeID` = `type`.`id`) and (`blog_tags`.`blogID` = `blog`.`id`) and (`blog_tags`.`tagID` = `tags`.`id`));

